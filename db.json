{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/window.getSelection.xlsx","path":"images/window.getSelection.xlsx","modified":0,"renderable":0},{"_id":"source/images/body-parser使用注意/1.png","path":"images/body-parser使用注意/1.png","modified":0,"renderable":0},{"_id":"source/images/body-parser使用注意/2.png","path":"images/body-parser使用注意/2.png","modified":0,"renderable":0},{"_id":"source/images/body-parser使用注意/3.png","path":"images/body-parser使用注意/3.png","modified":0,"renderable":0},{"_id":"source/images/body-parser使用注意/4.png","path":"images/body-parser使用注意/4.png","modified":0,"renderable":0},{"_id":"source/images/body-parser使用注意/5.png","path":"images/body-parser使用注意/5.png","modified":0,"renderable":0},{"_id":"source/images/body-parser使用注意/6.png","path":"images/body-parser使用注意/6.png","modified":0,"renderable":0},{"_id":"source/images/create-react-app配置webpack/1.png","path":"images/create-react-app配置webpack/1.png","modified":0,"renderable":0},{"_id":"source/images/create-react-app配置webpack/2.png","path":"images/create-react-app配置webpack/2.png","modified":0,"renderable":0},{"_id":"source/images/create-react-app配置webpack/3.png","path":"images/create-react-app配置webpack/3.png","modified":0,"renderable":0},{"_id":"source/images/create-react-app配置webpack/4.png","path":"images/create-react-app配置webpack/4.png","modified":0,"renderable":0},{"_id":"source/images/for循环的灵活运用/1.png","path":"images/for循环的灵活运用/1.png","modified":0,"renderable":0},{"_id":"source/images/gitment评论插件的配置/1.png","path":"images/gitment评论插件的配置/1.png","modified":0,"renderable":0},{"_id":"source/images/gitment评论插件的配置/2.png","path":"images/gitment评论插件的配置/2.png","modified":0,"renderable":0},{"_id":"source/images/http-proxy-middleware配合gulp使用时的一些坑/1.png","path":"images/http-proxy-middleware配合gulp使用时的一些坑/1.png","modified":0,"renderable":0},{"_id":"source/images/javascript的数据属性和访问器属性/1.png","path":"images/javascript的数据属性和访问器属性/1.png","modified":0,"renderable":0},{"_id":"source/images/javascript的数据属性和访问器属性/2.png","path":"images/javascript的数据属性和访问器属性/2.png","modified":0,"renderable":0},{"_id":"source/images/javascript的数据属性和访问器属性/3.png","path":"images/javascript的数据属性和访问器属性/3.png","modified":0,"renderable":0},{"_id":"source/images/javascript的数据属性和访问器属性/4.png","path":"images/javascript的数据属性和访问器属性/4.png","modified":0,"renderable":0},{"_id":"source/images/javascript的数据属性和访问器属性/5.png","path":"images/javascript的数据属性和访问器属性/5.png","modified":0,"renderable":0},{"_id":"source/images/mobx基本用法/1.gif","path":"images/mobx基本用法/1.gif","modified":0,"renderable":0},{"_id":"source/images/mobx基本用法/2.gif","path":"images/mobx基本用法/2.gif","modified":0,"renderable":0},{"_id":"source/images/mobx基本用法/3.png","path":"images/mobx基本用法/3.png","modified":0,"renderable":0},{"_id":"source/images/react中的context/4.png","path":"images/react中的context/4.png","modified":0,"renderable":0},{"_id":"source/images/react中的context/5.png","path":"images/react中的context/5.png","modified":0,"renderable":0},{"_id":"source/images/react中跨域请求数据/1.png","path":"images/react中跨域请求数据/1.png","modified":0,"renderable":0},{"_id":"source/images/react生命周期详解/1.png","path":"images/react生命周期详解/1.png","modified":0,"renderable":0},{"_id":"source/images/react生命周期详解/2.png","path":"images/react生命周期详解/2.png","modified":0,"renderable":0},{"_id":"source/images/react生命周期详解/3.png","path":"images/react生命周期详解/3.png","modified":0,"renderable":0},{"_id":"source/images/react生命周期详解/4.png","path":"images/react生命周期详解/4.png","modified":0,"renderable":0},{"_id":"source/images/react生命周期详解/5.png","path":"images/react生命周期详解/5.png","modified":0,"renderable":0},{"_id":"source/images/react生命周期详解/6.png","path":"images/react生命周期详解/6.png","modified":0,"renderable":0},{"_id":"source/images/react生命周期详解/7.png","path":"images/react生命周期详解/7.png","modified":0,"renderable":0},{"_id":"source/images/react生命周期详解/8.png","path":"images/react生命周期详解/8.png","modified":0,"renderable":0},{"_id":"source/images/react生命周期详解/9.png","path":"images/react生命周期详解/9.png","modified":0,"renderable":0},{"_id":"source/images/sublime中使用editconfig/1.png","path":"images/sublime中使用editconfig/1.png","modified":0,"renderable":0},{"_id":"source/images/sublime中使用editconfig/3.png","path":"images/sublime中使用editconfig/3.png","modified":0,"renderable":0},{"_id":"source/images/sublime中使用editconfig/4.png","path":"images/sublime中使用editconfig/4.png","modified":0,"renderable":0},{"_id":"source/images/sublime中使用editconfig/5.png","path":"images/sublime中使用editconfig/5.png","modified":0,"renderable":0},{"_id":"source/images/sublime中使用editconfig/6.jpg","path":"images/sublime中使用editconfig/6.jpg","modified":0,"renderable":0},{"_id":"source/images/vue自定义父子组件组件v-model的通信/checkbox.gif","path":"images/vue自定义父子组件组件v-model的通信/checkbox.gif","modified":0,"renderable":0},{"_id":"source/images/webpack热更新-HMR/1.png","path":"images/webpack热更新-HMR/1.png","modified":0,"renderable":0},{"_id":"source/images/webpack热更新-HMR/2.png","path":"images/webpack热更新-HMR/2.png","modified":0,"renderable":0},{"_id":"source/images/webpack热更新-HMR/3.png","path":"images/webpack热更新-HMR/3.png","modified":0,"renderable":0},{"_id":"source/images/webpack热更新-HMR/4.png","path":"images/webpack热更新-HMR/4.png","modified":0,"renderable":0},{"_id":"source/images/webpack热更新-HMR/5.png","path":"images/webpack热更新-HMR/5.png","modified":0,"renderable":0},{"_id":"source/images/webpack热更新-HMR/6.png","path":"images/webpack热更新-HMR/6.png","modified":0,"renderable":0},{"_id":"source/images/webpack热更新-HMR/7.png","path":"images/webpack热更新-HMR/7.png","modified":0,"renderable":0},{"_id":"source/images/webpack配置代码分割/1.jpeg","path":"images/webpack配置代码分割/1.jpeg","modified":0,"renderable":0},{"_id":"source/images/webpack配置代码分割/2.png","path":"images/webpack配置代码分割/2.png","modified":0,"renderable":0},{"_id":"source/images/认识pushstate、popstate-无刷新改变URL/1.png","path":"images/认识pushstate、popstate-无刷新改变URL/1.png","modified":0,"renderable":0},{"_id":"source/images/认识pushstate、popstate-无刷新改变URL/2.png","path":"images/认识pushstate、popstate-无刷新改变URL/2.png","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.png","path":"img/alipay.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"source/images/css中的attr/1.png","path":"images/css中的attr/1.png","modified":0,"renderable":0},{"_id":"source/images/react中的context/1.png","path":"images/react中的context/1.png","modified":0,"renderable":0},{"_id":"source/images/react中的context/2.png","path":"images/react中的context/2.png","modified":0,"renderable":0},{"_id":"source/images/react中的context/3.png","path":"images/react中的context/3.png","modified":0,"renderable":0},{"_id":"source/images/sublime中使用editconfig/2.png","path":"images/sublime中使用editconfig/2.png","modified":0,"renderable":0},{"_id":"source/images/vue自定义父子组件组件v-model的通信/CheckboxGroup.gif","path":"images/vue自定义父子组件组件v-model的通信/CheckboxGroup.gif","modified":0,"renderable":0},{"_id":"source/images/身份认证-jwt/1.jpeg","path":"images/身份认证-jwt/1.jpeg","modified":0,"renderable":0},{"_id":"source/images/vue自定义父子组件组件v-model的通信/notok.gif","path":"images/vue自定义父子组件组件v-model的通信/notok.gif","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/cloudTie/mobile.less","path":"css/cloudTie/mobile.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/cloudTie/pc.less","path":"css/cloudTie/pc.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/loader.js","path":"js/cloudTie/loader.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/loader.min.js","path":"js/cloudTie/loader.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/mobile.min.js","path":"js/cloudTie/mobile.min.js","modified":0,"renderable":1},{"_id":"source/images/vue自定义父子组件组件v-model的通信/ok.gif","path":"images/vue自定义父子组件组件v-model的通信/ok.gif","modified":0,"renderable":0},{"_id":"themes/indigo/source/js/cloudTie/mobile.js","path":"js/cloudTie/mobile.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/pc.min.js","path":"js/cloudTie/pc.min.js","modified":0,"renderable":1},{"_id":"source/images/webpack配置代码分割/4.jpeg","path":"images/webpack配置代码分割/4.jpeg","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/pc.js","path":"js/cloudTie/pc.js","modified":0,"renderable":1},{"_id":"source/images/webpack4-0中的mode和-babelrc的env-development配置项目/1.gif","path":"images/webpack4-0中的mode和-babelrc的env-development配置项目/1.gif","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"source/images/gitment评论插件的配置/4.png","path":"images/gitment评论插件的配置/4.png","modified":0,"renderable":0},{"_id":"source/images/webpack配置代码分割/3.jpeg","path":"images/webpack配置代码分割/3.jpeg","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/身份认证-jwt/show2.gif","path":"images/身份认证-jwt/show2.gif","modified":0,"renderable":0},{"_id":"source/images/认识pushstate、popstate-无刷新改变URL/3.gif","path":"images/认识pushstate、popstate-无刷新改变URL/3.gif","modified":0,"renderable":0},{"_id":"source/images/身份认证-jwt/show3.gif","path":"images/身份认证-jwt/show3.gif","modified":0,"renderable":0},{"_id":"source/images/webpack热更新-HMR/8.gif","path":"images/webpack热更新-HMR/8.gif","modified":0,"renderable":0},{"_id":"source/images/身份认证-jwt/show.gif","path":"images/身份认证-jwt/show.gif","modified":0,"renderable":0},{"_id":"source/images/gitment评论插件的配置/3.png","path":"images/gitment评论插件的配置/3.png","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/position的sticky属性/1.gif","path":"images/position的sticky属性/1.gif","modified":0,"renderable":0},{"_id":"source/images/Django开发安装MySQL-python解决过程/3.png","path":"images/Django开发安装MySQL-python解决过程/3.png","modified":1,"renderable":0},{"_id":"source/images/Django开发安装MySQL-python解决过程/1.png","path":"images/Django开发安装MySQL-python解决过程/1.png","modified":1,"renderable":0},{"_id":"source/images/Django开发安装MySQL-python解决过程/2.png","path":"images/Django开发安装MySQL-python解决过程/2.png","modified":1,"renderable":0},{"_id":"source/images/Django开发安装MySQL-python解决过程/5.jpeg","path":"images/Django开发安装MySQL-python解决过程/5.jpeg","modified":1,"renderable":0},{"_id":"source/images/Django开发安装MySQL-python解决过程/4.png","path":"images/Django开发安装MySQL-python解决过程/4.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"8a80c47587d03bc6cfbd7396546155fecab98477","modified":1545217149161},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1538103205693},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1538103205693},{"_id":"themes/indigo/README.md","hash":"b188fb95a9c16eb188eeffa6caa0895a14676338","modified":1538103205693},{"_id":"themes/indigo/_config.yml","hash":"5a4c5624172133deff4e53194a0e0325a12fc415","modified":1538103205694},{"_id":"themes/indigo/package.json","hash":"e6caca7d5b83812cf9ffa5d3b35d103406e331f9","modified":1538103205703},{"_id":"source/_posts/.DS_Store","hash":"9102d21c668e741bf57f1af26134c77ca4c80eb8","modified":1545217149160},{"_id":"source/_posts/Hexo博客下gitment评论功能.md","hash":"4bf77a1e4e54fcae660f9f1be188dbdd4aae4baf","modified":1538103205616},{"_id":"source/_posts/React.Children.md","hash":"cf4c6eadbaa9f1446abfe229770c0d7e18046d21","modified":1538103205616},{"_id":"source/_posts/body-parser使用注意.md","hash":"a0a4965b2b8d21c1e1cefbb7fa11e763ba0f54b5","modified":1538103205616},{"_id":"source/_posts/create-react-app配置webpack.md","hash":"92d40a525e09c0f2304d67e6cbd0e0dfa2d791d2","modified":1538103205617},{"_id":"source/_posts/css中的attr.md","hash":"93ff6607f58dff7c523be576ecf78eef1a82df7f","modified":1538103205617},{"_id":"source/_posts/for循环的灵活运用.md","hash":"29a8153fbf4e486f542562f2d5ed0111b5e29ad5","modified":1538103205617},{"_id":"source/_posts/http-proxy-middleware配合gulp使用时的一些坑.md","hash":"b04be721ffd1a50de49c4be2ccbcbdbd58c7aa47","modified":1538103205617},{"_id":"source/_posts/javascript的数据属性和访问器属性.md","hash":"0af6a3e98741be2130f802950224dcf26a768d19","modified":1538103205617},{"_id":"source/_posts/js时间.md","hash":"7be56dd0eabab8ae925ad61017eacb114fab2ae0","modified":1538103205618},{"_id":"source/_posts/mobx基本用法.md","hash":"6d41502452eac05aebba822d63aba3595efe8977","modified":1538103205618},{"_id":"source/_posts/optimization-splitChunks.md","hash":"11dda5021974548b36f22087215d5253bfdfbcf4","modified":1538103205618},{"_id":"source/_posts/position的sticky属性.md","hash":"c215c564f704b7a6402bb4f18242d7a0c162e642","modified":1538103205618},{"_id":"source/_posts/python格式化字符.md","hash":"76deb9d5de3ab7fa53b67934422a867d66240f39","modified":1538103205618},{"_id":"source/_posts/react中的context.md","hash":"3f7f4198df60fbca2e2d1c2a2d0547e88668d1a9","modified":1538103205618},{"_id":"source/_posts/react中跨域请求数据.md","hash":"a1762d3ce0b6aef7c21bde6ba5edf75ef3c26118","modified":1538103205618},{"_id":"source/_posts/react服务端渲染.md","hash":"9f38f10bd8689d8c304e493fae066ed23d39eb47","modified":1538103205619},{"_id":"source/_posts/react生命周期详解.md","hash":"2e0fedd21e5d987e15aa86723bb28c72890ecfb4","modified":1538103205619},{"_id":"source/_posts/select禁止更改值.md","hash":"d8a74477abfbe0b300aa572cded31557d6140bcd","modified":1538103205619},{"_id":"source/_posts/sublime中使用editconfig.md","hash":"920bb4af6363438a414d7d9384a4363a1adf90dc","modified":1538103205619},{"_id":"source/_posts/vue自定义父子组件组件v-model的通信.md","hash":"d00e524c90551fcfd5fbd93436c737b04d95f3b0","modified":1538103205619},{"_id":"source/_posts/webpack4-0中的mode和-babelrc的env-development配置项目.md","hash":"c9fe12d16dd6913e79b93a0799d87a6556701f4d","modified":1538103205620},{"_id":"source/_posts/webpack热更新-HMR.md","hash":"b9f37dd8963a17e6db9945af3825da204db5fd84","modified":1538103205620},{"_id":"source/_posts/webpack配置代码分割.md","hash":"f86ec6db209bd75fe20624fbeb000064c606a0ce","modified":1538103205620},{"_id":"source/_posts/受控组件和非受控组件.md","hash":"510d5a5fc1120c94ffa16ef72d5059ad6069b0bf","modified":1538103205620},{"_id":"source/_posts/斐波那契数列的实现.md","hash":"fb28368aed4e45983dbd6aeb1f89d980ae90dae3","modified":1538103205620},{"_id":"source/_posts/滑动窗口算法解决指定字符串最长子串长度问题.md","hash":"5f7127b9f7bc15ae421a9cf5e97e7598bc66ad57","modified":1538103205621},{"_id":"source/_posts/箭头函数的this指向.md","hash":"ec84fb5f326b72a565a4a4934f976a5ac72bf02b","modified":1538103205621},{"_id":"source/_posts/认识pushstate、popstate-无刷新改变URL.md","hash":"4bdc338fedce98e2e76a53661eeb31519c51f956","modified":1538103205621},{"_id":"source/categories/index.md","hash":"ebfc4d554d003b8988569e3b9cdd8a1ee29e286e","modified":1538103205621},{"_id":"source/_posts/身份认证-jwt.md","hash":"c0d6e298405c8a4689a9f0a48e501659c065eed6","modified":1538103205621},{"_id":"source/tags/index.md","hash":"75efa6050cc06478203976e295b9b49b2fee74b9","modified":1538103205693},{"_id":"source/images/.DS_Store","hash":"ea6ad0f25f3811f346c73f8718939afdf3d37115","modified":1545217154172},{"_id":"source/images/window.getSelection.xlsx","hash":"1298ae5ae7c1a696266e249429db9752db31a83c","modified":1538103205669},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1538103205694},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1538103205694},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1538103205694},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1538103205701},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1538103205701},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1538103205701},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1538103205702},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1538103205702},{"_id":"themes/indigo/layout/page.ejs","hash":"430923b07835e3beae37f0a9e4f8c01e77f22e22","modified":1538103205702},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1538103205702},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1538103205702},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1538103205702},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1538103205703},{"_id":"source/images/body-parser使用注意/1.png","hash":"2f4e5a5264986f1516f416df2c1f23256a43440a","modified":1538103205622},{"_id":"source/images/body-parser使用注意/2.png","hash":"7193e7409d3e2a52b61eaecfb8ece00ce34268d9","modified":1538103205622},{"_id":"source/images/body-parser使用注意/3.png","hash":"4a9adfe8c46187cc360e52951e9dc5a81e1f5518","modified":1538103205622},{"_id":"source/images/body-parser使用注意/4.png","hash":"f365c392e43bb4c6416adad0bb74895735f437c8","modified":1538103205622},{"_id":"source/images/body-parser使用注意/5.png","hash":"875bcc980a0b6599e289207e74df34e145ff32c9","modified":1538103205623},{"_id":"source/images/body-parser使用注意/6.png","hash":"0d5146860261936e9e33613850a4b52cc6e5b27c","modified":1538103205623},{"_id":"source/images/create-react-app配置webpack/1.png","hash":"fe5c58851c5fb48a0944456b64c6b76c4788d58c","modified":1538103205623},{"_id":"source/images/create-react-app配置webpack/2.png","hash":"64a83e4b3b5ff4ed4624ad18dc4b94366c267cea","modified":1538103205623},{"_id":"source/images/create-react-app配置webpack/3.png","hash":"c15913efc392493c18dc4e0e5f91fb755368711a","modified":1538103205623},{"_id":"source/images/create-react-app配置webpack/4.png","hash":"88aadb54b3c5264de8dc14eb7cad8c86563416ea","modified":1538103205624},{"_id":"source/images/for循环的灵活运用/1.png","hash":"4fde2e2ad879975720c620512dbae00b721a97cf","modified":1538103205625},{"_id":"source/images/gitment评论插件的配置/1.png","hash":"67026a3c9c134f26faa0c01964ed992a8a3c4385","modified":1538103205625},{"_id":"source/images/gitment评论插件的配置/2.png","hash":"734e1fee33e2519566f76a0ad933d7d760fa237d","modified":1538103205625},{"_id":"source/images/http-proxy-middleware配合gulp使用时的一些坑/1.png","hash":"baa77b44c9d4e5b8ee84327554b6676387616235","modified":1538103205632},{"_id":"source/images/javascript的数据属性和访问器属性/1.png","hash":"9ee635e97278daaa56262bb07afb62cb7fb943e7","modified":1538103205633},{"_id":"source/images/javascript的数据属性和访问器属性/2.png","hash":"d8a393053bb8dc834471b45e31848494ac2d5c9a","modified":1538103205633},{"_id":"source/images/javascript的数据属性和访问器属性/3.png","hash":"da544e67bbe9ba3bfc04cf507c33a85fd815488e","modified":1538103205633},{"_id":"source/images/javascript的数据属性和访问器属性/4.png","hash":"f7d6ac5b9ab7d8f515a2413d61f48a7574191a49","modified":1538103205634},{"_id":"source/images/javascript的数据属性和访问器属性/5.png","hash":"c7283dc9ca4664fb8e1325d99a847bb43af6d725","modified":1538103205634},{"_id":"source/images/mobx基本用法/1.gif","hash":"da00896a3c41277e3f44b97ded4294756a6f1ce9","modified":1538103205635},{"_id":"source/images/mobx基本用法/2.gif","hash":"c92e08529262bf2ecd113863ab563260eab1d10c","modified":1538103205635},{"_id":"source/images/mobx基本用法/3.png","hash":"9488ca1c626684b801ddc111a034759538e3c7c6","modified":1538103205635},{"_id":"source/images/react中的context/4.png","hash":"fc7d388f121750f2afacc66694e2b5e66efcc174","modified":1538103205642},{"_id":"source/images/react中的context/5.png","hash":"0c1acbe0e92d4fa500406592eeb858ad84d15a5b","modified":1538103205642},{"_id":"source/images/react中跨域请求数据/1.png","hash":"f181f17eb716978c049936dae0a890c5287dec67","modified":1538103205642},{"_id":"source/images/react生命周期详解/1.png","hash":"2f9d91a463e53353a3c8bfa97b2abec259ce38df","modified":1538103205643},{"_id":"source/images/react生命周期详解/2.png","hash":"d1958bd397daee6e6c58338da467dcf25d67537e","modified":1538103205643},{"_id":"source/images/react生命周期详解/3.png","hash":"107352cf58cf99018f6d38a3502522ff28685cce","modified":1538103205643},{"_id":"source/images/react生命周期详解/4.png","hash":"1699c2db1255e65c30edbf6f6ede654f0b9e1365","modified":1538103205643},{"_id":"source/images/react生命周期详解/5.png","hash":"0c3ebf4c6d133ea6c04597a3b0a78e7f295bf27e","modified":1538103205644},{"_id":"source/images/react生命周期详解/6.png","hash":"2711b90ed18bca99ea142d499f6fc5f20476f93e","modified":1538103205644},{"_id":"source/images/react生命周期详解/7.png","hash":"82e86eb87c01f43e03fd56777631a6507f3c03cd","modified":1538103205644},{"_id":"source/images/react生命周期详解/8.png","hash":"d8ba702c6ed05bf66908dfe52bbd5895a495823c","modified":1538103205645},{"_id":"source/images/react生命周期详解/9.png","hash":"2dd88c5d61c101ff87c6d307b043ab82c72bd9cc","modified":1538103205645},{"_id":"source/images/sublime中使用editconfig/1.png","hash":"d043e34547b8df0b77523db148e82670cf98cb54","modified":1538103205645},{"_id":"source/images/sublime中使用editconfig/3.png","hash":"1ba0334ec352fddcb25436a9b58e75e35a9647c9","modified":1538103205646},{"_id":"source/images/sublime中使用editconfig/4.png","hash":"088e66743807548cc7a44be7983920b7e33113dd","modified":1538103205646},{"_id":"source/images/sublime中使用editconfig/5.png","hash":"7d1ce9d517e02a3616d0ac374cefdd102e3b3f4a","modified":1538103205646},{"_id":"source/images/sublime中使用editconfig/6.jpg","hash":"890aa37d4d27006eaae30c64fb3eb4d6e9dd1605","modified":1538103205647},{"_id":"source/images/vue自定义父子组件组件v-model的通信/checkbox.gif","hash":"14c53cb67d5e0e56026d80cf4c57f8e1cccea1b1","modified":1538103205649},{"_id":"source/images/webpack热更新-HMR/1.png","hash":"23f75bc3716f35cfeff01e6e5b32ea8bf9be89f0","modified":1538103205656},{"_id":"source/images/webpack热更新-HMR/2.png","hash":"cec7a746866a5afc24db2e8e58cf8727199e9566","modified":1538103205656},{"_id":"source/images/webpack热更新-HMR/3.png","hash":"14221f85efc24cf342403621bfc4d61139dbcf21","modified":1538103205657},{"_id":"source/images/webpack热更新-HMR/4.png","hash":"5fff6de817839471c9e2d6d87a7c5e66c1d03419","modified":1538103205657},{"_id":"source/images/webpack热更新-HMR/5.png","hash":"49af80a0443334a2e8c501e33e78e0a1eca98570","modified":1538103205657},{"_id":"source/images/webpack热更新-HMR/6.png","hash":"523c0b10900da169e835df065937a1c4fdd7d5d4","modified":1538103205657},{"_id":"source/images/webpack热更新-HMR/7.png","hash":"2bdb3aef6f2b6bbef169217d219d78b145b3eeaa","modified":1538103205658},{"_id":"source/images/webpack配置代码分割/.DS_Store","hash":"995c81ae6850c3dae0ab9aa53289519ef33d8466","modified":1538103205663},{"_id":"source/images/webpack配置代码分割/1.jpeg","hash":"61c2f3acad03883723c6bd1b2b35f69a42272b26","modified":1538103205664},{"_id":"source/images/webpack配置代码分割/2.png","hash":"cda4a9e7bef6a00cb6d010dc0148a325b44740d8","modified":1538103205664},{"_id":"source/images/认识pushstate、popstate-无刷新改变URL/1.png","hash":"02f029de5cf792e9502ec4ba396b7e0a39291711","modified":1538103205670},{"_id":"source/images/认识pushstate、popstate-无刷新改变URL/2.png","hash":"aa330b8e07d8c9ea42a5cdd4eb15c33f686caaf4","modified":1538103205670},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1538103205695},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"00aa1faaa177ec1f90bf114f2488d40605446b3b","modified":1538103205695},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1538103205695},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"b197b87b120b09b68aa3d79954ed039816a88664","modified":1538103205695},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1538103205695},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1538103205696},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1538103205696},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1538103205696},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1538103205696},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1538103205698},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1538103205700},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1538103205701},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1538103205701},{"_id":"themes/indigo/source/css/style.less","hash":"3e151cd162e8af87d7ca90e3067f7bd99a25f823","modified":1538103205723},{"_id":"themes/indigo/source/img/alipay.png","hash":"34b1927738ec6d55224aaf7a6949286300f9a41e","modified":1538103205724},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1538103205725},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1538103205725},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1538103205725},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1538103205725},{"_id":"themes/indigo/source/img/wechat.png","hash":"817de81850ecdcd1081913ca8acc2ebfb8cd77d2","modified":1538103205726},{"_id":"themes/indigo/source/js/main.min.js","hash":"dcec14830cf056fbbab82313ecd5886a03cdf580","modified":1538103205729},{"_id":"themes/indigo/source/js/main.js","hash":"26688338ac55bed772e630099d2ce1ed69ef1431","modified":1538103205729},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1538103205729},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1538103205729},{"_id":"source/images/css中的attr/1.png","hash":"690aaf1cf1d2982e398cc5b9d5ef7fdb8a123f22","modified":1538103205624},{"_id":"source/images/react中的context/1.png","hash":"ca65572072ac93bd31f319637c56aa8575cada0a","modified":1538103205640},{"_id":"source/images/react中的context/2.png","hash":"6b207ad5250df88c17840aa97c58ab4e339c361b","modified":1538103205641},{"_id":"source/images/react中的context/3.png","hash":"8b0fba1ef6bbad9d80a553e2a6817a724e382dd0","modified":1538103205641},{"_id":"source/images/sublime中使用editconfig/2.png","hash":"2a85808a3687da31886dcf3aa3de8c3aa9efcd1f","modified":1538103205646},{"_id":"source/images/vue自定义父子组件组件v-model的通信/CheckboxGroup.gif","hash":"60f06ff0e808ff141a20e83bf5373c3501f6e6fe","modified":1538103205649},{"_id":"source/images/身份认证-jwt/1.jpeg","hash":"4ea02bebd682d72ff36a1b66670dc7fcebcd7f51","modified":1538103205675},{"_id":"source/images/vue自定义父子组件组件v-model的通信/notok.gif","hash":"47e1cc0f50eac642f6e2f51a52edeab9bf313323","modified":1538103205651},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1538103205696},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1538103205696},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1538103205697},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"70c723ccc38953bbf9b6ae7d3b8d3120d4a9771d","modified":1538103205697},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1538103205697},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1538103205697},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1538103205697},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1538103205697},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1538103205698},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"02369b8b9170219a7ff1f905d72c0537642e9289","modified":1538103205698},{"_id":"themes/indigo/layout/_partial/plugins/wangyi-ygt.ejs","hash":"0540808912afbbd8dddbdd15b8d1b54426d8b221","modified":1538103205698},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1538103205698},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"298e3ad59b358620b49dc933d39e5f26388d43be","modified":1538103205698},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"968b27ca952d01b066cfe49fb670faf177d6b67e","modified":1538103205699},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1538103205699},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1538103205699},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1538103205699},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1538103205699},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"801d786ed00ba615a3e3b9f19b238de81225a32e","modified":1538103205699},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1538103205700},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1538103205700},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1538103205700},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1538103205700},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"b6123e895c16ace651f1832281ff655776d4068c","modified":1538103205700},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1538103205700},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1538103205703},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"4ea7ef6dc47a3df8d31bac4bdf83c17d4161f593","modified":1538103205703},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1538103205704},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1538103205704},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1538103205704},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"d648da036a12470009f852902946b6c3521ad49b","modified":1538103205705},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1538103205705},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1538103205705},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1538103205705},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1538103205705},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1538103205705},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1538103205706},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1538103205706},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1538103205706},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1538103205706},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1538103205706},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1538103205706},{"_id":"themes/indigo/source/css/cloudTie/_inputBox.less","hash":"3156898bbbbe0d897f475c03e1e6245e97399613","modified":1538103205707},{"_id":"themes/indigo/source/css/cloudTie/_joinCount.less","hash":"c1e5821189d17419869249cbd556d8da992fbfd3","modified":1538103205707},{"_id":"themes/indigo/source/css/cloudTie/_reset.less","hash":"9228ab9e7d92a3cd8cda340ae67f5b172863c835","modified":1538103205707},{"_id":"themes/indigo/source/css/cloudTie/_share.less","hash":"9c95ca439e85fadbca00778463a9375fbeba9ad2","modified":1538103205707},{"_id":"themes/indigo/source/css/cloudTie/mobile.less","hash":"0d68b7606a1b3c14a18a03ae3c80e4602f13c75b","modified":1538103205707},{"_id":"themes/indigo/source/css/cloudTie/pc.less","hash":"8038abcea49d6f74a6ff155cc565b4a675107ae6","modified":1538103205707},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"18df10c90591340595f48c3aa36b9825a77b2861","modified":1538103205724},{"_id":"themes/indigo/source/js/cloudTie/loader.js","hash":"299d58e74946a2aeb8db74d3e4b6b5adfe694e15","modified":1538103205726},{"_id":"themes/indigo/source/js/cloudTie/loader.min.js","hash":"e73fcd885be2c4585f154861c9969e3c955d03e3","modified":1538103205726},{"_id":"themes/indigo/source/js/cloudTie/mobile.min.js","hash":"859e3efb15db88cedfd18f8523ecfd21f3a22324","modified":1538103205727},{"_id":"source/images/vue自定义父子组件组件v-model的通信/ok.gif","hash":"117951e17fce55728735839236b9ca5d56ee12eb","modified":1538103205654},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1538103205704},{"_id":"themes/indigo/source/js/cloudTie/mobile.js","hash":"67a0a31ee1e491635369b0401d629e97fccd4d94","modified":1538103205727},{"_id":"themes/indigo/source/js/cloudTie/pc.min.js","hash":"aea28510192fb36a36bf174716a39afd1ca20240","modified":1538103205728},{"_id":"source/images/webpack配置代码分割/4.jpeg","hash":"f0acb0c3ee5ab4e564b536edacfd1ec937ffb035","modified":1538103205668},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1538103205712},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1538103205714},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1538103205715},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1538103205715},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1538103205717},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1538103205717},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1538103205718},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1538103205719},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1538103205719},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1538103205719},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1538103205721},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1538103205721},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1538103205721},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1538103205723},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1538103205723},{"_id":"themes/indigo/source/js/cloudTie/pc.js","hash":"25d4ae345f8122f8c7e8e48959d37523dd1e4abb","modified":1538103205728},{"_id":"source/images/webpack4-0中的mode和-babelrc的env-development配置项目/1.gif","hash":"c2813883d41e57dbf36469d34607f6c65aca615f","modified":1538103205656},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538103205711},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538103205712},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1538103205713},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1538103205717},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1538103205719},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1538103205720},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1538103205722},{"_id":"source/images/gitment评论插件的配置/4.png","hash":"2641fbaed13e918317517f02becceefdabed42cf","modified":1538103205631},{"_id":"source/images/webpack配置代码分割/3.jpeg","hash":"48f84a170b6e0871f8efd669f6fdb6e5d81b37ac","modified":1538103205667},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1538103205708},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538103205709},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1538103205711},{"_id":"source/images/身份认证-jwt/show2.gif","hash":"b1b24bb0fa0a31d46f49d88e711d182b48505d53","modified":1538103205689},{"_id":"source/images/认识pushstate、popstate-无刷新改变URL/3.gif","hash":"98a3c0fd88036afc58bd8420bdf21905a2c2f31d","modified":1538103205673},{"_id":"source/images/身份认证-jwt/show3.gif","hash":"f0c9dfbe8b5f1efcde9f2d3096a15178247cd48f","modified":1538103205692},{"_id":"source/images/webpack热更新-HMR/8.gif","hash":"870a27128710496969acf43c4fa5d1b27709d140","modified":1538103205662},{"_id":"source/images/身份认证-jwt/show.gif","hash":"2e0b80e5ebd498cf32fe25dbd8698926dd8e857d","modified":1538103205685},{"_id":"source/images/gitment评论插件的配置/3.png","hash":"598284e0ebfc1541f457158929c1108eb6c6559f","modified":1538103205629},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1538103205710},{"_id":"source/images/position的sticky属性/1.gif","hash":"ae7e306af40a4fbf3ecd0ca138eff4dd0685deb6","modified":1538103205639},{"_id":"public/content.json","hash":"37ed869a1b9dd616019efa25e5b81ade8296389a","modified":1538103714162},{"_id":"public/categories/index.html","hash":"82a416cf42320c165b911a9992dfe6fb5a55e6c6","modified":1538103714847},{"_id":"public/tags/index.html","hash":"546e8b327a0b68d6d86ab20a7a0b5b865213bf12","modified":1538103714904},{"_id":"public/2018/05/21/optimization-splitChunks/index.html","hash":"d32534a87c53683df778872f49495363df683514","modified":1538103714905},{"_id":"public/2017/12/26/react服务端渲染/index.html","hash":"8a6bb05971ccdf9c5b1e114b00eac17a34c24d6d","modified":1538103714905},{"_id":"public/archives/2017/page/2/index.html","hash":"10acc5b39441c920fdb724266ee67cd4d78d6172","modified":1538103714905},{"_id":"public/archives/2017/08/index.html","hash":"f7b430c425602460834a1c62c11110067cabe5c7","modified":1538103714905},{"_id":"public/archives/2017/09/index.html","hash":"64283d13664f17ff42d92f0892225b9ee3319b4f","modified":1538103714905},{"_id":"public/archives/2017/10/index.html","hash":"bcc1e2495d839bc63dd293fdc67319e76d271e3c","modified":1538103714905},{"_id":"public/archives/2017/11/index.html","hash":"c0a73b9578e26fe4cd7d198b7c50017baa9a3f18","modified":1538103714906},{"_id":"public/archives/2017/12/index.html","hash":"23df2e640165afbc7a791f3ade8dd29d6341bce0","modified":1538103714906},{"_id":"public/archives/2018/page/2/index.html","hash":"4f78d922effd4259a10f68177ca47e9519a7932f","modified":1538103714906},{"_id":"public/archives/2018/01/index.html","hash":"05a5ebaffacef3f1cde0594337b844ce67fda22c","modified":1538103714906},{"_id":"public/archives/2018/02/index.html","hash":"3948506a79e0e5525173f88a4339570401b146df","modified":1538103714906},{"_id":"public/archives/2018/03/index.html","hash":"19a09d9b88a2a43776e39489a56010668169483b","modified":1538103714906},{"_id":"public/archives/2018/04/index.html","hash":"ce274fc3ceda3b8a4231eea3b5e7cfbbd24c8a59","modified":1538103714906},{"_id":"public/archives/2018/05/index.html","hash":"9b9549d5f6f0c1f561816abacca34da4a1cd3961","modified":1538103714906},{"_id":"public/archives/2018/08/index.html","hash":"65a291a0f20280da088ceda06fcfb2d3633e4690","modified":1538103714906},{"_id":"public/tags/hexo/index.html","hash":"59471578719b28a821e5742322867b18fe3c7a72","modified":1538103714906},{"_id":"public/tags/npm/index.html","hash":"a4532dda418c8c523323172163d4ee17b680e17d","modified":1538103714906},{"_id":"public/tags/create-react-app/index.html","hash":"d5d7dac6d6f8ab7fe26a0136ae5583a032964e47","modified":1538103714906},{"_id":"public/tags/px2rem/index.html","hash":"ed0ff6572b1fd6c823b937b4dccdcb786679a459","modified":1538103714906},{"_id":"public/tags/less/index.html","hash":"d02f3588ac2eaa7aea80358530665442d43620a9","modified":1538103714906},{"_id":"public/tags/css/index.html","hash":"54dbefc0cc61014110173aa0f38b4ee15f7947ec","modified":1538103714906},{"_id":"public/tags/attr/index.html","hash":"6a36bbedda7767f9f8cbb65aec371f6fcf7a8236","modified":1538103714906},{"_id":"public/tags/javascript/index.html","hash":"7f8e83e038d0490d26b7c4684edea60d54f8cde3","modified":1538103714907},{"_id":"public/tags/gulp/index.html","hash":"7a8070e3ba7bc2cf305405383851014720881ceb","modified":1538103714907},{"_id":"public/tags/ajax/index.html","hash":"1b8c000da966e57b2363bdfe0d4b1782fe0d8ac4","modified":1538103714907},{"_id":"public/tags/跨域/index.html","hash":"413ec39005cbb2c8517a09215c5a49b87158e888","modified":1538103714907},{"_id":"public/tags/代理/index.html","hash":"1b6381776408e1fe697027d87722905e5f1fa4f6","modified":1538103714907},{"_id":"public/tags/mobx/index.html","hash":"40276264c501f6d44737ff4b83a08d4b1882b86e","modified":1538103714907},{"_id":"public/tags/python/index.html","hash":"1f4b3b9d994eab3e08db09254108548f248f396b","modified":1538103714907},{"_id":"public/tags/webpack-proxy/index.html","hash":"be03646db5afacb8961b925a25ef595cb71196f9","modified":1538103714907},{"_id":"public/tags/react跨域请求/index.html","hash":"07e63d2e5deb520ec597b3f3181081d8799b3f05","modified":1538103714907},{"_id":"public/tags/EditorConfig/index.html","hash":"25655642b757d35e5767e01c865d6c07715eee05","modified":1538103714907},{"_id":"public/tags/HMR/index.html","hash":"d7ce0595ab6a65022e2cc62dadb5d361eb39dfc2","modified":1538103714907},{"_id":"public/tags/算法/index.html","hash":"1fc7c96f268668f54105b79ef8da6b33f07f8c3e","modified":1538103714907},{"_id":"public/tags/ES6/index.html","hash":"cf26830b493aa2b4ee10e1c037fbd60496fa6efa","modified":1538103714907},{"_id":"public/tags/HTML5/index.html","hash":"9d56b962f55d9f74682f2ffcac2287235cac678b","modified":1538103714907},{"_id":"public/2018/08/09/python格式化字符/index.html","hash":"00aa5ccd8f100d821d64f9a0373ecd3fe4a8a52a","modified":1538103714907},{"_id":"public/2018/05/21/webpack配置代码分割/index.html","hash":"f78081d5b70950eda91af08ae0ffa3c1856de093","modified":1538103714907},{"_id":"public/2018/04/12/webpack4-0中的mode和-babelrc的env-development配置项目/index.html","hash":"6924f5731365a283f1846fe725608a9f5c810b7b","modified":1538103714907},{"_id":"public/2018/03/27/react生命周期详解/index.html","hash":"51819ff7186faaaf8612bae69e01f1cea9c6530d","modified":1538103714907},{"_id":"public/2018/03/08/body-parser使用注意/index.html","hash":"625ebb8f0032eec65864daa0663b4b76cf94ba86","modified":1538103714908},{"_id":"public/2018/03/06/mobx基本用法/index.html","hash":"a6514eab98e58530fa723e0a0f7f53ab19d6bfa4","modified":1538103714908},{"_id":"public/2018/02/28/javascript的数据属性和访问器属性/index.html","hash":"8cfcb130d38a397855238df81c7b53b2fd931dd5","modified":1538103714908},{"_id":"public/2018/02/07/受控组件和非受控组件/index.html","hash":"63dcc295f906ca1da7e3d332f685892f3b280b32","modified":1538103714908},{"_id":"public/2018/01/19/sublime中使用editconfig/index.html","hash":"e3868b8fa0c5e7775359a8eaad7d283ea5a9c133","modified":1538103714908},{"_id":"public/2018/01/09/http-proxy-middleware配合gulp使用时的一些坑/index.html","hash":"4f35845bd4b944a756cdbc588d63bab34e75c241","modified":1538103714908},{"_id":"public/2018/01/02/webpack热更新-HMR/index.html","hash":"d26964fd8062c62569d1cca00e0673773a7ead04","modified":1538103714908},{"_id":"public/2017/11/30/select禁止更改值/index.html","hash":"d9d36b28ed5fb7c72d61297d9795761f68992adc","modified":1538103714908},{"_id":"public/2017/11/16/滑动窗口算法解决指定字符串最长子串长度问题/index.html","hash":"89d06d97ebabcb472308053e64a083fce9798ad5","modified":1538103714908},{"_id":"public/2017/11/13/for循环的灵活运用/index.html","hash":"90ad5c149ca5f5f2f33851c332386f87fcf4f5b9","modified":1538103714908},{"_id":"public/2017/10/25/斐波那契数列的实现/index.html","hash":"fa5a5722e318651bb7c35eb60aa10c67b203e125","modified":1538103714908},{"_id":"public/2017/10/11/css中的attr/index.html","hash":"2198b2c8edd222efb62aae016c1c559983f6e49a","modified":1538103714908},{"_id":"public/2017/09/28/React.Children/index.html","hash":"1f61f3fdeaf0db5e8476809910c88229ee14a286","modified":1538103714908},{"_id":"public/2017/09/27/react中跨域请求数据/index.html","hash":"6013ede78baf98a6af56ce866ae08bc17a808f49","modified":1538103714908},{"_id":"public/2017/09/22/认识pushstate、popstate-无刷新改变URL/index.html","hash":"b902c75c255061b0f78a1746fd3d02264dbe29b7","modified":1538103714908},{"_id":"public/2017/09/13/position的sticky属性/index.html","hash":"b9c3a06403debb46f8cb5f71b9c98b0105c10f31","modified":1538103714909},{"_id":"public/2017/09/06/create-react-app配置webpack/index.html","hash":"bac3cf6ccd95ebe5bef1bac763ac0b5a606a77ac","modified":1538103714909},{"_id":"public/2017/08/25/箭头函数的this指向/index.html","hash":"8939aab9b7ffde6c39a52e6f1af1b311bc54e994","modified":1538103714909},{"_id":"public/2017/08/21/react中的context/index.html","hash":"fc5397df2fa76796dc626a2b3d599316f6eae7a5","modified":1538103714909},{"_id":"public/2017/08/18/js时间/index.html","hash":"58ffe30bd99915ae9bd41ea426ee83fd5e5f7fff","modified":1538103714909},{"_id":"public/archives/index.html","hash":"bdf9856ace4ad6ef1bfca6c30d81dbd0e519dfe9","modified":1538103714909},{"_id":"public/archives/page/2/index.html","hash":"b5e9fcb01d70da4961dbe1ba5d3d48a8eda6eb85","modified":1538103714909},{"_id":"public/archives/page/3/index.html","hash":"b77d5b93e3b51654e3254b2e287316f9b90f361a","modified":1538103714909},{"_id":"public/archives/2017/index.html","hash":"6856b07dc3752e4735b7de5ba382680c38882148","modified":1538103714909},{"_id":"public/archives/2018/index.html","hash":"fa76649fd7095a8a360683fed7784ad73205dce0","modified":1538103714909},{"_id":"public/index.html","hash":"9fe548e8050c00e49216f3466ab22f1b95c846e9","modified":1538103714909},{"_id":"public/page/2/index.html","hash":"aaf6e37ba040aa7f3268ca513178150d82b7d8b7","modified":1538103714909},{"_id":"public/page/3/index.html","hash":"21037cd8f7453722a3413469328b80f293e8e97e","modified":1538103714909},{"_id":"public/tags/react/index.html","hash":"83d5137e0742c17d728806292548930bb5ae6d24","modified":1538103714909},{"_id":"public/tags/webpack/index.html","hash":"88098a9299457ae2f28e4a47fb9c4127aa06a6a8","modified":1538103714909},{"_id":"public/archives/2018/09/index.html","hash":"60b29fcee1864be84c3fc98b272888559f8f1f60","modified":1538103714929},{"_id":"public/tags/Vue/index.html","hash":"eb66dc4885c42d2770cfa551a30ff03d410ac530","modified":1538103714929},{"_id":"public/2018/09/25/vue自定义父子组件组件v-model的通信/index.html","hash":"caa6324a640131303ed026909f932954f3ead30d","modified":1538103714929},{"_id":"public/2018/09/27/身份认证-jwt/index.html","hash":"0b10936a43269d0b3248e142980aa6ddf080bb75","modified":1538103714929},{"_id":"public/2017/11/13/Hexo博客下gitment评论功能/index.html","hash":"1f98f1728e6bbdd9c580af5fa5e063403d6a3d73","modified":1538103714929},{"_id":"public/images/window.getSelection.xlsx","hash":"1298ae5ae7c1a696266e249429db9752db31a83c","modified":1538103714942},{"_id":"public/images/body-parser使用注意/1.png","hash":"2f4e5a5264986f1516f416df2c1f23256a43440a","modified":1538103714942},{"_id":"public/images/body-parser使用注意/2.png","hash":"7193e7409d3e2a52b61eaecfb8ece00ce34268d9","modified":1538103714942},{"_id":"public/images/body-parser使用注意/3.png","hash":"4a9adfe8c46187cc360e52951e9dc5a81e1f5518","modified":1538103714942},{"_id":"public/images/body-parser使用注意/4.png","hash":"f365c392e43bb4c6416adad0bb74895735f437c8","modified":1538103714942},{"_id":"public/images/body-parser使用注意/5.png","hash":"875bcc980a0b6599e289207e74df34e145ff32c9","modified":1538103714942},{"_id":"public/images/body-parser使用注意/6.png","hash":"0d5146860261936e9e33613850a4b52cc6e5b27c","modified":1538103714943},{"_id":"public/images/create-react-app配置webpack/1.png","hash":"fe5c58851c5fb48a0944456b64c6b76c4788d58c","modified":1538103714943},{"_id":"public/images/create-react-app配置webpack/3.png","hash":"c15913efc392493c18dc4e0e5f91fb755368711a","modified":1538103714943},{"_id":"public/images/create-react-app配置webpack/2.png","hash":"64a83e4b3b5ff4ed4624ad18dc4b94366c267cea","modified":1538103714943},{"_id":"public/images/create-react-app配置webpack/4.png","hash":"88aadb54b3c5264de8dc14eb7cad8c86563416ea","modified":1538103714943},{"_id":"public/images/for循环的灵活运用/1.png","hash":"4fde2e2ad879975720c620512dbae00b721a97cf","modified":1538103714943},{"_id":"public/images/gitment评论插件的配置/1.png","hash":"67026a3c9c134f26faa0c01964ed992a8a3c4385","modified":1538103714943},{"_id":"public/images/gitment评论插件的配置/2.png","hash":"734e1fee33e2519566f76a0ad933d7d760fa237d","modified":1538103714943},{"_id":"public/images/http-proxy-middleware配合gulp使用时的一些坑/1.png","hash":"baa77b44c9d4e5b8ee84327554b6676387616235","modified":1538103714943},{"_id":"public/images/javascript的数据属性和访问器属性/1.png","hash":"9ee635e97278daaa56262bb07afb62cb7fb943e7","modified":1538103714943},{"_id":"public/images/javascript的数据属性和访问器属性/2.png","hash":"d8a393053bb8dc834471b45e31848494ac2d5c9a","modified":1538103714943},{"_id":"public/images/javascript的数据属性和访问器属性/3.png","hash":"da544e67bbe9ba3bfc04cf507c33a85fd815488e","modified":1538103714943},{"_id":"public/images/mobx基本用法/1.gif","hash":"da00896a3c41277e3f44b97ded4294756a6f1ce9","modified":1538103714943},{"_id":"public/images/javascript的数据属性和访问器属性/4.png","hash":"f7d6ac5b9ab7d8f515a2413d61f48a7574191a49","modified":1538103714943},{"_id":"public/images/javascript的数据属性和访问器属性/5.png","hash":"c7283dc9ca4664fb8e1325d99a847bb43af6d725","modified":1538103714944},{"_id":"public/images/mobx基本用法/3.png","hash":"9488ca1c626684b801ddc111a034759538e3c7c6","modified":1538103714944},{"_id":"public/images/mobx基本用法/2.gif","hash":"c92e08529262bf2ecd113863ab563260eab1d10c","modified":1538103714944},{"_id":"public/images/react中的context/4.png","hash":"fc7d388f121750f2afacc66694e2b5e66efcc174","modified":1538103714944},{"_id":"public/images/react中的context/5.png","hash":"0c1acbe0e92d4fa500406592eeb858ad84d15a5b","modified":1538103714944},{"_id":"public/images/react中跨域请求数据/1.png","hash":"f181f17eb716978c049936dae0a890c5287dec67","modified":1538103714944},{"_id":"public/images/react生命周期详解/1.png","hash":"2f9d91a463e53353a3c8bfa97b2abec259ce38df","modified":1538103714944},{"_id":"public/images/react生命周期详解/2.png","hash":"d1958bd397daee6e6c58338da467dcf25d67537e","modified":1538103714944},{"_id":"public/images/react生命周期详解/3.png","hash":"107352cf58cf99018f6d38a3502522ff28685cce","modified":1538103714944},{"_id":"public/images/react生命周期详解/4.png","hash":"1699c2db1255e65c30edbf6f6ede654f0b9e1365","modified":1538103714944},{"_id":"public/images/react生命周期详解/5.png","hash":"0c3ebf4c6d133ea6c04597a3b0a78e7f295bf27e","modified":1538103714944},{"_id":"public/images/react生命周期详解/6.png","hash":"2711b90ed18bca99ea142d499f6fc5f20476f93e","modified":1538103714944},{"_id":"public/images/react生命周期详解/7.png","hash":"82e86eb87c01f43e03fd56777631a6507f3c03cd","modified":1538103714944},{"_id":"public/images/react生命周期详解/8.png","hash":"d8ba702c6ed05bf66908dfe52bbd5895a495823c","modified":1538103714945},{"_id":"public/images/react生命周期详解/9.png","hash":"2dd88c5d61c101ff87c6d307b043ab82c72bd9cc","modified":1538103714945},{"_id":"public/images/sublime中使用editconfig/3.png","hash":"1ba0334ec352fddcb25436a9b58e75e35a9647c9","modified":1538103714945},{"_id":"public/images/sublime中使用editconfig/1.png","hash":"d043e34547b8df0b77523db148e82670cf98cb54","modified":1538103714945},{"_id":"public/images/sublime中使用editconfig/4.png","hash":"088e66743807548cc7a44be7983920b7e33113dd","modified":1538103714945},{"_id":"public/images/sublime中使用editconfig/5.png","hash":"7d1ce9d517e02a3616d0ac374cefdd102e3b3f4a","modified":1538103714945},{"_id":"public/images/sublime中使用editconfig/6.jpg","hash":"890aa37d4d27006eaae30c64fb3eb4d6e9dd1605","modified":1538103714945},{"_id":"public/images/vue自定义父子组件组件v-model的通信/checkbox.gif","hash":"14c53cb67d5e0e56026d80cf4c57f8e1cccea1b1","modified":1538103714945},{"_id":"public/images/webpack热更新-HMR/1.png","hash":"23f75bc3716f35cfeff01e6e5b32ea8bf9be89f0","modified":1538103714945},{"_id":"public/images/webpack热更新-HMR/2.png","hash":"cec7a746866a5afc24db2e8e58cf8727199e9566","modified":1538103714945},{"_id":"public/images/webpack热更新-HMR/3.png","hash":"14221f85efc24cf342403621bfc4d61139dbcf21","modified":1538103714945},{"_id":"public/images/webpack热更新-HMR/4.png","hash":"5fff6de817839471c9e2d6d87a7c5e66c1d03419","modified":1538103714945},{"_id":"public/images/webpack热更新-HMR/5.png","hash":"49af80a0443334a2e8c501e33e78e0a1eca98570","modified":1538103714946},{"_id":"public/images/webpack热更新-HMR/6.png","hash":"523c0b10900da169e835df065937a1c4fdd7d5d4","modified":1538103714946},{"_id":"public/images/webpack热更新-HMR/7.png","hash":"2bdb3aef6f2b6bbef169217d219d78b145b3eeaa","modified":1538103714946},{"_id":"public/images/webpack配置代码分割/1.jpeg","hash":"61c2f3acad03883723c6bd1b2b35f69a42272b26","modified":1538103714946},{"_id":"public/images/webpack配置代码分割/2.png","hash":"cda4a9e7bef6a00cb6d010dc0148a325b44740d8","modified":1538103714946},{"_id":"public/images/认识pushstate、popstate-无刷新改变URL/1.png","hash":"02f029de5cf792e9502ec4ba396b7e0a39291711","modified":1538103714946},{"_id":"public/images/认识pushstate、popstate-无刷新改变URL/2.png","hash":"aa330b8e07d8c9ea42a5cdd4eb15c33f686caaf4","modified":1538103714946},{"_id":"public/img/alipay.png","hash":"34b1927738ec6d55224aaf7a6949286300f9a41e","modified":1538103714946},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1538103714946},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1538103714946},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1538103714946},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1538103714947},{"_id":"public/img/wechat.png","hash":"817de81850ecdcd1081913ca8acc2ebfb8cd77d2","modified":1538103714947},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1538103714947},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1538103714947},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1538103714947},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1538103714947},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1538103714947},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1538103714947},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1538103714947},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1538103714947},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1538103714948},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1538103714948},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1538103714948},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1538103714948},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1538103714948},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1538103714948},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1538103714948},{"_id":"public/images/css中的attr/1.png","hash":"690aaf1cf1d2982e398cc5b9d5ef7fdb8a123f22","modified":1538103715012},{"_id":"public/images/react中的context/1.png","hash":"ca65572072ac93bd31f319637c56aa8575cada0a","modified":1538103715012},{"_id":"public/images/react中的context/2.png","hash":"6b207ad5250df88c17840aa97c58ab4e339c361b","modified":1538103715014},{"_id":"public/images/react中的context/3.png","hash":"8b0fba1ef6bbad9d80a553e2a6817a724e382dd0","modified":1538103715014},{"_id":"public/images/sublime中使用editconfig/2.png","hash":"2a85808a3687da31886dcf3aa3de8c3aa9efcd1f","modified":1538103715014},{"_id":"public/images/vue自定义父子组件组件v-model的通信/CheckboxGroup.gif","hash":"60f06ff0e808ff141a20e83bf5373c3501f6e6fe","modified":1538103715014},{"_id":"public/images/身份认证-jwt/1.jpeg","hash":"4ea02bebd682d72ff36a1b66670dc7fcebcd7f51","modified":1538103715014},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538103715014},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538103715014},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1538103715014},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1538103715015},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1538103715015},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1538103715015},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1538103715015},{"_id":"public/js/main.min.js","hash":"dcec14830cf056fbbab82313ecd5886a03cdf580","modified":1538103715022},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1538103715022},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1538103715022},{"_id":"public/js/cloudTie/loader.js","hash":"299d58e74946a2aeb8db74d3e4b6b5adfe694e15","modified":1538103715022},{"_id":"public/js/cloudTie/loader.min.js","hash":"e73fcd885be2c4585f154861c9969e3c955d03e3","modified":1538103715022},{"_id":"public/js/main.js","hash":"26688338ac55bed772e630099d2ce1ed69ef1431","modified":1538103715022},{"_id":"public/js/cloudTie/mobile.min.js","hash":"859e3efb15db88cedfd18f8523ecfd21f3a22324","modified":1538103715022},{"_id":"public/js/cloudTie/mobile.js","hash":"67a0a31ee1e491635369b0401d629e97fccd4d94","modified":1538103715022},{"_id":"public/js/cloudTie/pc.min.js","hash":"aea28510192fb36a36bf174716a39afd1ca20240","modified":1538103715022},{"_id":"public/js/cloudTie/pc.js","hash":"25d4ae345f8122f8c7e8e48959d37523dd1e4abb","modified":1538103715022},{"_id":"public/images/vue自定义父子组件组件v-model的通信/notok.gif","hash":"47e1cc0f50eac642f6e2f51a52edeab9bf313323","modified":1538103715023},{"_id":"public/img/avatar.jpg","hash":"18df10c90591340595f48c3aa36b9825a77b2861","modified":1538103715023},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1538103715023},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538103715023},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1538103715023},{"_id":"public/css/cloudTie/mobile.css","hash":"1b3dd9263c84bdc017669bbbb128574265bb8143","modified":1538103715039},{"_id":"public/images/vue自定义父子组件组件v-model的通信/ok.gif","hash":"117951e17fce55728735839236b9ca5d56ee12eb","modified":1538103715039},{"_id":"public/images/webpack配置代码分割/4.jpeg","hash":"f0acb0c3ee5ab4e564b536edacfd1ec937ffb035","modified":1538103715072},{"_id":"public/images/webpack4-0中的mode和-babelrc的env-development配置项目/1.gif","hash":"c2813883d41e57dbf36469d34607f6c65aca615f","modified":1538103715077},{"_id":"public/images/gitment评论插件的配置/4.png","hash":"2641fbaed13e918317517f02becceefdabed42cf","modified":1538103715081},{"_id":"public/images/webpack配置代码分割/3.jpeg","hash":"48f84a170b6e0871f8efd669f6fdb6e5d81b37ac","modified":1538103715081},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1538103715081},{"_id":"public/images/身份认证-jwt/show2.gif","hash":"b1b24bb0fa0a31d46f49d88e711d182b48505d53","modified":1538103715085},{"_id":"public/images/认识pushstate、popstate-无刷新改变URL/3.gif","hash":"98a3c0fd88036afc58bd8420bdf21905a2c2f31d","modified":1538103715299},{"_id":"public/images/身份认证-jwt/show3.gif","hash":"f0c9dfbe8b5f1efcde9f2d3096a15178247cd48f","modified":1538103715299},{"_id":"public/css/style.css","hash":"71542140cfe6cf740b91e97fa74ba297bfa71065","modified":1538103715303},{"_id":"public/css/cloudTie/pc.css","hash":"5020489bb2db5335e2a151b950f3bd20d22c2b16","modified":1538103715303},{"_id":"public/images/webpack热更新-HMR/8.gif","hash":"870a27128710496969acf43c4fa5d1b27709d140","modified":1538103715303},{"_id":"public/images/身份认证-jwt/show.gif","hash":"2e0b80e5ebd498cf32fe25dbd8698926dd8e857d","modified":1538103715303},{"_id":"public/images/gitment评论插件的配置/3.png","hash":"598284e0ebfc1541f457158929c1108eb6c6559f","modified":1538103715305},{"_id":"public/images/position的sticky属性/1.gif","hash":"ae7e306af40a4fbf3ecd0ca138eff4dd0685deb6","modified":1538103715307},{"_id":"source/_posts/Django开发安装MySQL-python解决过程.md","hash":"178d6304ffa2f3564d8c430b03637ba0d7cbd1b4","modified":1545216956709},{"_id":"source/images/Django开发安装MySQL-python解决过程/.DS_Store","hash":"80f893b2747ed585c578178866e4e73afdeecefd","modified":1545216956710},{"_id":"source/images/Django开发安装MySQL-python解决过程/3.png","hash":"90614160491b5bbf11694bd0fcaf7c50e11e7c36","modified":1545216956710},{"_id":"source/images/Django开发安装MySQL-python解决过程/1.png","hash":"54959a1fb2543b24fd5dcb4516b7dbdc51f88720","modified":1545216956710},{"_id":"source/images/Django开发安装MySQL-python解决过程/2.png","hash":"9ee098da032fdc240b1d81e52596160b17ed07e1","modified":1545216956710},{"_id":"source/images/Django开发安装MySQL-python解决过程/5.jpeg","hash":"835c9abd49096aff2fac75eeb41ee05fb9c0e27e","modified":1545216956713},{"_id":"source/images/Django开发安装MySQL-python解决过程/4.png","hash":"589f8adc47d61d358eb336aecb5879ce482837a7","modified":1545216956712}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2017-08-13T13:51:41.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-13 21:51:41\n---\n","updated":"2018-09-28T02:53:25.621Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjmlf8kg00001vps6epo5lbg7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-08-14T08:24:32.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-14 16:24:32\ntype: 'tags'\n---\n","updated":"2018-09-28T02:53:25.693Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjmlf8kg20003vps673dodu7t","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"gitment评论插件的配置","date":"2017-11-13T08:11:31.000Z","_content":"今天我在第N次搭建博客的时候想加一个评论功能，我用的主题是indigo，在根目录_config.yml文件里经过测试发现最简洁好用的就是gitment，所以这里记录我gitment配置过程：\n## 第一步\n先注册一个 [oAuth Application](https://github.com/settings/applications/new)    \n注册成功会得到一个`client id`和 `client secret`两个参数，它们将被用于后面的用户登录\n![oAuth Application](/images/gitment评论插件的配置/1.png)\n![_config.yml](/images/gitment评论插件的配置/2.png)\n其中githubID需要https://api.github.com/users/github账户名  访问这个链接来获取\n\n## 第二步\n如果你想要此功能的页面存在这一部分：\n![gitment页面配置](/images/gitment评论插件的配置/3.png)\n这是一个ejs页面，里面是模板，通过使用主题的_config.yml文件配置\n那么你可以跳过这一步，否则需要在使用评论功能的页面添加这写代码：\n``` javascript\n<link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\">\n<script src=\"https://imsun.github.io/gitment/dist/gitment.browser.js\"></script>\n<script>\nvar gitment = new Gitment({\n\tid: '页面 ID', // 可选。默认为 location.href\n\towner: '你的 GitHub ID', // 可以是你的GitHub用户名，也可以是github id\n\trepo: '存储评论的 github repo',\n\toauth: {\n\t\tclient_id: '你的 client id',\n\t\tclient_secret: '你的 client secret',\n\t},\n})\ngitment.render('container')\n</script>\n```\n## 第三步\n到这里已经默认你添加了上面的代码，现在注意了，我用的主题本身就带上面的代码的，只不过需要在 主题的 _comfig.yml文件中配置对应项，我在配置文件中配置好后，启动本地服务器，发现回复模块报错，控制台中发现他会请求一个链接，链接上带有刚刚配置好的参数，这里参数全部为空，我以为我配置文件有问题，折腾了好久，仍然不行，后来发现我要添加这个功能的页面里的模板并没有获取到我在_config.yml配置，最后通过修改要添加回复功能页面的模板文件才成功：\n![修改为](/images/gitment评论插件的配置/4.png)\n直接赋值，而不是使用模板，不知道为啥用模板获取不到值，现在已经配置成功\n如果配置失败，那么一定是上面的参数写错了，或者像我这种情况模板页面获取不到值，只需要直接赋值即可","source":"_posts/Hexo博客下gitment评论功能.md","raw":"---\ntitle: gitment评论插件的配置\ndate: 2017-11-13 16:11:31\ntag: 'hexo'\n---\n今天我在第N次搭建博客的时候想加一个评论功能，我用的主题是indigo，在根目录_config.yml文件里经过测试发现最简洁好用的就是gitment，所以这里记录我gitment配置过程：\n## 第一步\n先注册一个 [oAuth Application](https://github.com/settings/applications/new)    \n注册成功会得到一个`client id`和 `client secret`两个参数，它们将被用于后面的用户登录\n![oAuth Application](/images/gitment评论插件的配置/1.png)\n![_config.yml](/images/gitment评论插件的配置/2.png)\n其中githubID需要https://api.github.com/users/github账户名  访问这个链接来获取\n\n## 第二步\n如果你想要此功能的页面存在这一部分：\n![gitment页面配置](/images/gitment评论插件的配置/3.png)\n这是一个ejs页面，里面是模板，通过使用主题的_config.yml文件配置\n那么你可以跳过这一步，否则需要在使用评论功能的页面添加这写代码：\n``` javascript\n<link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\">\n<script src=\"https://imsun.github.io/gitment/dist/gitment.browser.js\"></script>\n<script>\nvar gitment = new Gitment({\n\tid: '页面 ID', // 可选。默认为 location.href\n\towner: '你的 GitHub ID', // 可以是你的GitHub用户名，也可以是github id\n\trepo: '存储评论的 github repo',\n\toauth: {\n\t\tclient_id: '你的 client id',\n\t\tclient_secret: '你的 client secret',\n\t},\n})\ngitment.render('container')\n</script>\n```\n## 第三步\n到这里已经默认你添加了上面的代码，现在注意了，我用的主题本身就带上面的代码的，只不过需要在 主题的 _comfig.yml文件中配置对应项，我在配置文件中配置好后，启动本地服务器，发现回复模块报错，控制台中发现他会请求一个链接，链接上带有刚刚配置好的参数，这里参数全部为空，我以为我配置文件有问题，折腾了好久，仍然不行，后来发现我要添加这个功能的页面里的模板并没有获取到我在_config.yml配置，最后通过修改要添加回复功能页面的模板文件才成功：\n![修改为](/images/gitment评论插件的配置/4.png)\n直接赋值，而不是使用模板，不知道为啥用模板获取不到值，现在已经配置成功\n如果配置失败，那么一定是上面的参数写错了，或者像我这种情况模板页面获取不到值，只需要直接赋值即可","slug":"Hexo博客下gitment评论功能","published":1,"updated":"2018-09-28T02:53:25.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kfw0000vps62eyu1cm7","content":"<p>今天我在第N次搭建博客的时候想加一个评论功能，我用的主题是indigo，在根目录_config.yml文件里经过测试发现最简洁好用的就是gitment，所以这里记录我gitment配置过程：</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>先注册一个 <a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">oAuth Application</a><br>注册成功会得到一个<code>client id</code>和 <code>client secret</code>两个参数，它们将被用于后面的用户登录<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/gitment评论插件的配置/1.png\" alt=\"oAuth Application\" title=\"\">\n                </div>\n                <div class=\"image-caption\">oAuth Application</div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/gitment评论插件的配置/2.png\" alt=\"_config.yml\" title=\"\">\n                </div>\n                <div class=\"image-caption\">_config.yml</div>\n            </figure><br>其中githubID需要<a href=\"https://api.github.com/users/github账户名\" target=\"_blank\" rel=\"noopener\">https://api.github.com/users/github账户名</a>  访问这个链接来获取</p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>如果你想要此功能的页面存在这一部分：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/gitment评论插件的配置/3.png\" alt=\"gitment页面配置\" title=\"\">\n                </div>\n                <div class=\"image-caption\">gitment页面配置</div>\n            </figure><br>这是一个ejs页面，里面是模板，通过使用主题的_config.yml文件配置<br>那么你可以跳过这一步，否则需要在使用评论功能的页面添加这写代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://imsun.github.io/gitment/style/default.css\"</span>&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://imsun.github.io/gitment/dist/gitment.browser.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gitment = <span class=\"keyword\">new</span> Gitment(&#123;</span><br><span class=\"line\">\tid: <span class=\"string\">'页面 ID'</span>, <span class=\"comment\">// 可选。默认为 location.href</span></span><br><span class=\"line\">\towner: <span class=\"string\">'你的 GitHub ID'</span>, <span class=\"comment\">// 可以是你的GitHub用户名，也可以是github id</span></span><br><span class=\"line\">\trepo: <span class=\"string\">'存储评论的 github repo'</span>,</span><br><span class=\"line\">\toauth: &#123;</span><br><span class=\"line\">\t\tclient_id: <span class=\"string\">'你的 client id'</span>,</span><br><span class=\"line\">\t\tclient_secret: <span class=\"string\">'你的 client secret'</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gitment.render(<span class=\"string\">'container'</span>)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>到这里已经默认你添加了上面的代码，现在注意了，我用的主题本身就带上面的代码的，只不过需要在 主题的 _comfig.yml文件中配置对应项，我在配置文件中配置好后，启动本地服务器，发现回复模块报错，控制台中发现他会请求一个链接，链接上带有刚刚配置好的参数，这里参数全部为空，我以为我配置文件有问题，折腾了好久，仍然不行，后来发现我要添加这个功能的页面里的模板并没有获取到我在_config.yml配置，最后通过修改要添加回复功能页面的模板文件才成功：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/gitment评论插件的配置/4.png\" alt=\"修改为\" title=\"\">\n                </div>\n                <div class=\"image-caption\">修改为</div>\n            </figure><br>直接赋值，而不是使用模板，不知道为啥用模板获取不到值，现在已经配置成功<br>如果配置失败，那么一定是上面的参数写错了，或者像我这种情况模板页面获取不到值，只需要直接赋值即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天我在第N次搭建博客的时候想加一个评论功能，我用的主题是indigo，在根目录_config.yml文件里经过测试发现最简洁好用的就是gitment，所以这里记录我gitment配置过程：</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>先注册一个 <a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">oAuth Application</a><br>注册成功会得到一个<code>client id</code>和 <code>client secret</code>两个参数，它们将被用于后面的用户登录<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/gitment评论插件的配置/1.png\" alt=\"oAuth Application\" title=\"\">\n                </div>\n                <div class=\"image-caption\">oAuth Application</div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/gitment评论插件的配置/2.png\" alt=\"_config.yml\" title=\"\">\n                </div>\n                <div class=\"image-caption\">_config.yml</div>\n            </figure><br>其中githubID需要<a href=\"https://api.github.com/users/github账户名\" target=\"_blank\" rel=\"noopener\">https://api.github.com/users/github账户名</a>  访问这个链接来获取</p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>如果你想要此功能的页面存在这一部分：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/gitment评论插件的配置/3.png\" alt=\"gitment页面配置\" title=\"\">\n                </div>\n                <div class=\"image-caption\">gitment页面配置</div>\n            </figure><br>这是一个ejs页面，里面是模板，通过使用主题的_config.yml文件配置<br>那么你可以跳过这一步，否则需要在使用评论功能的页面添加这写代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://imsun.github.io/gitment/style/default.css\"</span>&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://imsun.github.io/gitment/dist/gitment.browser.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> gitment = <span class=\"keyword\">new</span> Gitment(&#123;</span><br><span class=\"line\">\tid: <span class=\"string\">'页面 ID'</span>, <span class=\"comment\">// 可选。默认为 location.href</span></span><br><span class=\"line\">\towner: <span class=\"string\">'你的 GitHub ID'</span>, <span class=\"comment\">// 可以是你的GitHub用户名，也可以是github id</span></span><br><span class=\"line\">\trepo: <span class=\"string\">'存储评论的 github repo'</span>,</span><br><span class=\"line\">\toauth: &#123;</span><br><span class=\"line\">\t\tclient_id: <span class=\"string\">'你的 client id'</span>,</span><br><span class=\"line\">\t\tclient_secret: <span class=\"string\">'你的 client secret'</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gitment.render(<span class=\"string\">'container'</span>)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>到这里已经默认你添加了上面的代码，现在注意了，我用的主题本身就带上面的代码的，只不过需要在 主题的 _comfig.yml文件中配置对应项，我在配置文件中配置好后，启动本地服务器，发现回复模块报错，控制台中发现他会请求一个链接，链接上带有刚刚配置好的参数，这里参数全部为空，我以为我配置文件有问题，折腾了好久，仍然不行，后来发现我要添加这个功能的页面里的模板并没有获取到我在_config.yml配置，最后通过修改要添加回复功能页面的模板文件才成功：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/gitment评论插件的配置/4.png\" alt=\"修改为\" title=\"\">\n                </div>\n                <div class=\"image-caption\">修改为</div>\n            </figure><br>直接赋值，而不是使用模板，不知道为啥用模板获取不到值，现在已经配置成功<br>如果配置失败，那么一定是上面的参数写错了，或者像我这种情况模板页面获取不到值，只需要直接赋值即可</p>\n"},{"title":"react中的this.props.children","date":"2017-09-28T09:34:55.000Z","_content":"## 一、介绍    \n`React.Children` 是顶层API之一，为处理 `this.props.children` 提供了几个方法    \n`this.props.children` 表示组件所有子节点    \n    \n## 二、所有方法    \n### 1.React.Children.map    \n``` javascript\n//必须有返回值\nReact.Children.map(this.props.children,function(child){\n\treturn <li>{child}</li>\n})\n//没有返回值\nReact.Children.map(this.props.children,function(child){\n\t/*这里进行处理*/\n})\n```\n这里的 `child` 表示组件的每一个子元素，也可以用箭头函数来写，这样方便this的传递    \n\n### 2.this.props.children\n这个是获取当前组件的所有子节点\n`注意` ：\n1.如果没有子节点，返回 `undefined`\n2.如果一个子节点，返回 `object`\n3.如果多个子节点，返回 `array`\n但是用 `React.Children.map` 来遍历的话不会有问题\n\n### 3.React.Children.count\n返回组件的所有子元素个数\n\n### 4.React.Children.only\n``` javascript\nconsole.log(React.Children.only(this.props.children[0])); \n//输出对象this.props.children[0]\n```\n单独 `this.props.children[0]` 输出不出来\n\n### 5.child.key\n在用 `React.Children.map` 的时候可能想获取传过来的属性值，例如\n``` javascript\n<Tabs_li data={data}>\n\t\t<div key={0}>1</div>\n\t\t<div key={1}>2</div>\n\t\t<div key={2}>3</div>\n</Tabs_li>\n\n/*Tabs组件*/\n{React.Children.map(this.props.children,(child)=>{\n\tconsole.log(child.key) \n\t// 分别打印 0 ， 1 ，2\n\treturn ...\n})}\n```\n","source":"_posts/React.Children.md","raw":"---\ntitle: react中的this.props.children\ndate: 2017-09-28 17:34:55\ntags: react\n---\n## 一、介绍    \n`React.Children` 是顶层API之一，为处理 `this.props.children` 提供了几个方法    \n`this.props.children` 表示组件所有子节点    \n    \n## 二、所有方法    \n### 1.React.Children.map    \n``` javascript\n//必须有返回值\nReact.Children.map(this.props.children,function(child){\n\treturn <li>{child}</li>\n})\n//没有返回值\nReact.Children.map(this.props.children,function(child){\n\t/*这里进行处理*/\n})\n```\n这里的 `child` 表示组件的每一个子元素，也可以用箭头函数来写，这样方便this的传递    \n\n### 2.this.props.children\n这个是获取当前组件的所有子节点\n`注意` ：\n1.如果没有子节点，返回 `undefined`\n2.如果一个子节点，返回 `object`\n3.如果多个子节点，返回 `array`\n但是用 `React.Children.map` 来遍历的话不会有问题\n\n### 3.React.Children.count\n返回组件的所有子元素个数\n\n### 4.React.Children.only\n``` javascript\nconsole.log(React.Children.only(this.props.children[0])); \n//输出对象this.props.children[0]\n```\n单独 `this.props.children[0]` 输出不出来\n\n### 5.child.key\n在用 `React.Children.map` 的时候可能想获取传过来的属性值，例如\n``` javascript\n<Tabs_li data={data}>\n\t\t<div key={0}>1</div>\n\t\t<div key={1}>2</div>\n\t\t<div key={2}>3</div>\n</Tabs_li>\n\n/*Tabs组件*/\n{React.Children.map(this.props.children,(child)=>{\n\tconsole.log(child.key) \n\t// 分别打印 0 ， 1 ，2\n\treturn ...\n})}\n```\n","slug":"React.Children","published":1,"updated":"2018-09-28T02:53:25.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kg10002vps61nptjrzc","content":"<h2 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h2><p><code>React.Children</code> 是顶层API之一，为处理 <code>this.props.children</code> 提供了几个方法<br><code>this.props.children</code> 表示组件所有子节点    </p>\n<h2 id=\"二、所有方法\"><a href=\"#二、所有方法\" class=\"headerlink\" title=\"二、所有方法\"></a>二、所有方法</h2><h3 id=\"1-React-Children-map\"><a href=\"#1-React-Children-map\" class=\"headerlink\" title=\"1.React.Children.map\"></a>1.React.Children.map</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//必须有返回值</span></span><br><span class=\"line\">React.Children.map(<span class=\"keyword\">this</span>.props.children,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &lt;li&gt;&#123;child&#125;&lt;/li&gt;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//没有返回值</span></span><br><span class=\"line\">React.Children.map(<span class=\"keyword\">this</span>.props.children,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*这里进行处理*/</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这里的 <code>child</code> 表示组件的每一个子元素，也可以用箭头函数来写，这样方便this的传递    </p>\n<h3 id=\"2-this-props-children\"><a href=\"#2-this-props-children\" class=\"headerlink\" title=\"2.this.props.children\"></a>2.this.props.children</h3><p>这个是获取当前组件的所有子节点<br><code>注意</code> ：<br>1.如果没有子节点，返回 <code>undefined</code><br>2.如果一个子节点，返回 <code>object</code><br>3.如果多个子节点，返回 <code>array</code><br>但是用 <code>React.Children.map</code> 来遍历的话不会有问题</p>\n<h3 id=\"3-React-Children-count\"><a href=\"#3-React-Children-count\" class=\"headerlink\" title=\"3.React.Children.count\"></a>3.React.Children.count</h3><p>返回组件的所有子元素个数</p>\n<h3 id=\"4-React-Children-only\"><a href=\"#4-React-Children-only\" class=\"headerlink\" title=\"4.React.Children.only\"></a>4.React.Children.only</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(React.Children.only(<span class=\"keyword\">this</span>.props.children[<span class=\"number\">0</span>])); </span><br><span class=\"line\"><span class=\"comment\">//输出对象this.props.children[0]</span></span><br></pre></td></tr></table></figure>\n<p>单独 <code>this.props.children[0]</code> 输出不出来</p>\n<h3 id=\"5-child-key\"><a href=\"#5-child-key\" class=\"headerlink\" title=\"5.child.key\"></a>5.child.key</h3><p>在用 <code>React.Children.map</code> 的时候可能想获取传过来的属性值，例如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Tabs_li data=&#123;data&#125;&gt;</span><br><span class=\"line\">\t\t&lt;div key=&#123;<span class=\"number\">0</span>&#125;&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;div key=&#123;1&#125;&gt;2&lt;/</span>div&gt;</span><br><span class=\"line\">\t\t&lt;div key=&#123;<span class=\"number\">2</span>&#125;&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Tabs_li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Tabs组件*/</span></span><br><span class=\"line\">&#123;React.Children.map(<span class=\"keyword\">this</span>.props.children,(child)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(child.key) </span><br><span class=\"line\">\t<span class=\"comment\">// 分别打印 0 ， 1 ，2</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ...</span><br><span class=\"line\">&#125;)&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h2><p><code>React.Children</code> 是顶层API之一，为处理 <code>this.props.children</code> 提供了几个方法<br><code>this.props.children</code> 表示组件所有子节点    </p>\n<h2 id=\"二、所有方法\"><a href=\"#二、所有方法\" class=\"headerlink\" title=\"二、所有方法\"></a>二、所有方法</h2><h3 id=\"1-React-Children-map\"><a href=\"#1-React-Children-map\" class=\"headerlink\" title=\"1.React.Children.map\"></a>1.React.Children.map</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//必须有返回值</span></span><br><span class=\"line\">React.Children.map(<span class=\"keyword\">this</span>.props.children,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &lt;li&gt;&#123;child&#125;&lt;/li&gt;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//没有返回值</span></span><br><span class=\"line\">React.Children.map(<span class=\"keyword\">this</span>.props.children,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*这里进行处理*/</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这里的 <code>child</code> 表示组件的每一个子元素，也可以用箭头函数来写，这样方便this的传递    </p>\n<h3 id=\"2-this-props-children\"><a href=\"#2-this-props-children\" class=\"headerlink\" title=\"2.this.props.children\"></a>2.this.props.children</h3><p>这个是获取当前组件的所有子节点<br><code>注意</code> ：<br>1.如果没有子节点，返回 <code>undefined</code><br>2.如果一个子节点，返回 <code>object</code><br>3.如果多个子节点，返回 <code>array</code><br>但是用 <code>React.Children.map</code> 来遍历的话不会有问题</p>\n<h3 id=\"3-React-Children-count\"><a href=\"#3-React-Children-count\" class=\"headerlink\" title=\"3.React.Children.count\"></a>3.React.Children.count</h3><p>返回组件的所有子元素个数</p>\n<h3 id=\"4-React-Children-only\"><a href=\"#4-React-Children-only\" class=\"headerlink\" title=\"4.React.Children.only\"></a>4.React.Children.only</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(React.Children.only(<span class=\"keyword\">this</span>.props.children[<span class=\"number\">0</span>])); </span><br><span class=\"line\"><span class=\"comment\">//输出对象this.props.children[0]</span></span><br></pre></td></tr></table></figure>\n<p>单独 <code>this.props.children[0]</code> 输出不出来</p>\n<h3 id=\"5-child-key\"><a href=\"#5-child-key\" class=\"headerlink\" title=\"5.child.key\"></a>5.child.key</h3><p>在用 <code>React.Children.map</code> 的时候可能想获取传过来的属性值，例如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Tabs_li data=&#123;data&#125;&gt;</span><br><span class=\"line\">\t\t&lt;div key=&#123;<span class=\"number\">0</span>&#125;&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;div key=&#123;1&#125;&gt;2&lt;/</span>div&gt;</span><br><span class=\"line\">\t\t&lt;div key=&#123;<span class=\"number\">2</span>&#125;&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Tabs_li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Tabs组件*/</span></span><br><span class=\"line\">&#123;React.Children.map(<span class=\"keyword\">this</span>.props.children,(child)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(child.key) </span><br><span class=\"line\">\t<span class=\"comment\">// 分别打印 0 ， 1 ，2</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ...</span><br><span class=\"line\">&#125;)&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"body-parser使用注意","date":"2018-03-08T07:53:13.000Z","_content":"## 一、前言\n这几天在学习服务端渲染的时候用到了这个包 **body-parser** ,很方便的一个包，这个模块提供了四种解析器\n1. JSON body parser\n2. Raw body parser\n3. Text body parser\n4. URL-encoded form body parser\n\n每一项详细的配置都能在网上找到，这篇记下的是我在使用中遇到的问题 `bodyParser.json(option)和bodyParser.urlencoded(option)的不同`，在网上搜这个问题，得到的答案还是让我一头雾水，终于试了几次并结合资料弄清楚两者的使用场景\n\n## 二、区别\n看官方的解释：\nbodyParser.json(options)：中间件只会解析 json ，允许请求任意Unicode编码,支持 gzip 和 deflate 编码。\n\nbodyParser.urlencoded(option)：中间件只解析urlencoded 请求体，并返回，只支持UTF-8编号文本，支持gzip deflate 压缩。(tip:一般这一项是接收表单提交form)\n\n## 三、例子\n看到这里我明白了一个接受form请求，一个接受json请求，好，我写了下面的例子：\n``` javascript\n//server端关键代码\nvar jsonParser  =bodyParser.json();\napp.post('/login',jsonParser,function(req,res){\n\tconsole.log(req.body)\n\tres.send(req.body)\n})\n\n//客户端请求\n<form method=\"post\" action=\"/login\">\n\t<div class=\"form-group\">\n\t\t<label for=\"inputTitle\" class=\"col-sm-3 control-label\">电影名称</label>\n\t\t<input id=\"inputTitle\" type=\"text\" name=\"title\" value=\"\" class=\"form-control\" />\n\t</div>\n\t<div class=\"form-group\">\n\t\t<label for=\"inputLanguage\" class=\"col-sm-3 control-label\">海报</label>\n\t\t<input id=\"inputLanguage\" type=\"text\" name=\"poster\" value=\"\" class=\"form-control\" />\n\t</div>\n<button type=\"submit\" class=\"btn btn-default\">确定</button>\n</form>\n\nsetTimeout(function(){\n\t$.ajax({\n\t\ttype:'post', \n\t\turl:'login',\n\t\tdata:{\n\t\t\turl:'login',\n\t\t\tname:'123',\n\t\t\tpassword:123456\n\t\t},\n\t\tsuccess:function(data){\n\t\t\tconsole.log(data)\n\t\t}\n\t})\n},1000)\n```\n\n客户端有一个用于测试的表单和一个1s后发送post请求的ajax\n\n先看一下表单请求的结果：\n\n![表单请求](/images/body-parser使用注意/1.png)\n\n![表单方式请求后服务端返回结果](/images/body-parser使用注意/2.png)\n![ajax方式请求后服务端返回结果](/images/body-parser使用注意/2.png)\n\n可以看到bodyParser.json()并没有解析到ajax和form表单请求，现在来换bodyParser.urlencoded(option)的解析方式\n``` javascript\nvar urlencodedParser = bodyParser.urlencoded({ extended: false });\napp.post('/login',urlencodedParser,function(req,res){\n\tconsole.log(req.body)\n\tres.send(req.body)\n})\n```\n\n![表单方式请求后服务端返回结果](/images/body-parser使用注意/3.png)\n![ajax方式请求后服务端返回结果](/images/body-parser使用注意/4.png)\n\n可以看到这种解析方式成功将请求解析到了body里。\n到了这里，我又有疑问了，知道了bodyParser.urlencoded期望的数据形式，那bodyParser.json适用于什么情况呢？\n\n看下面例子，既然api说bodyParser.json适用于json的数据类型，所以我将ajax的content-Type设置为json\n\n``` javascript\nsetTimeout(function(){\n\t$.ajax({\n\t\ttype:'post', \n\t\turl:'login',\n\t\tcontentType:'application/json',\n\t\tdata:{\n\t\t\turl:'login',\n\t\t\tname:'123',\n\t\t\tpassword:123456\n\t\t},\n\t\tsuccess:function(data){\n\t\t\tconsole.log(data)\n\t\t}\n\t})\n},1000)\n```\n请求结果：\n![返回结果](/images/body-parser使用注意/5.png)\n\n请求失败，那么疑问来了，我设置了json格式的请求，为什么bodyParser.json解析不了\n\n**关键**：\n> jq的ajax\n1. 默认的ContentType的值为:application/x-www-form-urlencoded; charset=UTF-8 \n此格式为表单提交格式，数据为 `key1=value1&key2=value2`的格式 \n2. 虽然ajax的data属性值格式为:{key1:value1,key2:value2},但最后会转为key1=value1&key2=value2的格式提交到后台 \n> 3. 如果想传json格式数据，content-type设置好后，ajax必须将date属性值转为json字符串，不能为json对象（js对象，会自动转为key=value形式）,这样传输的时候才是json格式\n\n我们来试一下：\n``` javascript\nsetTimeout(function(){\n\t$.ajax({\n\t\ttype:'post', \n\t\turl:'login',\n\t\tcontentType:'application/json',\n\t\tdata:JSON.stringify({\n\t\t\turl:'login',\n\t\t\tname:'123',\n\t\t\tpassword:123456\n\t\t}),\n\t\tsuccess:function(data){\n\t\t\tconsole.log(data)\n\t\t}\n\t})\n},1000)\n```\n![返回结果](/images/body-parser使用注意/6.png)\n\n现在就可以请求成功啦\n","source":"_posts/body-parser使用注意.md","raw":"---\ntitle: body-parser使用注意\ndate: 2018-03-08 15:53:13\ntags: npm\n---\n## 一、前言\n这几天在学习服务端渲染的时候用到了这个包 **body-parser** ,很方便的一个包，这个模块提供了四种解析器\n1. JSON body parser\n2. Raw body parser\n3. Text body parser\n4. URL-encoded form body parser\n\n每一项详细的配置都能在网上找到，这篇记下的是我在使用中遇到的问题 `bodyParser.json(option)和bodyParser.urlencoded(option)的不同`，在网上搜这个问题，得到的答案还是让我一头雾水，终于试了几次并结合资料弄清楚两者的使用场景\n\n## 二、区别\n看官方的解释：\nbodyParser.json(options)：中间件只会解析 json ，允许请求任意Unicode编码,支持 gzip 和 deflate 编码。\n\nbodyParser.urlencoded(option)：中间件只解析urlencoded 请求体，并返回，只支持UTF-8编号文本，支持gzip deflate 压缩。(tip:一般这一项是接收表单提交form)\n\n## 三、例子\n看到这里我明白了一个接受form请求，一个接受json请求，好，我写了下面的例子：\n``` javascript\n//server端关键代码\nvar jsonParser  =bodyParser.json();\napp.post('/login',jsonParser,function(req,res){\n\tconsole.log(req.body)\n\tres.send(req.body)\n})\n\n//客户端请求\n<form method=\"post\" action=\"/login\">\n\t<div class=\"form-group\">\n\t\t<label for=\"inputTitle\" class=\"col-sm-3 control-label\">电影名称</label>\n\t\t<input id=\"inputTitle\" type=\"text\" name=\"title\" value=\"\" class=\"form-control\" />\n\t</div>\n\t<div class=\"form-group\">\n\t\t<label for=\"inputLanguage\" class=\"col-sm-3 control-label\">海报</label>\n\t\t<input id=\"inputLanguage\" type=\"text\" name=\"poster\" value=\"\" class=\"form-control\" />\n\t</div>\n<button type=\"submit\" class=\"btn btn-default\">确定</button>\n</form>\n\nsetTimeout(function(){\n\t$.ajax({\n\t\ttype:'post', \n\t\turl:'login',\n\t\tdata:{\n\t\t\turl:'login',\n\t\t\tname:'123',\n\t\t\tpassword:123456\n\t\t},\n\t\tsuccess:function(data){\n\t\t\tconsole.log(data)\n\t\t}\n\t})\n},1000)\n```\n\n客户端有一个用于测试的表单和一个1s后发送post请求的ajax\n\n先看一下表单请求的结果：\n\n![表单请求](/images/body-parser使用注意/1.png)\n\n![表单方式请求后服务端返回结果](/images/body-parser使用注意/2.png)\n![ajax方式请求后服务端返回结果](/images/body-parser使用注意/2.png)\n\n可以看到bodyParser.json()并没有解析到ajax和form表单请求，现在来换bodyParser.urlencoded(option)的解析方式\n``` javascript\nvar urlencodedParser = bodyParser.urlencoded({ extended: false });\napp.post('/login',urlencodedParser,function(req,res){\n\tconsole.log(req.body)\n\tres.send(req.body)\n})\n```\n\n![表单方式请求后服务端返回结果](/images/body-parser使用注意/3.png)\n![ajax方式请求后服务端返回结果](/images/body-parser使用注意/4.png)\n\n可以看到这种解析方式成功将请求解析到了body里。\n到了这里，我又有疑问了，知道了bodyParser.urlencoded期望的数据形式，那bodyParser.json适用于什么情况呢？\n\n看下面例子，既然api说bodyParser.json适用于json的数据类型，所以我将ajax的content-Type设置为json\n\n``` javascript\nsetTimeout(function(){\n\t$.ajax({\n\t\ttype:'post', \n\t\turl:'login',\n\t\tcontentType:'application/json',\n\t\tdata:{\n\t\t\turl:'login',\n\t\t\tname:'123',\n\t\t\tpassword:123456\n\t\t},\n\t\tsuccess:function(data){\n\t\t\tconsole.log(data)\n\t\t}\n\t})\n},1000)\n```\n请求结果：\n![返回结果](/images/body-parser使用注意/5.png)\n\n请求失败，那么疑问来了，我设置了json格式的请求，为什么bodyParser.json解析不了\n\n**关键**：\n> jq的ajax\n1. 默认的ContentType的值为:application/x-www-form-urlencoded; charset=UTF-8 \n此格式为表单提交格式，数据为 `key1=value1&key2=value2`的格式 \n2. 虽然ajax的data属性值格式为:{key1:value1,key2:value2},但最后会转为key1=value1&key2=value2的格式提交到后台 \n> 3. 如果想传json格式数据，content-type设置好后，ajax必须将date属性值转为json字符串，不能为json对象（js对象，会自动转为key=value形式）,这样传输的时候才是json格式\n\n我们来试一下：\n``` javascript\nsetTimeout(function(){\n\t$.ajax({\n\t\ttype:'post', \n\t\turl:'login',\n\t\tcontentType:'application/json',\n\t\tdata:JSON.stringify({\n\t\t\turl:'login',\n\t\t\tname:'123',\n\t\t\tpassword:123456\n\t\t}),\n\t\tsuccess:function(data){\n\t\t\tconsole.log(data)\n\t\t}\n\t})\n},1000)\n```\n![返回结果](/images/body-parser使用注意/6.png)\n\n现在就可以请求成功啦\n","slug":"body-parser使用注意","published":1,"updated":"2018-09-28T02:53:25.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kg50005vps686q0zugd","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>这几天在学习服务端渲染的时候用到了这个包 <strong>body-parser</strong> ,很方便的一个包，这个模块提供了四种解析器</p>\n<ol>\n<li>JSON body parser</li>\n<li>Raw body parser</li>\n<li>Text body parser</li>\n<li>URL-encoded form body parser</li>\n</ol>\n<p>每一项详细的配置都能在网上找到，这篇记下的是我在使用中遇到的问题 <code>bodyParser.json(option)和bodyParser.urlencoded(option)的不同</code>，在网上搜这个问题，得到的答案还是让我一头雾水，终于试了几次并结合资料弄清楚两者的使用场景</p>\n<h2 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h2><p>看官方的解释：<br>bodyParser.json(options)：中间件只会解析 json ，允许请求任意Unicode编码,支持 gzip 和 deflate 编码。</p>\n<p>bodyParser.urlencoded(option)：中间件只解析urlencoded 请求体，并返回，只支持UTF-8编号文本，支持gzip deflate 压缩。(tip:一般这一项是接收表单提交form)</p>\n<h2 id=\"三、例子\"><a href=\"#三、例子\" class=\"headerlink\" title=\"三、例子\"></a>三、例子</h2><p>看到这里我明白了一个接受form请求，一个接受json请求，好，我写了下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//server端关键代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonParser  =bodyParser.json();</span><br><span class=\"line\">app.post(<span class=\"string\">'/login'</span>,jsonParser,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(req.body)</span><br><span class=\"line\">\tres.send(req.body)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//客户端请求</span></span><br><span class=\"line\">&lt;form method=<span class=\"string\">\"post\"</span> action=<span class=\"string\">\"/login\"</span>&gt;</span><br><span class=\"line\">\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"form-group\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"inputTitle\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"col-sm-3 control-label\"</span>&gt;电影名称&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;input id=\"inputTitle\" type=\"text\" name=\"title\" value=\"\" class=\"form-control\" /</span>&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;div class=\"form-group\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;label for=\"inputLanguage\" class=\"col-sm-3 control-label\"&gt;海报&lt;/</span>label&gt;</span><br><span class=\"line\">\t\t&lt;input id=<span class=\"string\">\"inputLanguage\"</span> type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"poster\"</span> value=<span class=\"string\">\"\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"form-control\"</span> /&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button type=\"submit\" class=\"btn btn-default\"&gt;确定&lt;/</span>button&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">setTimeout(function()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\ttype:'post', </span></span><br><span class=\"line\"><span class=\"regexp\">\t\turl:'login',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tdata:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\turl:'login',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tname:'123',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tpassword:123456</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tsuccess:function(data)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tconsole.log(data)</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,1000)</span></span><br></pre></td></tr></table></figure></p>\n<p>客户端有一个用于测试的表单和一个1s后发送post请求的ajax</p>\n<p>先看一下表单请求的结果：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/1.png\" alt=\"表单请求\" title=\"\">\n                </div>\n                <div class=\"image-caption\">表单请求</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/2.png\" alt=\"表单方式请求后服务端返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">表单方式请求后服务端返回结果</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/2.png\" alt=\"ajax方式请求后服务端返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ajax方式请求后服务端返回结果</div>\n            </figure>\n<p>可以看到bodyParser.json()并没有解析到ajax和form表单请求，现在来换bodyParser.urlencoded(option)的解析方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/login'</span>,urlencodedParser,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(req.body)</span><br><span class=\"line\">\tres.send(req.body)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/3.png\" alt=\"表单方式请求后服务端返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">表单方式请求后服务端返回结果</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/4.png\" alt=\"ajax方式请求后服务端返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ajax方式请求后服务端返回结果</div>\n            </figure>\n<p>可以看到这种解析方式成功将请求解析到了body里。<br>到了这里，我又有疑问了，知道了bodyParser.urlencoded期望的数据形式，那bodyParser.json适用于什么情况呢？</p>\n<p>看下面例子，既然api说bodyParser.json适用于json的数据类型，所以我将ajax的content-Type设置为json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t$.ajax(&#123;</span><br><span class=\"line\">\t\ttype:<span class=\"string\">'post'</span>, </span><br><span class=\"line\">\t\turl:<span class=\"string\">'login'</span>,</span><br><span class=\"line\">\t\tcontentType:<span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">\t\tdata:&#123;</span><br><span class=\"line\">\t\t\turl:<span class=\"string\">'login'</span>,</span><br><span class=\"line\">\t\t\tname:<span class=\"string\">'123'</span>,</span><br><span class=\"line\">\t\t\tpassword:<span class=\"number\">123456</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsuccess:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p>请求结果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/5.png\" alt=\"返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">返回结果</div>\n            </figure></p>\n<p>请求失败，那么疑问来了，我设置了json格式的请求，为什么bodyParser.json解析不了</p>\n<p><strong>关键</strong>：</p>\n<blockquote>\n<p>jq的ajax</p>\n<ol>\n<li>默认的ContentType的值为:application/x-www-form-urlencoded; charset=UTF-8<br>此格式为表单提交格式，数据为 <code>key1=value1&amp;key2=value2</code>的格式 </li>\n<li>虽然ajax的data属性值格式为:{key1:value1,key2:value2},但最后会转为key1=value1&amp;key2=value2的格式提交到后台 </li>\n<li>如果想传json格式数据，content-type设置好后，ajax必须将date属性值转为json字符串，不能为json对象（js对象，会自动转为key=value形式）,这样传输的时候才是json格式</li>\n</ol>\n</blockquote>\n<p>我们来试一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t$.ajax(&#123;</span><br><span class=\"line\">\t\ttype:<span class=\"string\">'post'</span>, </span><br><span class=\"line\">\t\turl:<span class=\"string\">'login'</span>,</span><br><span class=\"line\">\t\tcontentType:<span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">\t\tdata:<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\turl:<span class=\"string\">'login'</span>,</span><br><span class=\"line\">\t\t\tname:<span class=\"string\">'123'</span>,</span><br><span class=\"line\">\t\t\tpassword:<span class=\"number\">123456</span></span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\tsuccess:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/6.png\" alt=\"返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">返回结果</div>\n            </figure>\n<p>现在就可以请求成功啦</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>这几天在学习服务端渲染的时候用到了这个包 <strong>body-parser</strong> ,很方便的一个包，这个模块提供了四种解析器</p>\n<ol>\n<li>JSON body parser</li>\n<li>Raw body parser</li>\n<li>Text body parser</li>\n<li>URL-encoded form body parser</li>\n</ol>\n<p>每一项详细的配置都能在网上找到，这篇记下的是我在使用中遇到的问题 <code>bodyParser.json(option)和bodyParser.urlencoded(option)的不同</code>，在网上搜这个问题，得到的答案还是让我一头雾水，终于试了几次并结合资料弄清楚两者的使用场景</p>\n<h2 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h2><p>看官方的解释：<br>bodyParser.json(options)：中间件只会解析 json ，允许请求任意Unicode编码,支持 gzip 和 deflate 编码。</p>\n<p>bodyParser.urlencoded(option)：中间件只解析urlencoded 请求体，并返回，只支持UTF-8编号文本，支持gzip deflate 压缩。(tip:一般这一项是接收表单提交form)</p>\n<h2 id=\"三、例子\"><a href=\"#三、例子\" class=\"headerlink\" title=\"三、例子\"></a>三、例子</h2><p>看到这里我明白了一个接受form请求，一个接受json请求，好，我写了下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//server端关键代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonParser  =bodyParser.json();</span><br><span class=\"line\">app.post(<span class=\"string\">'/login'</span>,jsonParser,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(req.body)</span><br><span class=\"line\">\tres.send(req.body)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//客户端请求</span></span><br><span class=\"line\">&lt;form method=<span class=\"string\">\"post\"</span> action=<span class=\"string\">\"/login\"</span>&gt;</span><br><span class=\"line\">\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"form-group\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"inputTitle\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"col-sm-3 control-label\"</span>&gt;电影名称&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;input id=\"inputTitle\" type=\"text\" name=\"title\" value=\"\" class=\"form-control\" /</span>&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;div class=\"form-group\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;label for=\"inputLanguage\" class=\"col-sm-3 control-label\"&gt;海报&lt;/</span>label&gt;</span><br><span class=\"line\">\t\t&lt;input id=<span class=\"string\">\"inputLanguage\"</span> type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"poster\"</span> value=<span class=\"string\">\"\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"form-control\"</span> /&gt;</span><br><span class=\"line\">\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button type=\"submit\" class=\"btn btn-default\"&gt;确定&lt;/</span>button&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">setTimeout(function()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t$.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\ttype:'post', </span></span><br><span class=\"line\"><span class=\"regexp\">\t\turl:'login',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tdata:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\turl:'login',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tname:'123',</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tpassword:123456</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tsuccess:function(data)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tconsole.log(data)</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,1000)</span></span><br></pre></td></tr></table></figure></p>\n<p>客户端有一个用于测试的表单和一个1s后发送post请求的ajax</p>\n<p>先看一下表单请求的结果：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/1.png\" alt=\"表单请求\" title=\"\">\n                </div>\n                <div class=\"image-caption\">表单请求</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/2.png\" alt=\"表单方式请求后服务端返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">表单方式请求后服务端返回结果</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/2.png\" alt=\"ajax方式请求后服务端返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ajax方式请求后服务端返回结果</div>\n            </figure>\n<p>可以看到bodyParser.json()并没有解析到ajax和form表单请求，现在来换bodyParser.urlencoded(option)的解析方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/login'</span>,urlencodedParser,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(req.body)</span><br><span class=\"line\">\tres.send(req.body)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/3.png\" alt=\"表单方式请求后服务端返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">表单方式请求后服务端返回结果</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/4.png\" alt=\"ajax方式请求后服务端返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ajax方式请求后服务端返回结果</div>\n            </figure>\n<p>可以看到这种解析方式成功将请求解析到了body里。<br>到了这里，我又有疑问了，知道了bodyParser.urlencoded期望的数据形式，那bodyParser.json适用于什么情况呢？</p>\n<p>看下面例子，既然api说bodyParser.json适用于json的数据类型，所以我将ajax的content-Type设置为json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t$.ajax(&#123;</span><br><span class=\"line\">\t\ttype:<span class=\"string\">'post'</span>, </span><br><span class=\"line\">\t\turl:<span class=\"string\">'login'</span>,</span><br><span class=\"line\">\t\tcontentType:<span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">\t\tdata:&#123;</span><br><span class=\"line\">\t\t\turl:<span class=\"string\">'login'</span>,</span><br><span class=\"line\">\t\t\tname:<span class=\"string\">'123'</span>,</span><br><span class=\"line\">\t\t\tpassword:<span class=\"number\">123456</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsuccess:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p>请求结果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/5.png\" alt=\"返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">返回结果</div>\n            </figure></p>\n<p>请求失败，那么疑问来了，我设置了json格式的请求，为什么bodyParser.json解析不了</p>\n<p><strong>关键</strong>：</p>\n<blockquote>\n<p>jq的ajax</p>\n<ol>\n<li>默认的ContentType的值为:application/x-www-form-urlencoded; charset=UTF-8<br>此格式为表单提交格式，数据为 <code>key1=value1&amp;key2=value2</code>的格式 </li>\n<li>虽然ajax的data属性值格式为:{key1:value1,key2:value2},但最后会转为key1=value1&amp;key2=value2的格式提交到后台 </li>\n<li>如果想传json格式数据，content-type设置好后，ajax必须将date属性值转为json字符串，不能为json对象（js对象，会自动转为key=value形式）,这样传输的时候才是json格式</li>\n</ol>\n</blockquote>\n<p>我们来试一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t$.ajax(&#123;</span><br><span class=\"line\">\t\ttype:<span class=\"string\">'post'</span>, </span><br><span class=\"line\">\t\turl:<span class=\"string\">'login'</span>,</span><br><span class=\"line\">\t\tcontentType:<span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">\t\tdata:<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\turl:<span class=\"string\">'login'</span>,</span><br><span class=\"line\">\t\t\tname:<span class=\"string\">'123'</span>,</span><br><span class=\"line\">\t\t\tpassword:<span class=\"number\">123456</span></span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\tsuccess:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/body-parser使用注意/6.png\" alt=\"返回结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">返回结果</div>\n            </figure>\n<p>现在就可以请求成功啦</p>\n"},{"title":"create-react-app配置webpack","date":"2017-09-06T08:42:15.000Z","_content":"在学习react过程中，每次都要配置webpack，非常的麻烦，我是要写react的，不是配置这东西哒！！\n好在有了'create-react-app'，通过npm安装后，创建项目变得非常简单\n但是它里面没有做`less`等你实际项目需要的`loader`或者`plugins`，所以这里记录的是怎么定制`create-react-app创建的项目的webpack`\n\n## 一、先配置less\n### 1.创建一个项目\n我创建的叫`test`\n![test测试项目](/images/create-react-app配置webpack/1.png)\n创建完毕后，进入创建的项目，运行`npm start`启动此项目\n![启动](/images/create-react-app配置webpack/2.png)\n\n### 2.找到`webpack.config.dev.js`和`webpack.config.prod.js`\n运行`npm run eject`\n安装`less-loader`和`less`\n进入`config`文件夹，这里会有两个文件`webpack.config.dev.js`和`webpack.config.prod.js`应该一个是开发环境一个生产环境的配置文件，两个文件都要修改\n打开`webpack.config.dev.js`\n找到`module rules`部分，也就是配置loader的部分，找到配置`css`文件的test（`/\\.(css)$/`）修改为` test:/\\.(css|less)$/`,添加一个loader：`{ loader: require.resolve('less-loader') },`放在最下面\n``` javascript\n{\n\ttest: /\\.css$/,\n\tuse: [require.resolve('style-loader'), {\n\t\tloader: require.resolve('css-loader'),\n\t\toptions: {\n\t\t\timportLoaders: 1,\n\t\t},\n\t},\n\t{\n\t\tloader: require.resolve('postcss-loader'),\n\t\toptions: {\n\t\t\t// Necessary for external CSS imports to work\n\t\t\t// https://github.com/facebookincubator/create-react-app/issues/2677\n\t\t\tident: 'postcss',\n\t\t\tplugins: () = >[require('postcss-flexbugs-fixes'), autoprefixer({\n\t\t\t\tbrowsers: ['>1%', 'last 4 versions', 'Firefox ESR', 'not ie < 9', // React doesn't support IE8 anyway\n\t\t\t\t],\n\t\t\t\tflexbox: 'no-2009',\n\t\t\t}), ],\n\t\t},\n\t},\n\t{\n\t\tloader: require.resolve('less-loader')\n\t},\n\t],\n},\n```\n\n### 3.测试\n现在我们做一下测试\n可以随便在`css`文件中加入`less`语法\n我在`App.css`中设置了整体的背景颜色：\n```css\n@base: pink;\n.App-header {\n  background-color: @base;\n  height: 150px;\n  padding: 20px;\n  color: white;\n}\n```\n因为我们修改了webpack的配置项，所以需要重新启动服务器：\n![添加成功](/images/create-react-app配置webpack/3.png)\n可以看到，配置已经成功\n\n## 二、配置px2rem\n### 1.解释\n`px2rem`是做移动端页面开发的时候，自动将`px`单位转换为`rem`，非常的方便\n这里要用支持`webpack`的对应`loader`，我用的是`postcss-px2rem`\n配置这个功能相对来说有些复杂\n\n### 2.安装\n`npm install postcss-px2rem postcss-loader  --save`执行这个命令安装\n\n### 3.配置\n还是`webpack.config.dev.js`，引入\n```javascript\nconst px2rem = require('postcss-px2rem')\n```\n添加在的`autoprefixer`下面添加，好像loaders里只能有一个`postcss`，多个的话不会报错，对应的功能会不管用\n```javascript\n{\n  loader: require.resolve('postcss-loader'),\n  options: {\n    // Necessary for external CSS imports to work\n    // https://github.com/facebookincubator/create-react-app/issues/2677\n    ident: 'postcss',\n    plugins: () => [\n      require('postcss-flexbugs-fixes'),\n      autoprefixer({\n        browsers: [\n          '>1%',\n          'last 4 versions',\n          'Firefox ESR',\n          'not ie < 9', // React doesn't support IE8 anyway\n        ],\n        flexbox: 'no-2009',\n      }),\n      //这个位置\n        px2rem({remUnit: 75})\n    ],\n  },\n},\n```\n这里面的数值就是1rem对应的px\n\n### 4.测试\n现在启动服务器，因为原有的都是以px为单位，所以现在页面上应该全部转换为了rem\n![添加成功](/images/create-react-app配置webpack/4.png)\n\n不要忘了配置`webpack.config.prod.js`这个文件，\n最后只需要在你的页面上对html的font-size做变换就可以了，这里略过\n\n### 5.总结\nwebpack的文档和有些npm的文档写的走点心好么，搞得本来挺简单的东西查了好久！","source":"_posts/create-react-app配置webpack.md","raw":"---\ntitle: 'create-react-app配置webpack'\ndate: 2017-09-06 16:42:15\ntags: [react,webpack,create-react-app,px2rem,less]\n---\n在学习react过程中，每次都要配置webpack，非常的麻烦，我是要写react的，不是配置这东西哒！！\n好在有了'create-react-app'，通过npm安装后，创建项目变得非常简单\n但是它里面没有做`less`等你实际项目需要的`loader`或者`plugins`，所以这里记录的是怎么定制`create-react-app创建的项目的webpack`\n\n## 一、先配置less\n### 1.创建一个项目\n我创建的叫`test`\n![test测试项目](/images/create-react-app配置webpack/1.png)\n创建完毕后，进入创建的项目，运行`npm start`启动此项目\n![启动](/images/create-react-app配置webpack/2.png)\n\n### 2.找到`webpack.config.dev.js`和`webpack.config.prod.js`\n运行`npm run eject`\n安装`less-loader`和`less`\n进入`config`文件夹，这里会有两个文件`webpack.config.dev.js`和`webpack.config.prod.js`应该一个是开发环境一个生产环境的配置文件，两个文件都要修改\n打开`webpack.config.dev.js`\n找到`module rules`部分，也就是配置loader的部分，找到配置`css`文件的test（`/\\.(css)$/`）修改为` test:/\\.(css|less)$/`,添加一个loader：`{ loader: require.resolve('less-loader') },`放在最下面\n``` javascript\n{\n\ttest: /\\.css$/,\n\tuse: [require.resolve('style-loader'), {\n\t\tloader: require.resolve('css-loader'),\n\t\toptions: {\n\t\t\timportLoaders: 1,\n\t\t},\n\t},\n\t{\n\t\tloader: require.resolve('postcss-loader'),\n\t\toptions: {\n\t\t\t// Necessary for external CSS imports to work\n\t\t\t// https://github.com/facebookincubator/create-react-app/issues/2677\n\t\t\tident: 'postcss',\n\t\t\tplugins: () = >[require('postcss-flexbugs-fixes'), autoprefixer({\n\t\t\t\tbrowsers: ['>1%', 'last 4 versions', 'Firefox ESR', 'not ie < 9', // React doesn't support IE8 anyway\n\t\t\t\t],\n\t\t\t\tflexbox: 'no-2009',\n\t\t\t}), ],\n\t\t},\n\t},\n\t{\n\t\tloader: require.resolve('less-loader')\n\t},\n\t],\n},\n```\n\n### 3.测试\n现在我们做一下测试\n可以随便在`css`文件中加入`less`语法\n我在`App.css`中设置了整体的背景颜色：\n```css\n@base: pink;\n.App-header {\n  background-color: @base;\n  height: 150px;\n  padding: 20px;\n  color: white;\n}\n```\n因为我们修改了webpack的配置项，所以需要重新启动服务器：\n![添加成功](/images/create-react-app配置webpack/3.png)\n可以看到，配置已经成功\n\n## 二、配置px2rem\n### 1.解释\n`px2rem`是做移动端页面开发的时候，自动将`px`单位转换为`rem`，非常的方便\n这里要用支持`webpack`的对应`loader`，我用的是`postcss-px2rem`\n配置这个功能相对来说有些复杂\n\n### 2.安装\n`npm install postcss-px2rem postcss-loader  --save`执行这个命令安装\n\n### 3.配置\n还是`webpack.config.dev.js`，引入\n```javascript\nconst px2rem = require('postcss-px2rem')\n```\n添加在的`autoprefixer`下面添加，好像loaders里只能有一个`postcss`，多个的话不会报错，对应的功能会不管用\n```javascript\n{\n  loader: require.resolve('postcss-loader'),\n  options: {\n    // Necessary for external CSS imports to work\n    // https://github.com/facebookincubator/create-react-app/issues/2677\n    ident: 'postcss',\n    plugins: () => [\n      require('postcss-flexbugs-fixes'),\n      autoprefixer({\n        browsers: [\n          '>1%',\n          'last 4 versions',\n          'Firefox ESR',\n          'not ie < 9', // React doesn't support IE8 anyway\n        ],\n        flexbox: 'no-2009',\n      }),\n      //这个位置\n        px2rem({remUnit: 75})\n    ],\n  },\n},\n```\n这里面的数值就是1rem对应的px\n\n### 4.测试\n现在启动服务器，因为原有的都是以px为单位，所以现在页面上应该全部转换为了rem\n![添加成功](/images/create-react-app配置webpack/4.png)\n\n不要忘了配置`webpack.config.prod.js`这个文件，\n最后只需要在你的页面上对html的font-size做变换就可以了，这里略过\n\n### 5.总结\nwebpack的文档和有些npm的文档写的走点心好么，搞得本来挺简单的东西查了好久！","slug":"create-react-app配置webpack","published":1,"updated":"2018-09-28T02:53:25.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kg70006vps653k46lrf","content":"<p>在学习react过程中，每次都要配置webpack，非常的麻烦，我是要写react的，不是配置这东西哒！！<br>好在有了’create-react-app’，通过npm安装后，创建项目变得非常简单<br>但是它里面没有做<code>less</code>等你实际项目需要的<code>loader</code>或者<code>plugins</code>，所以这里记录的是怎么定制<code>create-react-app创建的项目的webpack</code></p>\n<h2 id=\"一、先配置less\"><a href=\"#一、先配置less\" class=\"headerlink\" title=\"一、先配置less\"></a>一、先配置less</h2><h3 id=\"1-创建一个项目\"><a href=\"#1-创建一个项目\" class=\"headerlink\" title=\"1.创建一个项目\"></a>1.创建一个项目</h3><p>我创建的叫<code>test</code><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/create-react-app配置webpack/1.png\" alt=\"test测试项目\" title=\"\">\n                </div>\n                <div class=\"image-caption\">test测试项目</div>\n            </figure><br>创建完毕后，进入创建的项目，运行<code>npm start</code>启动此项目<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/create-react-app配置webpack/2.png\" alt=\"启动\" title=\"\">\n                </div>\n                <div class=\"image-caption\">启动</div>\n            </figure></p>\n<h3 id=\"2-找到webpack-config-dev-js和webpack-config-prod-js\"><a href=\"#2-找到webpack-config-dev-js和webpack-config-prod-js\" class=\"headerlink\" title=\"2.找到webpack.config.dev.js和webpack.config.prod.js\"></a>2.找到<code>webpack.config.dev.js</code>和<code>webpack.config.prod.js</code></h3><p>运行<code>npm run eject</code><br>安装<code>less-loader</code>和<code>less</code><br>进入<code>config</code>文件夹，这里会有两个文件<code>webpack.config.dev.js</code>和<code>webpack.config.prod.js</code>应该一个是开发环境一个生产环境的配置文件，两个文件都要修改<br>打开<code>webpack.config.dev.js</code><br>找到<code>module rules</code>部分，也就是配置loader的部分，找到配置<code>css</code>文件的test（<code>/\\.(css)$/</code>）修改为<code>test:/\\.(css|less)$/</code>,添加一个loader：<code>{ loader: require.resolve(&#39;less-loader&#39;) },</code>放在最下面<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\ttest: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">\tuse: [<span class=\"built_in\">require</span>.resolve(<span class=\"string\">'style-loader'</span>), &#123;</span><br><span class=\"line\">\t\tloader: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'css-loader'</span>),</span><br><span class=\"line\">\t\toptions: &#123;</span><br><span class=\"line\">\t\t\timportLoaders: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tloader: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'postcss-loader'</span>),</span><br><span class=\"line\">\t\toptions: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Necessary for external CSS imports to work</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class=\"line\">\t\t\tident: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">\t\t\tplugins: () = &gt;[<span class=\"built_in\">require</span>(<span class=\"string\">'postcss-flexbugs-fixes'</span>), autoprefixer(&#123;</span><br><span class=\"line\">\t\t\t\tbrowsers: [<span class=\"string\">'&gt;1%'</span>, <span class=\"string\">'last 4 versions'</span>, <span class=\"string\">'Firefox ESR'</span>, <span class=\"string\">'not ie &lt; 9'</span>, <span class=\"comment\">// React doesn't support IE8 anyway</span></span><br><span class=\"line\">\t\t\t\t],</span><br><span class=\"line\">\t\t\t\tflexbox: <span class=\"string\">'no-2009'</span>,</span><br><span class=\"line\">\t\t\t&#125;), ],</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tloader: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'less-loader'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3.测试\"></a>3.测试</h3><p>现在我们做一下测试<br>可以随便在<code>css</code>文件中加入<code>less</code>语法<br>我在<code>App.css</code>中设置了整体的背景颜色：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@base: pink;</span><br><span class=\"line\"><span class=\"selector-class\">.App-header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: @base;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为我们修改了webpack的配置项，所以需要重新启动服务器：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/create-react-app配置webpack/3.png\" alt=\"添加成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">添加成功</div>\n            </figure><br>可以看到，配置已经成功</p>\n<h2 id=\"二、配置px2rem\"><a href=\"#二、配置px2rem\" class=\"headerlink\" title=\"二、配置px2rem\"></a>二、配置px2rem</h2><h3 id=\"1-解释\"><a href=\"#1-解释\" class=\"headerlink\" title=\"1.解释\"></a>1.解释</h3><p><code>px2rem</code>是做移动端页面开发的时候，自动将<code>px</code>单位转换为<code>rem</code>，非常的方便<br>这里要用支持<code>webpack</code>的对应<code>loader</code>，我用的是<code>postcss-px2rem</code><br>配置这个功能相对来说有些复杂</p>\n<h3 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2.安装\"></a>2.安装</h3><p><code>npm install postcss-px2rem postcss-loader  --save</code>执行这个命令安装</p>\n<h3 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3.配置\"></a>3.配置</h3><p>还是<code>webpack.config.dev.js</code>，引入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> px2rem = <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-px2rem'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>添加在的<code>autoprefixer</code>下面添加，好像loaders里只能有一个<code>postcss</code>，多个的话不会报错，对应的功能会不管用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  loader: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'postcss-loader'</span>),</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Necessary for external CSS imports to work</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class=\"line\">    ident: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">    plugins: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">      <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-flexbugs-fixes'</span>),</span><br><span class=\"line\">      autoprefixer(&#123;</span><br><span class=\"line\">        browsers: [</span><br><span class=\"line\">          <span class=\"string\">'&gt;1%'</span>,</span><br><span class=\"line\">          <span class=\"string\">'last 4 versions'</span>,</span><br><span class=\"line\">          <span class=\"string\">'Firefox ESR'</span>,</span><br><span class=\"line\">          <span class=\"string\">'not ie &lt; 9'</span>, <span class=\"comment\">// React doesn't support IE8 anyway</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        flexbox: <span class=\"string\">'no-2009'</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"comment\">//这个位置</span></span><br><span class=\"line\">        px2rem(&#123;<span class=\"attr\">remUnit</span>: <span class=\"number\">75</span>&#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>这里面的数值就是1rem对应的px</p>\n<h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h3><p>现在启动服务器，因为原有的都是以px为单位，所以现在页面上应该全部转换为了rem<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/create-react-app配置webpack/4.png\" alt=\"添加成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">添加成功</div>\n            </figure></p>\n<p>不要忘了配置<code>webpack.config.prod.js</code>这个文件，<br>最后只需要在你的页面上对html的font-size做变换就可以了，这里略过</p>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h3><p>webpack的文档和有些npm的文档写的走点心好么，搞得本来挺简单的东西查了好久！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在学习react过程中，每次都要配置webpack，非常的麻烦，我是要写react的，不是配置这东西哒！！<br>好在有了’create-react-app’，通过npm安装后，创建项目变得非常简单<br>但是它里面没有做<code>less</code>等你实际项目需要的<code>loader</code>或者<code>plugins</code>，所以这里记录的是怎么定制<code>create-react-app创建的项目的webpack</code></p>\n<h2 id=\"一、先配置less\"><a href=\"#一、先配置less\" class=\"headerlink\" title=\"一、先配置less\"></a>一、先配置less</h2><h3 id=\"1-创建一个项目\"><a href=\"#1-创建一个项目\" class=\"headerlink\" title=\"1.创建一个项目\"></a>1.创建一个项目</h3><p>我创建的叫<code>test</code><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/create-react-app配置webpack/1.png\" alt=\"test测试项目\" title=\"\">\n                </div>\n                <div class=\"image-caption\">test测试项目</div>\n            </figure><br>创建完毕后，进入创建的项目，运行<code>npm start</code>启动此项目<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/create-react-app配置webpack/2.png\" alt=\"启动\" title=\"\">\n                </div>\n                <div class=\"image-caption\">启动</div>\n            </figure></p>\n<h3 id=\"2-找到webpack-config-dev-js和webpack-config-prod-js\"><a href=\"#2-找到webpack-config-dev-js和webpack-config-prod-js\" class=\"headerlink\" title=\"2.找到webpack.config.dev.js和webpack.config.prod.js\"></a>2.找到<code>webpack.config.dev.js</code>和<code>webpack.config.prod.js</code></h3><p>运行<code>npm run eject</code><br>安装<code>less-loader</code>和<code>less</code><br>进入<code>config</code>文件夹，这里会有两个文件<code>webpack.config.dev.js</code>和<code>webpack.config.prod.js</code>应该一个是开发环境一个生产环境的配置文件，两个文件都要修改<br>打开<code>webpack.config.dev.js</code><br>找到<code>module rules</code>部分，也就是配置loader的部分，找到配置<code>css</code>文件的test（<code>/\\.(css)$/</code>）修改为<code>test:/\\.(css|less)$/</code>,添加一个loader：<code>{ loader: require.resolve(&#39;less-loader&#39;) },</code>放在最下面<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\ttest: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">\tuse: [<span class=\"built_in\">require</span>.resolve(<span class=\"string\">'style-loader'</span>), &#123;</span><br><span class=\"line\">\t\tloader: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'css-loader'</span>),</span><br><span class=\"line\">\t\toptions: &#123;</span><br><span class=\"line\">\t\t\timportLoaders: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tloader: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'postcss-loader'</span>),</span><br><span class=\"line\">\t\toptions: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Necessary for external CSS imports to work</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class=\"line\">\t\t\tident: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">\t\t\tplugins: () = &gt;[<span class=\"built_in\">require</span>(<span class=\"string\">'postcss-flexbugs-fixes'</span>), autoprefixer(&#123;</span><br><span class=\"line\">\t\t\t\tbrowsers: [<span class=\"string\">'&gt;1%'</span>, <span class=\"string\">'last 4 versions'</span>, <span class=\"string\">'Firefox ESR'</span>, <span class=\"string\">'not ie &lt; 9'</span>, <span class=\"comment\">// React doesn't support IE8 anyway</span></span><br><span class=\"line\">\t\t\t\t],</span><br><span class=\"line\">\t\t\t\tflexbox: <span class=\"string\">'no-2009'</span>,</span><br><span class=\"line\">\t\t\t&#125;), ],</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tloader: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'less-loader'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3.测试\"></a>3.测试</h3><p>现在我们做一下测试<br>可以随便在<code>css</code>文件中加入<code>less</code>语法<br>我在<code>App.css</code>中设置了整体的背景颜色：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@base: pink;</span><br><span class=\"line\"><span class=\"selector-class\">.App-header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: @base;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为我们修改了webpack的配置项，所以需要重新启动服务器：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/create-react-app配置webpack/3.png\" alt=\"添加成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">添加成功</div>\n            </figure><br>可以看到，配置已经成功</p>\n<h2 id=\"二、配置px2rem\"><a href=\"#二、配置px2rem\" class=\"headerlink\" title=\"二、配置px2rem\"></a>二、配置px2rem</h2><h3 id=\"1-解释\"><a href=\"#1-解释\" class=\"headerlink\" title=\"1.解释\"></a>1.解释</h3><p><code>px2rem</code>是做移动端页面开发的时候，自动将<code>px</code>单位转换为<code>rem</code>，非常的方便<br>这里要用支持<code>webpack</code>的对应<code>loader</code>，我用的是<code>postcss-px2rem</code><br>配置这个功能相对来说有些复杂</p>\n<h3 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2.安装\"></a>2.安装</h3><p><code>npm install postcss-px2rem postcss-loader  --save</code>执行这个命令安装</p>\n<h3 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3.配置\"></a>3.配置</h3><p>还是<code>webpack.config.dev.js</code>，引入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> px2rem = <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-px2rem'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>添加在的<code>autoprefixer</code>下面添加，好像loaders里只能有一个<code>postcss</code>，多个的话不会报错，对应的功能会不管用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  loader: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'postcss-loader'</span>),</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Necessary for external CSS imports to work</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class=\"line\">    ident: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">    plugins: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">      <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-flexbugs-fixes'</span>),</span><br><span class=\"line\">      autoprefixer(&#123;</span><br><span class=\"line\">        browsers: [</span><br><span class=\"line\">          <span class=\"string\">'&gt;1%'</span>,</span><br><span class=\"line\">          <span class=\"string\">'last 4 versions'</span>,</span><br><span class=\"line\">          <span class=\"string\">'Firefox ESR'</span>,</span><br><span class=\"line\">          <span class=\"string\">'not ie &lt; 9'</span>, <span class=\"comment\">// React doesn't support IE8 anyway</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        flexbox: <span class=\"string\">'no-2009'</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"comment\">//这个位置</span></span><br><span class=\"line\">        px2rem(&#123;<span class=\"attr\">remUnit</span>: <span class=\"number\">75</span>&#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>这里面的数值就是1rem对应的px</p>\n<h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h3><p>现在启动服务器，因为原有的都是以px为单位，所以现在页面上应该全部转换为了rem<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/create-react-app配置webpack/4.png\" alt=\"添加成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">添加成功</div>\n            </figure></p>\n<p>不要忘了配置<code>webpack.config.prod.js</code>这个文件，<br>最后只需要在你的页面上对html的font-size做变换就可以了，这里略过</p>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h3><p>webpack的文档和有些npm的文档写的走点心好么，搞得本来挺简单的东西查了好久！</p>\n"},{"title":"css中的attr()","date":"2017-10-11T03:43:15.000Z","_content":"# 1.介绍\n`attr()` 用来获取一个html元素的属性值，可以用于伪元素，可以用于任何css属性\n\n# 2.用法\n这个使用起来非常方便且简单\n``` css\ncontent:attr(属性值);\n```\n`attr()`可以传三个值，分别是属性值、类型限制、默认值（必须符合类型限制），不过我试了半天也没调试成功，而且一般写一个参数就行，三个参数的情况基本用不到，所以就跳过了\n\n# 3.例子\n``` html\n<hear>\n\t<style type=\"text/css\">\n\t\t.box{\n\t\t\twidth: 400px;\n\t\t\theight: 400px;\n\t\t\tborder:1px solid #ccc;\n\t\t}\n\t\t.box:after{\n\t\t\tcontent:attr(data-foo);\n\t\t\tbackground-color: #ff461d;\n\t\t\tcolor: #fff;\n\t\t\tborder-radius: .32rem;\n\t\t\tpadding: .053333rem .133333rem;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"box\" data-foo=\"hello\"></div>\n</body>\n```\n此时，在div中将会出现一个红色背景的`hello`\n\n# 4.实例\n那么这个东西在什么情况下能用到呢？\n![购物车](/images/css中的attr/1.png)","source":"_posts/css中的attr.md","raw":"---\ntitle: css中的attr()\ndate: 2017-10-11 11:43:15\ntags: [css,attr()]\n---\n# 1.介绍\n`attr()` 用来获取一个html元素的属性值，可以用于伪元素，可以用于任何css属性\n\n# 2.用法\n这个使用起来非常方便且简单\n``` css\ncontent:attr(属性值);\n```\n`attr()`可以传三个值，分别是属性值、类型限制、默认值（必须符合类型限制），不过我试了半天也没调试成功，而且一般写一个参数就行，三个参数的情况基本用不到，所以就跳过了\n\n# 3.例子\n``` html\n<hear>\n\t<style type=\"text/css\">\n\t\t.box{\n\t\t\twidth: 400px;\n\t\t\theight: 400px;\n\t\t\tborder:1px solid #ccc;\n\t\t}\n\t\t.box:after{\n\t\t\tcontent:attr(data-foo);\n\t\t\tbackground-color: #ff461d;\n\t\t\tcolor: #fff;\n\t\t\tborder-radius: .32rem;\n\t\t\tpadding: .053333rem .133333rem;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"box\" data-foo=\"hello\"></div>\n</body>\n```\n此时，在div中将会出现一个红色背景的`hello`\n\n# 4.实例\n那么这个东西在什么情况下能用到呢？\n![购物车](/images/css中的attr/1.png)","slug":"css中的attr","published":1,"updated":"2018-09-28T02:53:25.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kg80007vps6pqaolx5v","content":"<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1.介绍\"></a>1.介绍</h1><p><code>attr()</code> 用来获取一个html元素的属性值，可以用于伪元素，可以用于任何css属性</p>\n<h1 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h1><p>这个使用起来非常方便且简单<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">content</span><span class=\"selector-pseudo\">:attr(</span>属性值);</span><br></pre></td></tr></table></figure></p>\n<p><code>attr()</code>可以传三个值，分别是属性值、类型限制、默认值（必须符合类型限制），不过我试了半天也没调试成功，而且一般写一个参数就行，三个参数的情况基本用不到，所以就跳过了</p>\n<h1 id=\"3-例子\"><a href=\"#3-例子\" class=\"headerlink\" title=\"3.例子\"></a>3.例子</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hear</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.box</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 400px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:after</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">content</span><span class=\"selector-pseudo\">:attr(data-foo)</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff461d</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border-radius</span>: <span class=\"selector-class\">.32rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">padding</span>: <span class=\"selector-class\">.053333rem</span> <span class=\"selector-class\">.133333rem</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">data-foo</span>=<span class=\"string\">\"hello\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时，在div中将会出现一个红色背景的<code>hello</code></p>\n<h1 id=\"4-实例\"><a href=\"#4-实例\" class=\"headerlink\" title=\"4.实例\"></a>4.实例</h1><p>那么这个东西在什么情况下能用到呢？<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/css中的attr/1.png\" alt=\"购物车\" title=\"\">\n                </div>\n                <div class=\"image-caption\">购物车</div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1.介绍\"></a>1.介绍</h1><p><code>attr()</code> 用来获取一个html元素的属性值，可以用于伪元素，可以用于任何css属性</p>\n<h1 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h1><p>这个使用起来非常方便且简单<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">content</span><span class=\"selector-pseudo\">:attr(</span>属性值);</span><br></pre></td></tr></table></figure></p>\n<p><code>attr()</code>可以传三个值，分别是属性值、类型限制、默认值（必须符合类型限制），不过我试了半天也没调试成功，而且一般写一个参数就行，三个参数的情况基本用不到，所以就跳过了</p>\n<h1 id=\"3-例子\"><a href=\"#3-例子\" class=\"headerlink\" title=\"3.例子\"></a>3.例子</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hear</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.box</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 400px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">:after</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">content</span><span class=\"selector-pseudo\">:attr(data-foo)</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff461d</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">border-radius</span>: <span class=\"selector-class\">.32rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">padding</span>: <span class=\"selector-class\">.053333rem</span> <span class=\"selector-class\">.133333rem</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">data-foo</span>=<span class=\"string\">\"hello\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时，在div中将会出现一个红色背景的<code>hello</code></p>\n<h1 id=\"4-实例\"><a href=\"#4-实例\" class=\"headerlink\" title=\"4.实例\"></a>4.实例</h1><p>那么这个东西在什么情况下能用到呢？<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/css中的attr/1.png\" alt=\"购物车\" title=\"\">\n                </div>\n                <div class=\"image-caption\">购物车</div>\n            </figure></p>\n"},{"title":"for循环的灵活运用","date":"2017-11-13T08:11:30.000Z","_content":"## 一、介绍\nfor循环是平时在写代码过程中最常用的代码了，一般写的时候都是中规中矩，比如这样：\n``` javascript\nfor(var i=0;i<4;i++){\n\tconsole.log(i)\n}\n//打印出四次i的值\n```\n个人觉得，要想用好一个东西就要明白它的工作原理，那么`for循环`的工作原理是什么呢？\n\n## 二、工作原理\n其实对于`for循环`的工作原理之前也是有多次了解的，可是长时间不去回忆一个知识点，知识点就会变得模糊，这里再次记录一下它的工作流程\n``` javascript\nfor(var i=0;i<4;i++){\n\tconsole.log(i)\n}\n```\n1.声明一个变量`i=0`\n2.判断`i是否小于4`\n3.如果满足判断条件，执行`console.log(i)`（函数体）\n4.i++\n5.循环步骤1-4\n![图](/images/for循环的灵活运用/1.png)\n\n## 三、延伸\n上面的写法都是中规中矩的，for循环有三个对应的参数，`以；分隔`，那么我可不可以省略其中某个参数呢？\n* 省略之前要注意，`；`是一定要加的\n1.全都省略\n``` javascript\nfor(;;){\n\tconsole.log(1)\n}\n```\n结果：这样写相当于无限循环了，根本停不下来\n\n2.省略第一参数\n``` javascript\nvar i=0;\nfor(;i<2;){\n\tconsole.log(i)\n}\n// 在外面声明了一个 i ，如果不声明这个东西，那判断条件该判断啥？所以这就相当于没有省略第一个参数，当然正常情况下我还没见到省略第一个参数的情况，一般情况第一个参数都是有的\n```\n结果：这样也会无限循环，因为`i的值一直为0`，所以它会无限的循环下去\n延伸：既然第三个参数省略了，我们可以再函数体里面定义它的累加规则啊，比如这样\n``` javascript\nfor(var i=0;i<20;){\n\t// 6的倍数\n\ti=i+6;\n\tif(i%6===0&&i<20){\n\t\tconsole.log(i)\n\t}\n}\n```\n好处：循环的次数大大降低，性能提升了，在这里正常情况下需要循环20次进行判断，现在的写法仅需要循环4次（第四次没有打印但是执行了函数体）\n\n仔细观察后发现，其实这种方式就是仅仅省略了第三个参数\n\n3.看看省略第三个参数还能干嘛\n问题：\n给定一个很大的数组，数组里面有许多证书，用JavaScript实现一个函数，要求：\n将数组中之和为10的每一对数配对并找出，返回这些数配对后的数组。\n例如：[11,3,8,9,7,-1,1,2,4...]\n得到：[[11,-1],[3,7],[8,2],[9,1]...]\n\n\n思路：其实一般的写法是两个for循环进行潜逃的那种，这里就不展示了，这里写的是优化后的写法\n``` javascript\nlet list = [1,2,3,-5,9,45,6];\nfunction map(list){\n\tlet ret=[];\n\tlist=list.sort((a,b)=>a-b);\n\t/*省略的第三个参数*/\n\tfor(let i=0,j=list.length-1;i<j;){\n    \t\tlet a=list[i],b=list[j];\n\t\tif(a+b===10){\n\t\t\tret.push([a,b]);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}else if(a+b<10){\n\t\t\ti++;\n\t\t}else{\n\t\t\tj--;\n\t\t}\n\t}\n\treturn ret;\n}\nconsole.log(JSON.stringify(map(list)))\n//结果：[[1,9]]\n```\n思路：这里影响性能的主要是太多次的`for循环`，数据量小还好，如果特别多怎么办？所以要`减少for循环次数`，先将数组从小到大排序，然后进行从两边到中间的计算，符合条件就 `push一次`\n\n## 四、总结\n简简单单的一个for循环可以有不同的写法，所以说写代码简单，写出有质量的代码难","source":"_posts/for循环的灵活运用.md","raw":"---\ntitle: for循环的灵活运用\ndate: 2017-11-13 16:11:30\ntags: 'javascript'\n---\n## 一、介绍\nfor循环是平时在写代码过程中最常用的代码了，一般写的时候都是中规中矩，比如这样：\n``` javascript\nfor(var i=0;i<4;i++){\n\tconsole.log(i)\n}\n//打印出四次i的值\n```\n个人觉得，要想用好一个东西就要明白它的工作原理，那么`for循环`的工作原理是什么呢？\n\n## 二、工作原理\n其实对于`for循环`的工作原理之前也是有多次了解的，可是长时间不去回忆一个知识点，知识点就会变得模糊，这里再次记录一下它的工作流程\n``` javascript\nfor(var i=0;i<4;i++){\n\tconsole.log(i)\n}\n```\n1.声明一个变量`i=0`\n2.判断`i是否小于4`\n3.如果满足判断条件，执行`console.log(i)`（函数体）\n4.i++\n5.循环步骤1-4\n![图](/images/for循环的灵活运用/1.png)\n\n## 三、延伸\n上面的写法都是中规中矩的，for循环有三个对应的参数，`以；分隔`，那么我可不可以省略其中某个参数呢？\n* 省略之前要注意，`；`是一定要加的\n1.全都省略\n``` javascript\nfor(;;){\n\tconsole.log(1)\n}\n```\n结果：这样写相当于无限循环了，根本停不下来\n\n2.省略第一参数\n``` javascript\nvar i=0;\nfor(;i<2;){\n\tconsole.log(i)\n}\n// 在外面声明了一个 i ，如果不声明这个东西，那判断条件该判断啥？所以这就相当于没有省略第一个参数，当然正常情况下我还没见到省略第一个参数的情况，一般情况第一个参数都是有的\n```\n结果：这样也会无限循环，因为`i的值一直为0`，所以它会无限的循环下去\n延伸：既然第三个参数省略了，我们可以再函数体里面定义它的累加规则啊，比如这样\n``` javascript\nfor(var i=0;i<20;){\n\t// 6的倍数\n\ti=i+6;\n\tif(i%6===0&&i<20){\n\t\tconsole.log(i)\n\t}\n}\n```\n好处：循环的次数大大降低，性能提升了，在这里正常情况下需要循环20次进行判断，现在的写法仅需要循环4次（第四次没有打印但是执行了函数体）\n\n仔细观察后发现，其实这种方式就是仅仅省略了第三个参数\n\n3.看看省略第三个参数还能干嘛\n问题：\n给定一个很大的数组，数组里面有许多证书，用JavaScript实现一个函数，要求：\n将数组中之和为10的每一对数配对并找出，返回这些数配对后的数组。\n例如：[11,3,8,9,7,-1,1,2,4...]\n得到：[[11,-1],[3,7],[8,2],[9,1]...]\n\n\n思路：其实一般的写法是两个for循环进行潜逃的那种，这里就不展示了，这里写的是优化后的写法\n``` javascript\nlet list = [1,2,3,-5,9,45,6];\nfunction map(list){\n\tlet ret=[];\n\tlist=list.sort((a,b)=>a-b);\n\t/*省略的第三个参数*/\n\tfor(let i=0,j=list.length-1;i<j;){\n    \t\tlet a=list[i],b=list[j];\n\t\tif(a+b===10){\n\t\t\tret.push([a,b]);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}else if(a+b<10){\n\t\t\ti++;\n\t\t}else{\n\t\t\tj--;\n\t\t}\n\t}\n\treturn ret;\n}\nconsole.log(JSON.stringify(map(list)))\n//结果：[[1,9]]\n```\n思路：这里影响性能的主要是太多次的`for循环`，数据量小还好，如果特别多怎么办？所以要`减少for循环次数`，先将数组从小到大排序，然后进行从两边到中间的计算，符合条件就 `push一次`\n\n## 四、总结\n简简单单的一个for循环可以有不同的写法，所以说写代码简单，写出有质量的代码难","slug":"for循环的灵活运用","published":1,"updated":"2018-09-28T02:53:25.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kga000avps6ofhqrjbm","content":"<h2 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h2><p>for循环是平时在写代码过程中最常用的代码了，一般写的时候都是中规中矩，比如这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印出四次i的值</span></span><br></pre></td></tr></table></figure></p>\n<p>个人觉得，要想用好一个东西就要明白它的工作原理，那么<code>for循环</code>的工作原理是什么呢？</p>\n<h2 id=\"二、工作原理\"><a href=\"#二、工作原理\" class=\"headerlink\" title=\"二、工作原理\"></a>二、工作原理</h2><p>其实对于<code>for循环</code>的工作原理之前也是有多次了解的，可是长时间不去回忆一个知识点，知识点就会变得模糊，这里再次记录一下它的工作流程<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>1.声明一个变量<code>i=0</code><br>2.判断<code>i是否小于4</code><br>3.如果满足判断条件，执行<code>console.log(i)</code>（函数体）<br>4.i++<br>5.循环步骤1-4<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/for循环的灵活运用/1.png\" alt=\"图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">图</div>\n            </figure></p>\n<h2 id=\"三、延伸\"><a href=\"#三、延伸\" class=\"headerlink\" title=\"三、延伸\"></a>三、延伸</h2><p>上面的写法都是中规中矩的，for循环有三个对应的参数，<code>以；分隔</code>，那么我可不可以省略其中某个参数呢？</p>\n<ul>\n<li>省略之前要注意，<code>；</code>是一定要加的<br>1.全都省略<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(;;)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结果：这样写相当于无限循环了，根本停不下来</p>\n<p>2.省略第一参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(;i&lt;<span class=\"number\">2</span>;)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在外面声明了一个 i ，如果不声明这个东西，那判断条件该判断啥？所以这就相当于没有省略第一个参数，当然正常情况下我还没见到省略第一个参数的情况，一般情况第一个参数都是有的</span></span><br></pre></td></tr></table></figure></p>\n<p>结果：这样也会无限循环，因为<code>i的值一直为0</code>，所以它会无限的循环下去<br>延伸：既然第三个参数省略了，我们可以再函数体里面定义它的累加规则啊，比如这样<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 6的倍数</span></span><br><span class=\"line\">\ti=i+<span class=\"number\">6</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i%<span class=\"number\">6</span>===<span class=\"number\">0</span>&amp;&amp;i&lt;<span class=\"number\">20</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好处：循环的次数大大降低，性能提升了，在这里正常情况下需要循环20次进行判断，现在的写法仅需要循环4次（第四次没有打印但是执行了函数体）</p>\n<p>仔细观察后发现，其实这种方式就是仅仅省略了第三个参数</p>\n<p>3.看看省略第三个参数还能干嘛<br>问题：<br>给定一个很大的数组，数组里面有许多证书，用JavaScript实现一个函数，要求：<br>将数组中之和为10的每一对数配对并找出，返回这些数配对后的数组。<br>例如：[11,3,8,9,7,-1,1,2,4…]<br>得到：[[11,-1],[3,7],[8,2],[9,1]…]</p>\n<p>思路：其实一般的写法是两个for循环进行潜逃的那种，这里就不展示了，这里写的是优化后的写法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">-5</span>,<span class=\"number\">9</span>,<span class=\"number\">45</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">list</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret=[];</span><br><span class=\"line\">\tlist=list.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);</span><br><span class=\"line\">\t<span class=\"comment\">/*省略的第三个参数*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>,j=list.length<span class=\"number\">-1</span>;i&lt;j;)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">let</span> a=list[i],b=list[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a+b===<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">\t\t\tret.push([a,b]);</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a+b&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(map(list)))</span><br><span class=\"line\"><span class=\"comment\">//结果：[[1,9]]</span></span><br></pre></td></tr></table></figure></p>\n<p>思路：这里影响性能的主要是太多次的<code>for循环</code>，数据量小还好，如果特别多怎么办？所以要<code>减少for循环次数</code>，先将数组从小到大排序，然后进行从两边到中间的计算，符合条件就 <code>push一次</code></p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>简简单单的一个for循环可以有不同的写法，所以说写代码简单，写出有质量的代码难</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h2><p>for循环是平时在写代码过程中最常用的代码了，一般写的时候都是中规中矩，比如这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印出四次i的值</span></span><br></pre></td></tr></table></figure></p>\n<p>个人觉得，要想用好一个东西就要明白它的工作原理，那么<code>for循环</code>的工作原理是什么呢？</p>\n<h2 id=\"二、工作原理\"><a href=\"#二、工作原理\" class=\"headerlink\" title=\"二、工作原理\"></a>二、工作原理</h2><p>其实对于<code>for循环</code>的工作原理之前也是有多次了解的，可是长时间不去回忆一个知识点，知识点就会变得模糊，这里再次记录一下它的工作流程<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>1.声明一个变量<code>i=0</code><br>2.判断<code>i是否小于4</code><br>3.如果满足判断条件，执行<code>console.log(i)</code>（函数体）<br>4.i++<br>5.循环步骤1-4<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/for循环的灵活运用/1.png\" alt=\"图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">图</div>\n            </figure></p>\n<h2 id=\"三、延伸\"><a href=\"#三、延伸\" class=\"headerlink\" title=\"三、延伸\"></a>三、延伸</h2><p>上面的写法都是中规中矩的，for循环有三个对应的参数，<code>以；分隔</code>，那么我可不可以省略其中某个参数呢？</p>\n<ul>\n<li>省略之前要注意，<code>；</code>是一定要加的<br>1.全都省略<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(;;)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结果：这样写相当于无限循环了，根本停不下来</p>\n<p>2.省略第一参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(;i&lt;<span class=\"number\">2</span>;)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在外面声明了一个 i ，如果不声明这个东西，那判断条件该判断啥？所以这就相当于没有省略第一个参数，当然正常情况下我还没见到省略第一个参数的情况，一般情况第一个参数都是有的</span></span><br></pre></td></tr></table></figure></p>\n<p>结果：这样也会无限循环，因为<code>i的值一直为0</code>，所以它会无限的循环下去<br>延伸：既然第三个参数省略了，我们可以再函数体里面定义它的累加规则啊，比如这样<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 6的倍数</span></span><br><span class=\"line\">\ti=i+<span class=\"number\">6</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i%<span class=\"number\">6</span>===<span class=\"number\">0</span>&amp;&amp;i&lt;<span class=\"number\">20</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好处：循环的次数大大降低，性能提升了，在这里正常情况下需要循环20次进行判断，现在的写法仅需要循环4次（第四次没有打印但是执行了函数体）</p>\n<p>仔细观察后发现，其实这种方式就是仅仅省略了第三个参数</p>\n<p>3.看看省略第三个参数还能干嘛<br>问题：<br>给定一个很大的数组，数组里面有许多证书，用JavaScript实现一个函数，要求：<br>将数组中之和为10的每一对数配对并找出，返回这些数配对后的数组。<br>例如：[11,3,8,9,7,-1,1,2,4…]<br>得到：[[11,-1],[3,7],[8,2],[9,1]…]</p>\n<p>思路：其实一般的写法是两个for循环进行潜逃的那种，这里就不展示了，这里写的是优化后的写法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">-5</span>,<span class=\"number\">9</span>,<span class=\"number\">45</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">list</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret=[];</span><br><span class=\"line\">\tlist=list.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);</span><br><span class=\"line\">\t<span class=\"comment\">/*省略的第三个参数*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>,j=list.length<span class=\"number\">-1</span>;i&lt;j;)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">let</span> a=list[i],b=list[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a+b===<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">\t\t\tret.push([a,b]);</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a+b&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(map(list)))</span><br><span class=\"line\"><span class=\"comment\">//结果：[[1,9]]</span></span><br></pre></td></tr></table></figure></p>\n<p>思路：这里影响性能的主要是太多次的<code>for循环</code>，数据量小还好，如果特别多怎么办？所以要<code>减少for循环次数</code>，先将数组从小到大排序，然后进行从两边到中间的计算，符合条件就 <code>push一次</code></p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>简简单单的一个for循环可以有不同的写法，所以说写代码简单，写出有质量的代码难</p>\n"},{"title":"http-proxy-middleware配合gulp使用时的一些坑","date":"2018-01-09T01:23:58.000Z","_content":"### 一、介绍\n在我们用gulp、webpack等方式开发项目的时候，由于会启动个本地服务器，所以如果访问后台提供的接口就是跨域了，这种情况该怎么办呢？这就涉及到了 `代理服务` 的配置，react项目的webpack的代理服务配置我之前已经写过了，[传送门~~](https://ymbo.github.io/2017/09/27/react%E4%B8%AD%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/)。\n因为使用 `http-proxy-middleware` 也遇到了多多少少的问题，网上关于遇到的问题解决办法很少或是没有提及（难道问题太弱智？），所以写下这篇文章记录一下（干货满满呦），`如果错误烦请指出~~~ `\n\n### 二、环境\n先说明我的环境：gulp + 静态html 。\ngulp主要是处理 less 文件和启动服务器方便程序调试\n\n### 三、目的\n本地的服务器为：lcoalhost:8080，\n想要请求的地址为：https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&qqmusic_ver=1298&new_json=1&remoteplace=txt.yqq.center&searchid=36602231022813110&t=0&aggr=1&cr=1&catZhida=1&lossless=0&flag_qc=0&p=1&n=20&w=%E7%AB%A5%E5%B9%B4&g_tk=1134636089&jsonpCallback=MusicJsonCallback12090870182687685&loginUin=619697451&hostUin=0&format=jsonp&inCharset=utf8&outCharset=utf-8&notice=0&platform=yqq&needNewCode=0\n\n（`  请求地址是我从QQ音乐找的，正因为这样我又遇到了另外一个 ajax的坑，最后一节有说明，所以这个地址也具有一定的教学意义 `）\n\n### 四、配置\n#### 1.gulpfile.js\n\n``` javascript\nvar gulp = require('gulp'),\n\tconnect = require('gulp-connect'),\n\tproxy = require('http-proxy-middleware'),\n\tpath = require('path'),\ngulp.task('connect', function() {\n\tconnect.server({\n\t\t/*根路径*/\n\t\troot: './dist',\n\t\t/*开启浏览器自动刷新*/\n\t\tlivereload: true,\n\t\t/*端口号*/\n\t\tport: 8080,\n\t\t/*使用代理服务*/\n\t\tmiddleware: function(connect, opt) {\n         \t\t\treturn [\n\t               \t\tproxy('/api/',  {\n\t              \t\t\ttarget: 'https://c.y.qq.com/',\n\t                  \t\t\tchangeOrigin:true,\n\t                \t\t})\n            \t\t\t]\n       \t\t }\n\t});\n});\n```\n` 说明 `  proxy配置项：\n1. 其中return 返回是一个数组，所以通过配置多个proxy返回值可以实现多重代理\n2. `changeOrigin ` 这个意思是，如果我们代理的目标地址是一个虚拟托管站点，比如 http://www.baidu.com 这种域名的形式的target项，则需要配置此项。如果target项为ip值，比如http://10.10.16.5/ 则不用配置此项\n\n#### 2.index.html\n\n``` javascript\n$.ajax({\n  type: 'GET',\n\turl: \"/api/soso/fcgi-bin/client_search_cp?ct=24&qqmusic_ver=1298&new_json=1&remoteplace=txt.yqq.center&searchid=36602231022813110&t=0&aggr=1&cr=1&catZhida=1&lossless=0&flag_qc=0&p=1&n=20&w=%E7%AB%A5%E5%B9%B4&g_tk=1134636089&jsonpCallback=MusicJsonCallback12090870182687685&loginUin=619697451&hostUin=0&format=jsonp&inCharset=utf8&outCharset=utf-8&notice=0&platform=yqq&needNewCode=0\",\n\tsuccess: function(result){\n\t\tconsole.log(result);\n\t},\n\terror:function(err){\n\t\tconsole.log(err+'失败')\n\t}\n});\n```\n\n\n#### 3.结果\n可以看到，请求失败\n![/(ㄒoㄒ)/~~](/images/http-proxy-middleware配合gulp使用时的一些坑/1.png)\n\n#### 4.解决办法\n就是在这个问题上我卡了一下午，为了能游刃有余的使用这个东西，有些基本的参数还是要非常明白的\n``` javascript\n\tpathRewrite: {\n   \t \t'^/api/' : '',     // rewrite path \n\t },\n```\n\n很多的技术文章的配置都有写这个东西，但是很少有介绍这个参数的意思。\n\n下面我们来看看不配置此项真正请求的地址：\n\n不配置这个参数请求代理的地址：https://c.y.qq.com/ `api` /soso/fcgi-bin/client_search_cp?ct=24&qqmusic_ver=1298&new_json=1&remoteplace=txt.yqq.center&searchid=36602231022813110&t=0&aggr=1&cr=1&catZhida=1&lossless=0&flag_qc=0&p=1&n=20&w=%E7%AB%A5%E5%B9%B4&g_tk=1134636089&jsonpCallback=MusicJsonCallback12090870182687685&loginUin=619697451&hostUin=0&format=jsonp&inCharset=utf8&outCharset=utf-8&notice=0&platform=yqq&needNewCode=0 \n看我标记粉色的地方，再回过头对比我们要请求的地址，是不是多个了  /api/ ?\n\n所以  `pathRewrite` 这个配置项的意思是，当有 /api/ 字段请求的时候，指定 重写 /api/ 这个字符串，这里为空。\n\n比如：\n`目标地址`：http://www.baidu.com/aaa/bbb\n\n`proxy配置`：\n``` javascript\nproxy('/api/',  {\n\ttarget: 'http://www.baidu.com/',\n\tchangeOrigin:true,\n\t\n})\n```\n\n`本地服务器`：http://localhost:8888\n\n`ajax`：\n``` javascript\n$.ajax({\n\ttype: 'GET',\n\turl: \"/api/aaa/bbb\",\n\tsuccess: function(result){\n\t\tconsole.log(result);\n\t},\n\terror:function(err){\n\t\tconsole.log(err+'失败')\n\t}\n});\n```\n\n`但是实际上请求的是 http://www.baidu.com/api/aaa/bbb 这个地址 ！！！！！`。\n\n所以第一种解决办法是配置重写路径\n``` javascript\nproxy('/api/',  {\n\ttarget: 'http://www.baidu.com/',\n\tchangeOrigin:true,\n\tpathRewrite: {\n   \t \t'^/api/' : '',     // rewrite path \n\t },\n})\n```\n第二种解决办法就是利用已有路径\n\n``` javascript\nproxy('/aaa/',  {\n\ttarget: 'http://www.baidu.com/',\n\tchangeOrigin:true,\n})\n```\n\n关于 `http-proxy-middleware` 我遇到的问题，已经说完了。下面来说 ajax的一个坑\n\n### 五、ajax\n\n用jq的 ajax请求一个地址，如果返回的数据格式与ajax里预期格式的配置不一样，那么就会在 error 函数里面返回后台提供的数据 ，具体例子就不写了，很简单，可以试一试","source":"_posts/http-proxy-middleware配合gulp使用时的一些坑.md","raw":"---\ntitle: http-proxy-middleware配合gulp使用时的一些坑\ndate: 2018-01-09 09:23:58\ntags: ['gulp','ajax','跨域','代理']\n---\n### 一、介绍\n在我们用gulp、webpack等方式开发项目的时候，由于会启动个本地服务器，所以如果访问后台提供的接口就是跨域了，这种情况该怎么办呢？这就涉及到了 `代理服务` 的配置，react项目的webpack的代理服务配置我之前已经写过了，[传送门~~](https://ymbo.github.io/2017/09/27/react%E4%B8%AD%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/)。\n因为使用 `http-proxy-middleware` 也遇到了多多少少的问题，网上关于遇到的问题解决办法很少或是没有提及（难道问题太弱智？），所以写下这篇文章记录一下（干货满满呦），`如果错误烦请指出~~~ `\n\n### 二、环境\n先说明我的环境：gulp + 静态html 。\ngulp主要是处理 less 文件和启动服务器方便程序调试\n\n### 三、目的\n本地的服务器为：lcoalhost:8080，\n想要请求的地址为：https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&qqmusic_ver=1298&new_json=1&remoteplace=txt.yqq.center&searchid=36602231022813110&t=0&aggr=1&cr=1&catZhida=1&lossless=0&flag_qc=0&p=1&n=20&w=%E7%AB%A5%E5%B9%B4&g_tk=1134636089&jsonpCallback=MusicJsonCallback12090870182687685&loginUin=619697451&hostUin=0&format=jsonp&inCharset=utf8&outCharset=utf-8&notice=0&platform=yqq&needNewCode=0\n\n（`  请求地址是我从QQ音乐找的，正因为这样我又遇到了另外一个 ajax的坑，最后一节有说明，所以这个地址也具有一定的教学意义 `）\n\n### 四、配置\n#### 1.gulpfile.js\n\n``` javascript\nvar gulp = require('gulp'),\n\tconnect = require('gulp-connect'),\n\tproxy = require('http-proxy-middleware'),\n\tpath = require('path'),\ngulp.task('connect', function() {\n\tconnect.server({\n\t\t/*根路径*/\n\t\troot: './dist',\n\t\t/*开启浏览器自动刷新*/\n\t\tlivereload: true,\n\t\t/*端口号*/\n\t\tport: 8080,\n\t\t/*使用代理服务*/\n\t\tmiddleware: function(connect, opt) {\n         \t\t\treturn [\n\t               \t\tproxy('/api/',  {\n\t              \t\t\ttarget: 'https://c.y.qq.com/',\n\t                  \t\t\tchangeOrigin:true,\n\t                \t\t})\n            \t\t\t]\n       \t\t }\n\t});\n});\n```\n` 说明 `  proxy配置项：\n1. 其中return 返回是一个数组，所以通过配置多个proxy返回值可以实现多重代理\n2. `changeOrigin ` 这个意思是，如果我们代理的目标地址是一个虚拟托管站点，比如 http://www.baidu.com 这种域名的形式的target项，则需要配置此项。如果target项为ip值，比如http://10.10.16.5/ 则不用配置此项\n\n#### 2.index.html\n\n``` javascript\n$.ajax({\n  type: 'GET',\n\turl: \"/api/soso/fcgi-bin/client_search_cp?ct=24&qqmusic_ver=1298&new_json=1&remoteplace=txt.yqq.center&searchid=36602231022813110&t=0&aggr=1&cr=1&catZhida=1&lossless=0&flag_qc=0&p=1&n=20&w=%E7%AB%A5%E5%B9%B4&g_tk=1134636089&jsonpCallback=MusicJsonCallback12090870182687685&loginUin=619697451&hostUin=0&format=jsonp&inCharset=utf8&outCharset=utf-8&notice=0&platform=yqq&needNewCode=0\",\n\tsuccess: function(result){\n\t\tconsole.log(result);\n\t},\n\terror:function(err){\n\t\tconsole.log(err+'失败')\n\t}\n});\n```\n\n\n#### 3.结果\n可以看到，请求失败\n![/(ㄒoㄒ)/~~](/images/http-proxy-middleware配合gulp使用时的一些坑/1.png)\n\n#### 4.解决办法\n就是在这个问题上我卡了一下午，为了能游刃有余的使用这个东西，有些基本的参数还是要非常明白的\n``` javascript\n\tpathRewrite: {\n   \t \t'^/api/' : '',     // rewrite path \n\t },\n```\n\n很多的技术文章的配置都有写这个东西，但是很少有介绍这个参数的意思。\n\n下面我们来看看不配置此项真正请求的地址：\n\n不配置这个参数请求代理的地址：https://c.y.qq.com/ `api` /soso/fcgi-bin/client_search_cp?ct=24&qqmusic_ver=1298&new_json=1&remoteplace=txt.yqq.center&searchid=36602231022813110&t=0&aggr=1&cr=1&catZhida=1&lossless=0&flag_qc=0&p=1&n=20&w=%E7%AB%A5%E5%B9%B4&g_tk=1134636089&jsonpCallback=MusicJsonCallback12090870182687685&loginUin=619697451&hostUin=0&format=jsonp&inCharset=utf8&outCharset=utf-8&notice=0&platform=yqq&needNewCode=0 \n看我标记粉色的地方，再回过头对比我们要请求的地址，是不是多个了  /api/ ?\n\n所以  `pathRewrite` 这个配置项的意思是，当有 /api/ 字段请求的时候，指定 重写 /api/ 这个字符串，这里为空。\n\n比如：\n`目标地址`：http://www.baidu.com/aaa/bbb\n\n`proxy配置`：\n``` javascript\nproxy('/api/',  {\n\ttarget: 'http://www.baidu.com/',\n\tchangeOrigin:true,\n\t\n})\n```\n\n`本地服务器`：http://localhost:8888\n\n`ajax`：\n``` javascript\n$.ajax({\n\ttype: 'GET',\n\turl: \"/api/aaa/bbb\",\n\tsuccess: function(result){\n\t\tconsole.log(result);\n\t},\n\terror:function(err){\n\t\tconsole.log(err+'失败')\n\t}\n});\n```\n\n`但是实际上请求的是 http://www.baidu.com/api/aaa/bbb 这个地址 ！！！！！`。\n\n所以第一种解决办法是配置重写路径\n``` javascript\nproxy('/api/',  {\n\ttarget: 'http://www.baidu.com/',\n\tchangeOrigin:true,\n\tpathRewrite: {\n   \t \t'^/api/' : '',     // rewrite path \n\t },\n})\n```\n第二种解决办法就是利用已有路径\n\n``` javascript\nproxy('/aaa/',  {\n\ttarget: 'http://www.baidu.com/',\n\tchangeOrigin:true,\n})\n```\n\n关于 `http-proxy-middleware` 我遇到的问题，已经说完了。下面来说 ajax的一个坑\n\n### 五、ajax\n\n用jq的 ajax请求一个地址，如果返回的数据格式与ajax里预期格式的配置不一样，那么就会在 error 函数里面返回后台提供的数据 ，具体例子就不写了，很简单，可以试一试","slug":"http-proxy-middleware配合gulp使用时的一些坑","published":1,"updated":"2018-09-28T02:53:25.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kgc000bvps6v4rd695z","content":"<h3 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h3><p>在我们用gulp、webpack等方式开发项目的时候，由于会启动个本地服务器，所以如果访问后台提供的接口就是跨域了，这种情况该怎么办呢？这就涉及到了 <code>代理服务</code> 的配置，react项目的webpack的代理服务配置我之前已经写过了，<a href=\"https://ymbo.github.io/2017/09/27/react%E4%B8%AD%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/\" target=\"_blank\" rel=\"noopener\">传送门~~</a>。<br>因为使用 <code>http-proxy-middleware</code> 也遇到了多多少少的问题，网上关于遇到的问题解决办法很少或是没有提及（难道问题太弱智？），所以写下这篇文章记录一下（干货满满呦），<code>如果错误烦请指出~~~</code></p>\n<h3 id=\"二、环境\"><a href=\"#二、环境\" class=\"headerlink\" title=\"二、环境\"></a>二、环境</h3><p>先说明我的环境：gulp + 静态html 。<br>gulp主要是处理 less 文件和启动服务器方便程序调试</p>\n<h3 id=\"三、目的\"><a href=\"#三、目的\" class=\"headerlink\" title=\"三、目的\"></a>三、目的</h3><p>本地的服务器为：lcoalhost:8080，<br>想要请求的地址为：<a href=\"https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;searchid=36602231022813110&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=20&amp;w=%E7%AB%A5%E5%B9%B4&amp;g_tk=1134636089&amp;jsonpCallback=MusicJsonCallback12090870182687685&amp;loginUin=619697451&amp;hostUin=0&amp;format=jsonp&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0\" target=\"_blank\" rel=\"noopener\">https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;searchid=36602231022813110&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=20&amp;w=%E7%AB%A5%E5%B9%B4&amp;g_tk=1134636089&amp;jsonpCallback=MusicJsonCallback12090870182687685&amp;loginUin=619697451&amp;hostUin=0&amp;format=jsonp&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0</a></p>\n<p>（<code>请求地址是我从QQ音乐找的，正因为这样我又遇到了另外一个 ajax的坑，最后一节有说明，所以这个地址也具有一定的教学意义</code>）</p>\n<h3 id=\"四、配置\"><a href=\"#四、配置\" class=\"headerlink\" title=\"四、配置\"></a>四、配置</h3><h4 id=\"1-gulpfile-js\"><a href=\"#1-gulpfile-js\" class=\"headerlink\" title=\"1.gulpfile.js\"></a>1.gulpfile.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">\tconnect = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-connect'</span>),</span><br><span class=\"line\">\tproxy = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy-middleware'</span>),</span><br><span class=\"line\">\tpath = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>),</span><br><span class=\"line\">gulp.task(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tconnect.server(&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*根路径*/</span></span><br><span class=\"line\">\t\troot: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*开启浏览器自动刷新*/</span></span><br><span class=\"line\">\t\tlivereload: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*端口号*/</span></span><br><span class=\"line\">\t\tport: <span class=\"number\">8080</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*使用代理服务*/</span></span><br><span class=\"line\">\t\tmiddleware: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">connect, opt</span>) </span>&#123;</span><br><span class=\"line\">         \t\t\t<span class=\"keyword\">return</span> [</span><br><span class=\"line\">\t               \t\tproxy(<span class=\"string\">'/api/'</span>,  &#123;</span><br><span class=\"line\">\t              \t\t\ttarget: <span class=\"string\">'https://c.y.qq.com/'</span>,</span><br><span class=\"line\">\t                  \t\t\tchangeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t                \t\t&#125;)</span><br><span class=\"line\">            \t\t\t]</span><br><span class=\"line\">       \t\t &#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>说明</code>  proxy配置项：</p>\n<ol>\n<li>其中return 返回是一个数组，所以通过配置多个proxy返回值可以实现多重代理</li>\n<li><code>changeOrigin</code> 这个意思是，如果我们代理的目标地址是一个虚拟托管站点，比如 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a> 这种域名的形式的target项，则需要配置此项。如果target项为ip值，比如<a href=\"http://10.10.16.5/\" target=\"_blank\" rel=\"noopener\">http://10.10.16.5/</a> 则不用配置此项</li>\n</ol>\n<h4 id=\"2-index-html\"><a href=\"#2-index-html\" class=\"headerlink\" title=\"2.index.html\"></a>2.index.html</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">\turl: <span class=\"string\">\"/api/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;searchid=36602231022813110&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=20&amp;w=%E7%AB%A5%E5%B9%B4&amp;g_tk=1134636089&amp;jsonpCallback=MusicJsonCallback12090870182687685&amp;loginUin=619697451&amp;hostUin=0&amp;format=jsonp&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0\"</span>,</span><br><span class=\"line\">\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\terror:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(err+<span class=\"string\">'失败'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-结果\"><a href=\"#3-结果\" class=\"headerlink\" title=\"3.结果\"></a>3.结果</h4><p>可以看到，请求失败<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/http-proxy-middleware配合gulp使用时的一些坑/1.png\" alt=\"/(ㄒoㄒ)/~~\" title=\"\">\n                </div>\n                <div class=\"image-caption\">/(ㄒoㄒ)/~~</div>\n            </figure></p>\n<h4 id=\"4-解决办法\"><a href=\"#4-解决办法\" class=\"headerlink\" title=\"4.解决办法\"></a>4.解决办法</h4><p>就是在这个问题上我卡了一下午，为了能游刃有余的使用这个东西，有些基本的参数还是要非常明白的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pathRewrite: &#123;</span><br><span class=\"line\">  \t \t<span class=\"string\">'^/api/'</span> : <span class=\"string\">''</span>,     <span class=\"comment\">// rewrite path </span></span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>很多的技术文章的配置都有写这个东西，但是很少有介绍这个参数的意思。</p>\n<p>下面我们来看看不配置此项真正请求的地址：</p>\n<p>不配置这个参数请求代理的地址：<a href=\"https://c.y.qq.com/\" target=\"_blank\" rel=\"noopener\">https://c.y.qq.com/</a> <code>api</code> /soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;searchid=36602231022813110&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=20&amp;w=%E7%AB%A5%E5%B9%B4&amp;g_tk=1134636089&amp;jsonpCallback=MusicJsonCallback12090870182687685&amp;loginUin=619697451&amp;hostUin=0&amp;format=jsonp&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0<br>看我标记粉色的地方，再回过头对比我们要请求的地址，是不是多个了  /api/ ?</p>\n<p>所以  <code>pathRewrite</code> 这个配置项的意思是，当有 /api/ 字段请求的时候，指定 重写 /api/ 这个字符串，这里为空。</p>\n<p>比如：<br><code>目标地址</code>：<a href=\"http://www.baidu.com/aaa/bbb\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/aaa/bbb</a></p>\n<p><code>proxy配置</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy(<span class=\"string\">'/api/'</span>,  &#123;</span><br><span class=\"line\">\ttarget: <span class=\"string\">'http://www.baidu.com/'</span>,</span><br><span class=\"line\">\tchangeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><code>本地服务器</code>：<a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener\">http://localhost:8888</a></p>\n<p><code>ajax</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\ttype: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">\turl: <span class=\"string\">\"/api/aaa/bbb\"</span>,</span><br><span class=\"line\">\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\terror:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(err+<span class=\"string\">'失败'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><code>但是实际上请求的是 http://www.baidu.com/api/aaa/bbb 这个地址 ！！！！！</code>。</p>\n<p>所以第一种解决办法是配置重写路径<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy(<span class=\"string\">'/api/'</span>,  &#123;</span><br><span class=\"line\">\ttarget: <span class=\"string\">'http://www.baidu.com/'</span>,</span><br><span class=\"line\">\tchangeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tpathRewrite: &#123;</span><br><span class=\"line\">   \t \t<span class=\"string\">'^/api/'</span> : <span class=\"string\">''</span>,     <span class=\"comment\">// rewrite path </span></span><br><span class=\"line\">\t &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>第二种解决办法就是利用已有路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy(<span class=\"string\">'/aaa/'</span>,  &#123;</span><br><span class=\"line\">\ttarget: <span class=\"string\">'http://www.baidu.com/'</span>,</span><br><span class=\"line\">\tchangeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>关于 <code>http-proxy-middleware</code> 我遇到的问题，已经说完了。下面来说 ajax的一个坑</p>\n<h3 id=\"五、ajax\"><a href=\"#五、ajax\" class=\"headerlink\" title=\"五、ajax\"></a>五、ajax</h3><p>用jq的 ajax请求一个地址，如果返回的数据格式与ajax里预期格式的配置不一样，那么就会在 error 函数里面返回后台提供的数据 ，具体例子就不写了，很简单，可以试一试</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h3><p>在我们用gulp、webpack等方式开发项目的时候，由于会启动个本地服务器，所以如果访问后台提供的接口就是跨域了，这种情况该怎么办呢？这就涉及到了 <code>代理服务</code> 的配置，react项目的webpack的代理服务配置我之前已经写过了，<a href=\"https://ymbo.github.io/2017/09/27/react%E4%B8%AD%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/\" target=\"_blank\" rel=\"noopener\">传送门~~</a>。<br>因为使用 <code>http-proxy-middleware</code> 也遇到了多多少少的问题，网上关于遇到的问题解决办法很少或是没有提及（难道问题太弱智？），所以写下这篇文章记录一下（干货满满呦），<code>如果错误烦请指出~~~</code></p>\n<h3 id=\"二、环境\"><a href=\"#二、环境\" class=\"headerlink\" title=\"二、环境\"></a>二、环境</h3><p>先说明我的环境：gulp + 静态html 。<br>gulp主要是处理 less 文件和启动服务器方便程序调试</p>\n<h3 id=\"三、目的\"><a href=\"#三、目的\" class=\"headerlink\" title=\"三、目的\"></a>三、目的</h3><p>本地的服务器为：lcoalhost:8080，<br>想要请求的地址为：<a href=\"https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;searchid=36602231022813110&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=20&amp;w=%E7%AB%A5%E5%B9%B4&amp;g_tk=1134636089&amp;jsonpCallback=MusicJsonCallback12090870182687685&amp;loginUin=619697451&amp;hostUin=0&amp;format=jsonp&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0\" target=\"_blank\" rel=\"noopener\">https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;searchid=36602231022813110&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=20&amp;w=%E7%AB%A5%E5%B9%B4&amp;g_tk=1134636089&amp;jsonpCallback=MusicJsonCallback12090870182687685&amp;loginUin=619697451&amp;hostUin=0&amp;format=jsonp&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0</a></p>\n<p>（<code>请求地址是我从QQ音乐找的，正因为这样我又遇到了另外一个 ajax的坑，最后一节有说明，所以这个地址也具有一定的教学意义</code>）</p>\n<h3 id=\"四、配置\"><a href=\"#四、配置\" class=\"headerlink\" title=\"四、配置\"></a>四、配置</h3><h4 id=\"1-gulpfile-js\"><a href=\"#1-gulpfile-js\" class=\"headerlink\" title=\"1.gulpfile.js\"></a>1.gulpfile.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</span><br><span class=\"line\">\tconnect = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-connect'</span>),</span><br><span class=\"line\">\tproxy = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy-middleware'</span>),</span><br><span class=\"line\">\tpath = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>),</span><br><span class=\"line\">gulp.task(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tconnect.server(&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*根路径*/</span></span><br><span class=\"line\">\t\troot: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*开启浏览器自动刷新*/</span></span><br><span class=\"line\">\t\tlivereload: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*端口号*/</span></span><br><span class=\"line\">\t\tport: <span class=\"number\">8080</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*使用代理服务*/</span></span><br><span class=\"line\">\t\tmiddleware: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">connect, opt</span>) </span>&#123;</span><br><span class=\"line\">         \t\t\t<span class=\"keyword\">return</span> [</span><br><span class=\"line\">\t               \t\tproxy(<span class=\"string\">'/api/'</span>,  &#123;</span><br><span class=\"line\">\t              \t\t\ttarget: <span class=\"string\">'https://c.y.qq.com/'</span>,</span><br><span class=\"line\">\t                  \t\t\tchangeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t                \t\t&#125;)</span><br><span class=\"line\">            \t\t\t]</span><br><span class=\"line\">       \t\t &#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>说明</code>  proxy配置项：</p>\n<ol>\n<li>其中return 返回是一个数组，所以通过配置多个proxy返回值可以实现多重代理</li>\n<li><code>changeOrigin</code> 这个意思是，如果我们代理的目标地址是一个虚拟托管站点，比如 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a> 这种域名的形式的target项，则需要配置此项。如果target项为ip值，比如<a href=\"http://10.10.16.5/\" target=\"_blank\" rel=\"noopener\">http://10.10.16.5/</a> 则不用配置此项</li>\n</ol>\n<h4 id=\"2-index-html\"><a href=\"#2-index-html\" class=\"headerlink\" title=\"2.index.html\"></a>2.index.html</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">\turl: <span class=\"string\">\"/api/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;searchid=36602231022813110&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=20&amp;w=%E7%AB%A5%E5%B9%B4&amp;g_tk=1134636089&amp;jsonpCallback=MusicJsonCallback12090870182687685&amp;loginUin=619697451&amp;hostUin=0&amp;format=jsonp&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0\"</span>,</span><br><span class=\"line\">\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\terror:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(err+<span class=\"string\">'失败'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-结果\"><a href=\"#3-结果\" class=\"headerlink\" title=\"3.结果\"></a>3.结果</h4><p>可以看到，请求失败<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/http-proxy-middleware配合gulp使用时的一些坑/1.png\" alt=\"/(ㄒoㄒ)/~~\" title=\"\">\n                </div>\n                <div class=\"image-caption\">/(ㄒoㄒ)/~~</div>\n            </figure></p>\n<h4 id=\"4-解决办法\"><a href=\"#4-解决办法\" class=\"headerlink\" title=\"4.解决办法\"></a>4.解决办法</h4><p>就是在这个问题上我卡了一下午，为了能游刃有余的使用这个东西，有些基本的参数还是要非常明白的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pathRewrite: &#123;</span><br><span class=\"line\">  \t \t<span class=\"string\">'^/api/'</span> : <span class=\"string\">''</span>,     <span class=\"comment\">// rewrite path </span></span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>很多的技术文章的配置都有写这个东西，但是很少有介绍这个参数的意思。</p>\n<p>下面我们来看看不配置此项真正请求的地址：</p>\n<p>不配置这个参数请求代理的地址：<a href=\"https://c.y.qq.com/\" target=\"_blank\" rel=\"noopener\">https://c.y.qq.com/</a> <code>api</code> /soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.center&amp;searchid=36602231022813110&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=20&amp;w=%E7%AB%A5%E5%B9%B4&amp;g_tk=1134636089&amp;jsonpCallback=MusicJsonCallback12090870182687685&amp;loginUin=619697451&amp;hostUin=0&amp;format=jsonp&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq&amp;needNewCode=0<br>看我标记粉色的地方，再回过头对比我们要请求的地址，是不是多个了  /api/ ?</p>\n<p>所以  <code>pathRewrite</code> 这个配置项的意思是，当有 /api/ 字段请求的时候，指定 重写 /api/ 这个字符串，这里为空。</p>\n<p>比如：<br><code>目标地址</code>：<a href=\"http://www.baidu.com/aaa/bbb\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/aaa/bbb</a></p>\n<p><code>proxy配置</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy(<span class=\"string\">'/api/'</span>,  &#123;</span><br><span class=\"line\">\ttarget: <span class=\"string\">'http://www.baidu.com/'</span>,</span><br><span class=\"line\">\tchangeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><code>本地服务器</code>：<a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener\">http://localhost:8888</a></p>\n<p><code>ajax</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\ttype: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">\turl: <span class=\"string\">\"/api/aaa/bbb\"</span>,</span><br><span class=\"line\">\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\terror:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(err+<span class=\"string\">'失败'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><code>但是实际上请求的是 http://www.baidu.com/api/aaa/bbb 这个地址 ！！！！！</code>。</p>\n<p>所以第一种解决办法是配置重写路径<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy(<span class=\"string\">'/api/'</span>,  &#123;</span><br><span class=\"line\">\ttarget: <span class=\"string\">'http://www.baidu.com/'</span>,</span><br><span class=\"line\">\tchangeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tpathRewrite: &#123;</span><br><span class=\"line\">   \t \t<span class=\"string\">'^/api/'</span> : <span class=\"string\">''</span>,     <span class=\"comment\">// rewrite path </span></span><br><span class=\"line\">\t &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>第二种解决办法就是利用已有路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy(<span class=\"string\">'/aaa/'</span>,  &#123;</span><br><span class=\"line\">\ttarget: <span class=\"string\">'http://www.baidu.com/'</span>,</span><br><span class=\"line\">\tchangeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>关于 <code>http-proxy-middleware</code> 我遇到的问题，已经说完了。下面来说 ajax的一个坑</p>\n<h3 id=\"五、ajax\"><a href=\"#五、ajax\" class=\"headerlink\" title=\"五、ajax\"></a>五、ajax</h3><p>用jq的 ajax请求一个地址，如果返回的数据格式与ajax里预期格式的配置不一样，那么就会在 error 函数里面返回后台提供的数据 ，具体例子就不写了，很简单，可以试一试</p>\n"},{"title":"javascript的数据属性和访问器属性","date":"2018-02-28T03:25:55.000Z","_content":"## 一、数据属性\n### 1.基本认识\n#### 1.1概念\n\n数据属性包含一个数据值的位置，在这个位置可以读取和写入值\n\n#### 数据属性有4个描述其行为的特性\n1. [[Configurable]] : 表示能否通过 delte 删除属性从而重新定义属性，能肉修改属性的特性，或者能把属性修改为访问器属性。默认true\n2. [[Enumerable]] : 表示能否通过 for-in 循环返回属性。 默认 true\n3. [[Writable]] : 表示能否修改属性的值 。 默认 true\n4. [[Value]] : 包含这个属性的数据值。 默认 undefined\n\n> tip：为了表示特性是内部值，该规范把他们放在了两对括号中\n\n### 2.对数据属性的操作\n必须使用 ECMAScript 5 的 ` Object.defineProperty() ` 方法\n三个参数\n1. 属性所在的对象\n2. 属性的名字\n3. 描述符对象\n\n####  栗子\n``` javascript\nvar person = {\n\tname:'y'\n}\n//禁止修改属性值\nObject.defineProperty(person,\"name\",{\n\twritable:false\n})\nconsole.log(person.name) \t\t// y\n//尝试修改属性\nperson.name='b';\nconsole.log(person.name) \t\t//y\n\n//可以看到禁止修改属性的值后，修改属性值无效\n\n```\n####  2.1注意！！！\n这四个数据属性中，` configurable ` 是比较特殊的，一旦把属性定义为不可配置的，就不能再把它变回可配置了，此时再调用 ` Object.defineProperty ` 方法修改 `除writable之外的特性` 都会导致失败。\n``` javascript\nvar b={\n\tage:0\n}\n//定义为不可配置\nObject.defineProperty(b,'age',{\n\tconfigurable:false\n})\n//尝试删除配置\ndelete b.age\nconsole.log(b.age)\n// 成功打印0\n\n//尝试修改enumerable\nObject.defineProperty(b,\"age\",{\n\tenumerable:false\n})\n/* 报错：Uncaught TypeError: Cannot redefine property: age\n    at Function.defineProperty (<anonymous>)\n    at <anonymous>:3:8 */\n\n//尝试修改writable\nObject.defineProperty(b,\"age\",{\n\twritable:false\n})\n/*修改成功，不会报错*/\n\n//尝试修改value\nObject.defineProperty(b,\"age\",{\n\tvalue:1\n})\n/*报错：\nVM17512:1 Uncaught TypeError: Cannot redefine property: age\n    at Function.defineProperty (<anonymous>)\n    at <anonymous>:1:8\n*/\n```\n> tip:上面的操作只针对于 b对象的age 属性，所以此时我再添加一个属性也是成功的，比如\n``` javascript\nb.name='m';\nconsole.log(b)\n// 输出 {age: 0, name: \"m\"}\n```\n> tip2:\nES5有三个操作会忽略enumerable为false的属性。\n\n> 1. for...in循环：只遍历对象自身的和继承的可枚举的属性\n> 2. Object.keys()：返回对象自身的所有可枚举的属性的键名\n> 3. JSON.stringify()：只串行化对象自身的可枚举的属性\n\n## 二、访问器属性\n### 1.基本认识\n#### 概念\n访问器属性不包含数据值。它包含一对getter和setter函数。当读取访问器属性时，会调用getter函数并返回有效值；\n当写入访问器属性时，会调用setter函数并传入新值，setter函数负责处理数据。\n\n#### 访问器属性的四个特性\n1. [[Configurable]]：默认为true。表示能否通过delete删除属性从而重新定义属性，能否修改属性特性，或者能否把属性修改为访问器属性；\n2. [[Enumerable]]：默认为true。表示能否通过for-in循环返回属性；\n3. [[Get]]：读取属性时调用的函数，默认为undefined；\n4. [[Set]]：写入属性时调用的函数，默认为undefined；\n\n### 2.对访问器属性的操作\n> tip :\n> 1.当使用了getter或setter方法，不允许使用 ` writable ` 和 ` value ` 这两个属性。\n> 2.get和set 函数不是必须的\n> 3.先看这种写法：\n> ![特别要注意这种写法，容易写错！](/images/javascript的数据属性和访问器属性/1.png)\n> 可以看到 ` 堆栈溢出 ` 了，` 原因是因为如果在get里return this.year ，这样如果我们在外面 book .year时，就会运行get函数，而get函数里面执行到this.year时又会运行get函数，造成死循环。正常写法是利用一个中间值来设置某一个属性，看下面代码\n![正确写法](/images/javascript的数据属性和访问器属性/2.png)\n_year 前面的下划线是一种常用的记号，用于表示只能通过对象方法访问的属性。\n一般上面上面代码目的是 设置一个属性的值会导致其他属性发生变化，就不用把属性单拿出来计算了，很方便\n\n## 三、总结\n### 1.到底怎么判断是数据属性还是访问器属性\n\n可以通过 Object.getOwnPropertyName()方法获取到所有实例中的属性，包括不可枚举的属性。\n然后，使用Object.getOwnPropertyDescriptor(）方法获取到每一个属性的描述符，如果描述符中有get/set方法，说明它是访问器方法，否则它就是数据属性。\n其实由于两种属性各自的4种特征都是都不一样的，如果一个对象的属性描述符里含有一个单独的特征就可以判断是什么类型的属性，比如\n``` javascript\nvar book={};\nObject.defineProperty(book,'age',{\n\tvalue:5\n})\n```\n` 描述符里我单独定义了value属性，而value属性仅仅输入数据属性，所以可以判断出 age属于数据属性 `\n\n### 2.定义多个属性\n\nObject.defineProperty()这种写法每次只能定义一个属性，那么可以通过 `Object.defineProperties` 来定义多个属性\n定义多个属性：\n`请注意下面图片内代码是有问题的，这是《js高级程序设计》 里的例子`\n![定义多个属性](/images/javascript的数据属性和访问器属性/3.png)\n这个方法定义多个属性没问题，但是也可以从上面的图看出来，定义的访问器属性year的set方法里面并没有生效，这俩属于数据属性，` 原因是因为 定义的_year属性和edition属性不能往里面写值了 `。\n\n自己解决历程：我自己猜想原因可能是这样，因为_year和edition写不进去值了，所以设置 enumerable 为true。我尝试修改了一下，如下\n![给两个数据属性添加了writable(可读写 )特征](/images/javascript的数据属性和访问器属性/4.png)\n这样运行成功。为了验证猜想，做了如下例子：\n\n![所有特性](/images/javascript的数据属性和访问器属性/5.png)；\n\n可以看到只要是用 `Object.defineProperties()`  定义的对象的属性，那么定义过的每个属性描述符的4个默认属性（除了set和get外）都默认都是 false\n\n总结：使用 `Object.defineProperties()` 方法来定义多个属性的时候，每个属性的描述符里的属性都是默认的false(除了set和get外)，set或者get没定义的话默认 undefined\n\n## 四、实际应用\n\n介绍了这个东西后，在实际中我该在什么情况用呢？\n\n**数据双向绑定 （Module<==>View）**\n数据双向绑定就是通过 `Object.defineProperty` 实现的，我们来手写一个数据绑定\n``` html\n<input class=\"inputText\" type=\"text\" />\n<p class=\"text\"></p>\n```\t\n``` javascript\nvar inputText=document.querySelector('.inputText');\nvar text=document.querySelector('.text');\n//module\nvar obj={_txt:null};\nObject.defineProperty(obj,'txt',{\n\tget:function(){\n\t\treturn this._txt;\n\t},\n\tset:function(value){\n\t\tthis._txt=value;\n\t\ttext.innerHTML=value;\n\t\tinputText.value=value\n\t}\n})\n//view\ninputText.addEventListener('input',function(e){\n\tconst text=e.target.value;\n\tobj.txt=text;\n},false)\n```\t\n此时在input输入值的时候p的内容和obj.txt内容会变，在浏览器console中更改obj.txt的值，input和p也会变\n","source":"_posts/javascript的数据属性和访问器属性.md","raw":"---\ntitle: javascript的数据属性和访问器属性\ndate: 2018-02-28 11:25:55\ntags: javascript\n---\n## 一、数据属性\n### 1.基本认识\n#### 1.1概念\n\n数据属性包含一个数据值的位置，在这个位置可以读取和写入值\n\n#### 数据属性有4个描述其行为的特性\n1. [[Configurable]] : 表示能否通过 delte 删除属性从而重新定义属性，能肉修改属性的特性，或者能把属性修改为访问器属性。默认true\n2. [[Enumerable]] : 表示能否通过 for-in 循环返回属性。 默认 true\n3. [[Writable]] : 表示能否修改属性的值 。 默认 true\n4. [[Value]] : 包含这个属性的数据值。 默认 undefined\n\n> tip：为了表示特性是内部值，该规范把他们放在了两对括号中\n\n### 2.对数据属性的操作\n必须使用 ECMAScript 5 的 ` Object.defineProperty() ` 方法\n三个参数\n1. 属性所在的对象\n2. 属性的名字\n3. 描述符对象\n\n####  栗子\n``` javascript\nvar person = {\n\tname:'y'\n}\n//禁止修改属性值\nObject.defineProperty(person,\"name\",{\n\twritable:false\n})\nconsole.log(person.name) \t\t// y\n//尝试修改属性\nperson.name='b';\nconsole.log(person.name) \t\t//y\n\n//可以看到禁止修改属性的值后，修改属性值无效\n\n```\n####  2.1注意！！！\n这四个数据属性中，` configurable ` 是比较特殊的，一旦把属性定义为不可配置的，就不能再把它变回可配置了，此时再调用 ` Object.defineProperty ` 方法修改 `除writable之外的特性` 都会导致失败。\n``` javascript\nvar b={\n\tage:0\n}\n//定义为不可配置\nObject.defineProperty(b,'age',{\n\tconfigurable:false\n})\n//尝试删除配置\ndelete b.age\nconsole.log(b.age)\n// 成功打印0\n\n//尝试修改enumerable\nObject.defineProperty(b,\"age\",{\n\tenumerable:false\n})\n/* 报错：Uncaught TypeError: Cannot redefine property: age\n    at Function.defineProperty (<anonymous>)\n    at <anonymous>:3:8 */\n\n//尝试修改writable\nObject.defineProperty(b,\"age\",{\n\twritable:false\n})\n/*修改成功，不会报错*/\n\n//尝试修改value\nObject.defineProperty(b,\"age\",{\n\tvalue:1\n})\n/*报错：\nVM17512:1 Uncaught TypeError: Cannot redefine property: age\n    at Function.defineProperty (<anonymous>)\n    at <anonymous>:1:8\n*/\n```\n> tip:上面的操作只针对于 b对象的age 属性，所以此时我再添加一个属性也是成功的，比如\n``` javascript\nb.name='m';\nconsole.log(b)\n// 输出 {age: 0, name: \"m\"}\n```\n> tip2:\nES5有三个操作会忽略enumerable为false的属性。\n\n> 1. for...in循环：只遍历对象自身的和继承的可枚举的属性\n> 2. Object.keys()：返回对象自身的所有可枚举的属性的键名\n> 3. JSON.stringify()：只串行化对象自身的可枚举的属性\n\n## 二、访问器属性\n### 1.基本认识\n#### 概念\n访问器属性不包含数据值。它包含一对getter和setter函数。当读取访问器属性时，会调用getter函数并返回有效值；\n当写入访问器属性时，会调用setter函数并传入新值，setter函数负责处理数据。\n\n#### 访问器属性的四个特性\n1. [[Configurable]]：默认为true。表示能否通过delete删除属性从而重新定义属性，能否修改属性特性，或者能否把属性修改为访问器属性；\n2. [[Enumerable]]：默认为true。表示能否通过for-in循环返回属性；\n3. [[Get]]：读取属性时调用的函数，默认为undefined；\n4. [[Set]]：写入属性时调用的函数，默认为undefined；\n\n### 2.对访问器属性的操作\n> tip :\n> 1.当使用了getter或setter方法，不允许使用 ` writable ` 和 ` value ` 这两个属性。\n> 2.get和set 函数不是必须的\n> 3.先看这种写法：\n> ![特别要注意这种写法，容易写错！](/images/javascript的数据属性和访问器属性/1.png)\n> 可以看到 ` 堆栈溢出 ` 了，` 原因是因为如果在get里return this.year ，这样如果我们在外面 book .year时，就会运行get函数，而get函数里面执行到this.year时又会运行get函数，造成死循环。正常写法是利用一个中间值来设置某一个属性，看下面代码\n![正确写法](/images/javascript的数据属性和访问器属性/2.png)\n_year 前面的下划线是一种常用的记号，用于表示只能通过对象方法访问的属性。\n一般上面上面代码目的是 设置一个属性的值会导致其他属性发生变化，就不用把属性单拿出来计算了，很方便\n\n## 三、总结\n### 1.到底怎么判断是数据属性还是访问器属性\n\n可以通过 Object.getOwnPropertyName()方法获取到所有实例中的属性，包括不可枚举的属性。\n然后，使用Object.getOwnPropertyDescriptor(）方法获取到每一个属性的描述符，如果描述符中有get/set方法，说明它是访问器方法，否则它就是数据属性。\n其实由于两种属性各自的4种特征都是都不一样的，如果一个对象的属性描述符里含有一个单独的特征就可以判断是什么类型的属性，比如\n``` javascript\nvar book={};\nObject.defineProperty(book,'age',{\n\tvalue:5\n})\n```\n` 描述符里我单独定义了value属性，而value属性仅仅输入数据属性，所以可以判断出 age属于数据属性 `\n\n### 2.定义多个属性\n\nObject.defineProperty()这种写法每次只能定义一个属性，那么可以通过 `Object.defineProperties` 来定义多个属性\n定义多个属性：\n`请注意下面图片内代码是有问题的，这是《js高级程序设计》 里的例子`\n![定义多个属性](/images/javascript的数据属性和访问器属性/3.png)\n这个方法定义多个属性没问题，但是也可以从上面的图看出来，定义的访问器属性year的set方法里面并没有生效，这俩属于数据属性，` 原因是因为 定义的_year属性和edition属性不能往里面写值了 `。\n\n自己解决历程：我自己猜想原因可能是这样，因为_year和edition写不进去值了，所以设置 enumerable 为true。我尝试修改了一下，如下\n![给两个数据属性添加了writable(可读写 )特征](/images/javascript的数据属性和访问器属性/4.png)\n这样运行成功。为了验证猜想，做了如下例子：\n\n![所有特性](/images/javascript的数据属性和访问器属性/5.png)；\n\n可以看到只要是用 `Object.defineProperties()`  定义的对象的属性，那么定义过的每个属性描述符的4个默认属性（除了set和get外）都默认都是 false\n\n总结：使用 `Object.defineProperties()` 方法来定义多个属性的时候，每个属性的描述符里的属性都是默认的false(除了set和get外)，set或者get没定义的话默认 undefined\n\n## 四、实际应用\n\n介绍了这个东西后，在实际中我该在什么情况用呢？\n\n**数据双向绑定 （Module<==>View）**\n数据双向绑定就是通过 `Object.defineProperty` 实现的，我们来手写一个数据绑定\n``` html\n<input class=\"inputText\" type=\"text\" />\n<p class=\"text\"></p>\n```\t\n``` javascript\nvar inputText=document.querySelector('.inputText');\nvar text=document.querySelector('.text');\n//module\nvar obj={_txt:null};\nObject.defineProperty(obj,'txt',{\n\tget:function(){\n\t\treturn this._txt;\n\t},\n\tset:function(value){\n\t\tthis._txt=value;\n\t\ttext.innerHTML=value;\n\t\tinputText.value=value\n\t}\n})\n//view\ninputText.addEventListener('input',function(e){\n\tconst text=e.target.value;\n\tobj.txt=text;\n},false)\n```\t\n此时在input输入值的时候p的内容和obj.txt内容会变，在浏览器console中更改obj.txt的值，input和p也会变\n","slug":"javascript的数据属性和访问器属性","published":1,"updated":"2018-09-28T02:53:25.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kgk000dvps679reacqf","content":"<h2 id=\"一、数据属性\"><a href=\"#一、数据属性\" class=\"headerlink\" title=\"一、数据属性\"></a>一、数据属性</h2><h3 id=\"1-基本认识\"><a href=\"#1-基本认识\" class=\"headerlink\" title=\"1.基本认识\"></a>1.基本认识</h3><h4 id=\"1-1概念\"><a href=\"#1-1概念\" class=\"headerlink\" title=\"1.1概念\"></a>1.1概念</h4><p>数据属性包含一个数据值的位置，在这个位置可以读取和写入值</p>\n<h4 id=\"数据属性有4个描述其行为的特性\"><a href=\"#数据属性有4个描述其行为的特性\" class=\"headerlink\" title=\"数据属性有4个描述其行为的特性\"></a>数据属性有4个描述其行为的特性</h4><ol>\n<li>[[Configurable]] : 表示能否通过 delte 删除属性从而重新定义属性，能肉修改属性的特性，或者能把属性修改为访问器属性。默认true</li>\n<li>[[Enumerable]] : 表示能否通过 for-in 循环返回属性。 默认 true</li>\n<li>[[Writable]] : 表示能否修改属性的值 。 默认 true</li>\n<li>[[Value]] : 包含这个属性的数据值。 默认 undefined</li>\n</ol>\n<blockquote>\n<p>tip：为了表示特性是内部值，该规范把他们放在了两对括号中</p>\n</blockquote>\n<h3 id=\"2-对数据属性的操作\"><a href=\"#2-对数据属性的操作\" class=\"headerlink\" title=\"2.对数据属性的操作\"></a>2.对数据属性的操作</h3><p>必须使用 ECMAScript 5 的 <code>Object.defineProperty()</code> 方法<br>三个参数</p>\n<ol>\n<li>属性所在的对象</li>\n<li>属性的名字</li>\n<li>描述符对象</li>\n</ol>\n<h4 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">\tname:<span class=\"string\">'y'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//禁止修改属性值</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person,<span class=\"string\">\"name\"</span>,&#123;</span><br><span class=\"line\">\twritable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name) \t\t<span class=\"comment\">// y</span></span><br><span class=\"line\"><span class=\"comment\">//尝试修改属性</span></span><br><span class=\"line\">person.name=<span class=\"string\">'b'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name) \t\t<span class=\"comment\">//y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以看到禁止修改属性的值后，修改属性值无效</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-1注意！！！\"><a href=\"#2-1注意！！！\" class=\"headerlink\" title=\"2.1注意！！！\"></a>2.1注意！！！</h4><p>这四个数据属性中，<code>configurable</code> 是比较特殊的，一旦把属性定义为不可配置的，就不能再把它变回可配置了，此时再调用 <code>Object.defineProperty</code> 方法修改 <code>除writable之外的特性</code> 都会导致失败。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b=&#123;</span><br><span class=\"line\">\tage:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义为不可配置</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,<span class=\"string\">'age'</span>,&#123;</span><br><span class=\"line\">\tconfigurable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//尝试删除配置</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> b.age</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age)</span><br><span class=\"line\"><span class=\"comment\">// 成功打印0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改enumerable</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,<span class=\"string\">\"age\"</span>,&#123;</span><br><span class=\"line\">\tenumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/* 报错：Uncaught TypeError: Cannot redefine property: age</span></span><br><span class=\"line\"><span class=\"comment\">    at Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">    at &lt;anonymous&gt;:3:8 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改writable</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,<span class=\"string\">\"age\"</span>,&#123;</span><br><span class=\"line\">\twritable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*修改成功，不会报错*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改value</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,<span class=\"string\">\"age\"</span>,&#123;</span><br><span class=\"line\">\tvalue:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*报错：</span></span><br><span class=\"line\"><span class=\"comment\">VM17512:1 Uncaught TypeError: Cannot redefine property: age</span></span><br><span class=\"line\"><span class=\"comment\">    at Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">    at &lt;anonymous&gt;:1:8</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>tip:上面的操作只针对于 b对象的age 属性，所以此时我再添加一个属性也是成功的，比如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.name=<span class=\"string\">'m'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &#123;age: 0, name: \"m\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>tip2:<br>ES5有三个操作会忽略enumerable为false的属性。</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>for…in循环：只遍历对象自身的和继承的可枚举的属性</li>\n<li>Object.keys()：返回对象自身的所有可枚举的属性的键名</li>\n<li>JSON.stringify()：只串行化对象自身的可枚举的属性</li>\n</ol>\n</blockquote>\n<h2 id=\"二、访问器属性\"><a href=\"#二、访问器属性\" class=\"headerlink\" title=\"二、访问器属性\"></a>二、访问器属性</h2><h3 id=\"1-基本认识-1\"><a href=\"#1-基本认识-1\" class=\"headerlink\" title=\"1.基本认识\"></a>1.基本认识</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>访问器属性不包含数据值。它包含一对getter和setter函数。当读取访问器属性时，会调用getter函数并返回有效值；<br>当写入访问器属性时，会调用setter函数并传入新值，setter函数负责处理数据。</p>\n<h4 id=\"访问器属性的四个特性\"><a href=\"#访问器属性的四个特性\" class=\"headerlink\" title=\"访问器属性的四个特性\"></a>访问器属性的四个特性</h4><ol>\n<li>[[Configurable]]：默认为true。表示能否通过delete删除属性从而重新定义属性，能否修改属性特性，或者能否把属性修改为访问器属性；</li>\n<li>[[Enumerable]]：默认为true。表示能否通过for-in循环返回属性；</li>\n<li>[[Get]]：读取属性时调用的函数，默认为undefined；</li>\n<li>[[Set]]：写入属性时调用的函数，默认为undefined；</li>\n</ol>\n<h3 id=\"2-对访问器属性的操作\"><a href=\"#2-对访问器属性的操作\" class=\"headerlink\" title=\"2.对访问器属性的操作\"></a>2.对访问器属性的操作</h3><blockquote>\n<p>tip :<br>1.当使用了getter或setter方法，不允许使用 <code>writable</code> 和 <code>value</code> 这两个属性。<br>2.get和set 函数不是必须的<br>3.先看这种写法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/1.png\" alt=\"特别要注意这种写法，容易写错！\" title=\"\">\n                </div>\n                <div class=\"image-caption\">特别要注意这种写法，容易写错！</div>\n            </figure><br>可以看到 <code>堆栈溢出</code> 了，` 原因是因为如果在get里return this.year ，这样如果我们在外面 book .year时，就会运行get函数，而get函数里面执行到this.year时又会运行get函数，造成死循环。正常写法是利用一个中间值来设置某一个属性，看下面代码<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/2.png\" alt=\"正确写法\" title=\"\">\n                </div>\n                <div class=\"image-caption\">正确写法</div>\n            </figure><br>_year 前面的下划线是一种常用的记号，用于表示只能通过对象方法访问的属性。<br>一般上面上面代码目的是 设置一个属性的值会导致其他属性发生变化，就不用把属性单拿出来计算了，很方便</p>\n</blockquote>\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><h3 id=\"1-到底怎么判断是数据属性还是访问器属性\"><a href=\"#1-到底怎么判断是数据属性还是访问器属性\" class=\"headerlink\" title=\"1.到底怎么判断是数据属性还是访问器属性\"></a>1.到底怎么判断是数据属性还是访问器属性</h3><p>可以通过 Object.getOwnPropertyName()方法获取到所有实例中的属性，包括不可枚举的属性。<br>然后，使用Object.getOwnPropertyDescriptor(）方法获取到每一个属性的描述符，如果描述符中有get/set方法，说明它是访问器方法，否则它就是数据属性。<br>其实由于两种属性各自的4种特征都是都不一样的，如果一个对象的属性描述符里含有一个单独的特征就可以判断是什么类型的属性，比如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book=&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(book,<span class=\"string\">'age'</span>,&#123;</span><br><span class=\"line\">\tvalue:<span class=\"number\">5</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><code>描述符里我单独定义了value属性，而value属性仅仅输入数据属性，所以可以判断出 age属于数据属性</code></p>\n<h3 id=\"2-定义多个属性\"><a href=\"#2-定义多个属性\" class=\"headerlink\" title=\"2.定义多个属性\"></a>2.定义多个属性</h3><p>Object.defineProperty()这种写法每次只能定义一个属性，那么可以通过 <code>Object.defineProperties</code> 来定义多个属性<br>定义多个属性：<br><code>请注意下面图片内代码是有问题的，这是《js高级程序设计》 里的例子</code><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/3.png\" alt=\"定义多个属性\" title=\"\">\n                </div>\n                <div class=\"image-caption\">定义多个属性</div>\n            </figure><br>这个方法定义多个属性没问题，但是也可以从上面的图看出来，定义的访问器属性year的set方法里面并没有生效，这俩属于数据属性，<code>原因是因为 定义的_year属性和edition属性不能往里面写值了</code>。</p>\n<p>自己解决历程：我自己猜想原因可能是这样，因为_year和edition写不进去值了，所以设置 enumerable 为true。我尝试修改了一下，如下<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/4.png\" alt=\"给两个数据属性添加了writable(可读写 )特征\" title=\"\">\n                </div>\n                <div class=\"image-caption\">给两个数据属性添加了writable(可读写 )特征</div>\n            </figure><br>这样运行成功。为了验证猜想，做了如下例子：</p>\n<p><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/5.png\" alt=\"所有特性\" title=\"\">\n                </div>\n                <div class=\"image-caption\">所有特性</div>\n            </figure>；</p>\n<p>可以看到只要是用 <code>Object.defineProperties()</code>  定义的对象的属性，那么定义过的每个属性描述符的4个默认属性（除了set和get外）都默认都是 false</p>\n<p>总结：使用 <code>Object.defineProperties()</code> 方法来定义多个属性的时候，每个属性的描述符里的属性都是默认的false(除了set和get外)，set或者get没定义的话默认 undefined</p>\n<h2 id=\"四、实际应用\"><a href=\"#四、实际应用\" class=\"headerlink\" title=\"四、实际应用\"></a>四、实际应用</h2><p>介绍了这个东西后，在实际中我该在什么情况用呢？</p>\n<p><strong>数据双向绑定 （Module&lt;==&gt;View）</strong><br>数据双向绑定就是通过 <code>Object.defineProperty</code> 实现的，我们来手写一个数据绑定</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inputText\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n</code></pre>\n<pre><code class=\"javascript\"><span class=\"keyword\">var</span> inputText=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.inputText'</span>);\n<span class=\"keyword\">var</span> text=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.text'</span>);\n<span class=\"comment\">//module</span>\n<span class=\"keyword\">var</span> obj={<span class=\"attr\">_txt</span>:<span class=\"literal\">null</span>};\n<span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'txt'</span>,{\n    get:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._txt;\n    },\n    set:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>{\n        <span class=\"keyword\">this</span>._txt=value;\n        text.innerHTML=value;\n        inputText.value=value\n    }\n})\n<span class=\"comment\">//view</span>\ninputText.addEventListener(<span class=\"string\">'input'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>{\n    <span class=\"keyword\">const</span> text=e.target.value;\n    obj.txt=text;\n},<span class=\"literal\">false</span>)\n</code></pre>\n<p>此时在input输入值的时候p的内容和obj.txt内容会变，在浏览器console中更改obj.txt的值，input和p也会变</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、数据属性\"><a href=\"#一、数据属性\" class=\"headerlink\" title=\"一、数据属性\"></a>一、数据属性</h2><h3 id=\"1-基本认识\"><a href=\"#1-基本认识\" class=\"headerlink\" title=\"1.基本认识\"></a>1.基本认识</h3><h4 id=\"1-1概念\"><a href=\"#1-1概念\" class=\"headerlink\" title=\"1.1概念\"></a>1.1概念</h4><p>数据属性包含一个数据值的位置，在这个位置可以读取和写入值</p>\n<h4 id=\"数据属性有4个描述其行为的特性\"><a href=\"#数据属性有4个描述其行为的特性\" class=\"headerlink\" title=\"数据属性有4个描述其行为的特性\"></a>数据属性有4个描述其行为的特性</h4><ol>\n<li>[[Configurable]] : 表示能否通过 delte 删除属性从而重新定义属性，能肉修改属性的特性，或者能把属性修改为访问器属性。默认true</li>\n<li>[[Enumerable]] : 表示能否通过 for-in 循环返回属性。 默认 true</li>\n<li>[[Writable]] : 表示能否修改属性的值 。 默认 true</li>\n<li>[[Value]] : 包含这个属性的数据值。 默认 undefined</li>\n</ol>\n<blockquote>\n<p>tip：为了表示特性是内部值，该规范把他们放在了两对括号中</p>\n</blockquote>\n<h3 id=\"2-对数据属性的操作\"><a href=\"#2-对数据属性的操作\" class=\"headerlink\" title=\"2.对数据属性的操作\"></a>2.对数据属性的操作</h3><p>必须使用 ECMAScript 5 的 <code>Object.defineProperty()</code> 方法<br>三个参数</p>\n<ol>\n<li>属性所在的对象</li>\n<li>属性的名字</li>\n<li>描述符对象</li>\n</ol>\n<h4 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">\tname:<span class=\"string\">'y'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//禁止修改属性值</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person,<span class=\"string\">\"name\"</span>,&#123;</span><br><span class=\"line\">\twritable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name) \t\t<span class=\"comment\">// y</span></span><br><span class=\"line\"><span class=\"comment\">//尝试修改属性</span></span><br><span class=\"line\">person.name=<span class=\"string\">'b'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name) \t\t<span class=\"comment\">//y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以看到禁止修改属性的值后，修改属性值无效</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-1注意！！！\"><a href=\"#2-1注意！！！\" class=\"headerlink\" title=\"2.1注意！！！\"></a>2.1注意！！！</h4><p>这四个数据属性中，<code>configurable</code> 是比较特殊的，一旦把属性定义为不可配置的，就不能再把它变回可配置了，此时再调用 <code>Object.defineProperty</code> 方法修改 <code>除writable之外的特性</code> 都会导致失败。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b=&#123;</span><br><span class=\"line\">\tage:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义为不可配置</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,<span class=\"string\">'age'</span>,&#123;</span><br><span class=\"line\">\tconfigurable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//尝试删除配置</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> b.age</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age)</span><br><span class=\"line\"><span class=\"comment\">// 成功打印0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改enumerable</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,<span class=\"string\">\"age\"</span>,&#123;</span><br><span class=\"line\">\tenumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/* 报错：Uncaught TypeError: Cannot redefine property: age</span></span><br><span class=\"line\"><span class=\"comment\">    at Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">    at &lt;anonymous&gt;:3:8 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改writable</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,<span class=\"string\">\"age\"</span>,&#123;</span><br><span class=\"line\">\twritable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*修改成功，不会报错*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尝试修改value</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b,<span class=\"string\">\"age\"</span>,&#123;</span><br><span class=\"line\">\tvalue:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*报错：</span></span><br><span class=\"line\"><span class=\"comment\">VM17512:1 Uncaught TypeError: Cannot redefine property: age</span></span><br><span class=\"line\"><span class=\"comment\">    at Function.defineProperty (&lt;anonymous&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">    at &lt;anonymous&gt;:1:8</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>tip:上面的操作只针对于 b对象的age 属性，所以此时我再添加一个属性也是成功的，比如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.name=<span class=\"string\">'m'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\"><span class=\"comment\">// 输出 &#123;age: 0, name: \"m\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>tip2:<br>ES5有三个操作会忽略enumerable为false的属性。</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>for…in循环：只遍历对象自身的和继承的可枚举的属性</li>\n<li>Object.keys()：返回对象自身的所有可枚举的属性的键名</li>\n<li>JSON.stringify()：只串行化对象自身的可枚举的属性</li>\n</ol>\n</blockquote>\n<h2 id=\"二、访问器属性\"><a href=\"#二、访问器属性\" class=\"headerlink\" title=\"二、访问器属性\"></a>二、访问器属性</h2><h3 id=\"1-基本认识-1\"><a href=\"#1-基本认识-1\" class=\"headerlink\" title=\"1.基本认识\"></a>1.基本认识</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>访问器属性不包含数据值。它包含一对getter和setter函数。当读取访问器属性时，会调用getter函数并返回有效值；<br>当写入访问器属性时，会调用setter函数并传入新值，setter函数负责处理数据。</p>\n<h4 id=\"访问器属性的四个特性\"><a href=\"#访问器属性的四个特性\" class=\"headerlink\" title=\"访问器属性的四个特性\"></a>访问器属性的四个特性</h4><ol>\n<li>[[Configurable]]：默认为true。表示能否通过delete删除属性从而重新定义属性，能否修改属性特性，或者能否把属性修改为访问器属性；</li>\n<li>[[Enumerable]]：默认为true。表示能否通过for-in循环返回属性；</li>\n<li>[[Get]]：读取属性时调用的函数，默认为undefined；</li>\n<li>[[Set]]：写入属性时调用的函数，默认为undefined；</li>\n</ol>\n<h3 id=\"2-对访问器属性的操作\"><a href=\"#2-对访问器属性的操作\" class=\"headerlink\" title=\"2.对访问器属性的操作\"></a>2.对访问器属性的操作</h3><blockquote>\n<p>tip :<br>1.当使用了getter或setter方法，不允许使用 <code>writable</code> 和 <code>value</code> 这两个属性。<br>2.get和set 函数不是必须的<br>3.先看这种写法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/1.png\" alt=\"特别要注意这种写法，容易写错！\" title=\"\">\n                </div>\n                <div class=\"image-caption\">特别要注意这种写法，容易写错！</div>\n            </figure><br>可以看到 <code>堆栈溢出</code> 了，` 原因是因为如果在get里return this.year ，这样如果我们在外面 book .year时，就会运行get函数，而get函数里面执行到this.year时又会运行get函数，造成死循环。正常写法是利用一个中间值来设置某一个属性，看下面代码<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/2.png\" alt=\"正确写法\" title=\"\">\n                </div>\n                <div class=\"image-caption\">正确写法</div>\n            </figure><br>_year 前面的下划线是一种常用的记号，用于表示只能通过对象方法访问的属性。<br>一般上面上面代码目的是 设置一个属性的值会导致其他属性发生变化，就不用把属性单拿出来计算了，很方便</p>\n</blockquote>\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><h3 id=\"1-到底怎么判断是数据属性还是访问器属性\"><a href=\"#1-到底怎么判断是数据属性还是访问器属性\" class=\"headerlink\" title=\"1.到底怎么判断是数据属性还是访问器属性\"></a>1.到底怎么判断是数据属性还是访问器属性</h3><p>可以通过 Object.getOwnPropertyName()方法获取到所有实例中的属性，包括不可枚举的属性。<br>然后，使用Object.getOwnPropertyDescriptor(）方法获取到每一个属性的描述符，如果描述符中有get/set方法，说明它是访问器方法，否则它就是数据属性。<br>其实由于两种属性各自的4种特征都是都不一样的，如果一个对象的属性描述符里含有一个单独的特征就可以判断是什么类型的属性，比如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book=&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(book,<span class=\"string\">'age'</span>,&#123;</span><br><span class=\"line\">\tvalue:<span class=\"number\">5</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><code>描述符里我单独定义了value属性，而value属性仅仅输入数据属性，所以可以判断出 age属于数据属性</code></p>\n<h3 id=\"2-定义多个属性\"><a href=\"#2-定义多个属性\" class=\"headerlink\" title=\"2.定义多个属性\"></a>2.定义多个属性</h3><p>Object.defineProperty()这种写法每次只能定义一个属性，那么可以通过 <code>Object.defineProperties</code> 来定义多个属性<br>定义多个属性：<br><code>请注意下面图片内代码是有问题的，这是《js高级程序设计》 里的例子</code><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/3.png\" alt=\"定义多个属性\" title=\"\">\n                </div>\n                <div class=\"image-caption\">定义多个属性</div>\n            </figure><br>这个方法定义多个属性没问题，但是也可以从上面的图看出来，定义的访问器属性year的set方法里面并没有生效，这俩属于数据属性，<code>原因是因为 定义的_year属性和edition属性不能往里面写值了</code>。</p>\n<p>自己解决历程：我自己猜想原因可能是这样，因为_year和edition写不进去值了，所以设置 enumerable 为true。我尝试修改了一下，如下<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/4.png\" alt=\"给两个数据属性添加了writable(可读写 )特征\" title=\"\">\n                </div>\n                <div class=\"image-caption\">给两个数据属性添加了writable(可读写 )特征</div>\n            </figure><br>这样运行成功。为了验证猜想，做了如下例子：</p>\n<p><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/javascript的数据属性和访问器属性/5.png\" alt=\"所有特性\" title=\"\">\n                </div>\n                <div class=\"image-caption\">所有特性</div>\n            </figure>；</p>\n<p>可以看到只要是用 <code>Object.defineProperties()</code>  定义的对象的属性，那么定义过的每个属性描述符的4个默认属性（除了set和get外）都默认都是 false</p>\n<p>总结：使用 <code>Object.defineProperties()</code> 方法来定义多个属性的时候，每个属性的描述符里的属性都是默认的false(除了set和get外)，set或者get没定义的话默认 undefined</p>\n<h2 id=\"四、实际应用\"><a href=\"#四、实际应用\" class=\"headerlink\" title=\"四、实际应用\"></a>四、实际应用</h2><p>介绍了这个东西后，在实际中我该在什么情况用呢？</p>\n<p><strong>数据双向绑定 （Module&lt;==&gt;View）</strong><br>数据双向绑定就是通过 <code>Object.defineProperty</code> 实现的，我们来手写一个数据绑定</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inputText\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>\n</code></pre>\n<pre><code class=\"javascript\"><span class=\"keyword\">var</span> inputText=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.inputText'</span>);\n<span class=\"keyword\">var</span> text=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.text'</span>);\n<span class=\"comment\">//module</span>\n<span class=\"keyword\">var</span> obj={<span class=\"attr\">_txt</span>:<span class=\"literal\">null</span>};\n<span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'txt'</span>,{\n    get:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._txt;\n    },\n    set:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>{\n        <span class=\"keyword\">this</span>._txt=value;\n        text.innerHTML=value;\n        inputText.value=value\n    }\n})\n<span class=\"comment\">//view</span>\ninputText.addEventListener(<span class=\"string\">'input'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>{\n    <span class=\"keyword\">const</span> text=e.target.value;\n    obj.txt=text;\n},<span class=\"literal\">false</span>)\n</code></pre>\n<p>此时在input输入值的时候p的内容和obj.txt内容会变，在浏览器console中更改obj.txt的值，input和p也会变</p>\n"},{"title":"javascript时间处理小技巧","date":"2017-08-18T07:41:37.000Z","_content":"\n# 获取当前时间\n``` javascript\nnew Date()\n```\n\n# 获取当前时间的毫秒数\n``` javascript\nnew Date().getTime()\n/*返回1970年1月1日至今的毫秒数*/\n\n/*下面是作用相同，写法不同*/\nDate.now()\n\n/*这个也返回值相同*/\n+new Date()\n```\n\n# +”操作符\n``` javascript\n/*将元素转换成number类型*/\n+'123'\n/*返回123*/\n\n+'www'\n/*返回NaN*/\n\n/*同理*/\n+Date.now()\n```\n\n# toLocaleDateString()  和 toLocaleTimeString() 区别\n``` javascript\nnew Date().toLocaleDateString()\n/*2017/8/18  获取的年月日*/\n\nnew Date().toLocaleTimeString()\n/*下午3:56:16 获取的时分秒*/\n\n/*注意必须要用时间对象调用才行\n   比如 Date.now().toLocaleDateString()会报错，因为Date.now()返回的是毫秒数\n*/\n\n```\n\n# 时间格式处理技巧\n如果想格式处理 当前时间与之前某个特定时间的时差 可以用这样的方式\n``` javascript\n/*duration为差值*/\nduration>60 \n\t?`${Math.round(duration/60)}分钟前`\n\t: `${Math.round(Math.max(duration , 1))}秒前`\n/*\n1.利用了ES6的模板字符串，结构更清晰\n2.利用三目运算符(三元运算符)进行判断，避免各种if\n3.Math.max 如果差值小于1s，则按1s计算，避免又一次的if判断\n*/\n```","source":"_posts/js时间.md","raw":"---\ntitle: javascript时间处理小技巧\ndate: 2017-08-18 15:41:37\ntags: javascript\n---\n\n# 获取当前时间\n``` javascript\nnew Date()\n```\n\n# 获取当前时间的毫秒数\n``` javascript\nnew Date().getTime()\n/*返回1970年1月1日至今的毫秒数*/\n\n/*下面是作用相同，写法不同*/\nDate.now()\n\n/*这个也返回值相同*/\n+new Date()\n```\n\n# +”操作符\n``` javascript\n/*将元素转换成number类型*/\n+'123'\n/*返回123*/\n\n+'www'\n/*返回NaN*/\n\n/*同理*/\n+Date.now()\n```\n\n# toLocaleDateString()  和 toLocaleTimeString() 区别\n``` javascript\nnew Date().toLocaleDateString()\n/*2017/8/18  获取的年月日*/\n\nnew Date().toLocaleTimeString()\n/*下午3:56:16 获取的时分秒*/\n\n/*注意必须要用时间对象调用才行\n   比如 Date.now().toLocaleDateString()会报错，因为Date.now()返回的是毫秒数\n*/\n\n```\n\n# 时间格式处理技巧\n如果想格式处理 当前时间与之前某个特定时间的时差 可以用这样的方式\n``` javascript\n/*duration为差值*/\nduration>60 \n\t?`${Math.round(duration/60)}分钟前`\n\t: `${Math.round(Math.max(duration , 1))}秒前`\n/*\n1.利用了ES6的模板字符串，结构更清晰\n2.利用三目运算符(三元运算符)进行判断，避免各种if\n3.Math.max 如果差值小于1s，则按1s计算，避免又一次的if判断\n*/\n```","slug":"js时间","published":1,"updated":"2018-09-28T02:53:25.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kgm000fvps6w8syiion","content":"<h1 id=\"获取当前时间\"><a href=\"#获取当前时间\" class=\"headerlink\" title=\"获取当前时间\"></a>获取当前时间</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br></pre></td></tr></table></figure>\n<h1 id=\"获取当前时间的毫秒数\"><a href=\"#获取当前时间的毫秒数\" class=\"headerlink\" title=\"获取当前时间的毫秒数\"></a>获取当前时间的毫秒数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\"><span class=\"comment\">/*返回1970年1月1日至今的毫秒数*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*下面是作用相同，写法不同*/</span></span><br><span class=\"line\"><span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*这个也返回值相同*/</span></span><br><span class=\"line\">+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br></pre></td></tr></table></figure>\n<h1 id=\"”操作符\"><a href=\"#”操作符\" class=\"headerlink\" title=\"+”操作符\"></a>+”操作符</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*将元素转换成number类型*/</span></span><br><span class=\"line\">+<span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"comment\">/*返回123*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"string\">'www'</span></span><br><span class=\"line\"><span class=\"comment\">/*返回NaN*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*同理*/</span></span><br><span class=\"line\">+<span class=\"built_in\">Date</span>.now()</span><br></pre></td></tr></table></figure>\n<h1 id=\"toLocaleDateString-和-toLocaleTimeString-区别\"><a href=\"#toLocaleDateString-和-toLocaleTimeString-区别\" class=\"headerlink\" title=\"toLocaleDateString()  和 toLocaleTimeString() 区别\"></a>toLocaleDateString()  和 toLocaleTimeString() 区别</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleDateString()</span><br><span class=\"line\"><span class=\"comment\">/*2017/8/18  获取的年月日*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString()</span><br><span class=\"line\"><span class=\"comment\">/*下午3:56:16 获取的时分秒*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*注意必须要用时间对象调用才行</span></span><br><span class=\"line\"><span class=\"comment\">   比如 Date.now().toLocaleDateString()会报错，因为Date.now()返回的是毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"时间格式处理技巧\"><a href=\"#时间格式处理技巧\" class=\"headerlink\" title=\"时间格式处理技巧\"></a>时间格式处理技巧</h1><p>如果想格式处理 当前时间与之前某个特定时间的时差 可以用这样的方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*duration为差值*/</span></span><br><span class=\"line\">duration&gt;<span class=\"number\">60</span> </span><br><span class=\"line\">\t?<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.round(duration<span class=\"regexp\">/60)&#125;分钟前`</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">\t: `$&#123;Math.round(Math.max(duration , 1))&#125;秒前`</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">/</span>*</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"number\">1.</span>利用了ES6的模板字符串，结构更清晰</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"number\">2.</span>利用三目运算符(三元运算符)进行判断，避免各种<span class=\"keyword\">if</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"number\">3.</span><span class=\"built_in\">Math</span>.max 如果差值小于<span class=\"number\">1</span>s，则按<span class=\"number\">1</span>s计算，避免又一次的<span class=\"keyword\">if</span>判断</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">*<span class=\"regexp\">/</span></span></span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"获取当前时间\"><a href=\"#获取当前时间\" class=\"headerlink\" title=\"获取当前时间\"></a>获取当前时间</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br></pre></td></tr></table></figure>\n<h1 id=\"获取当前时间的毫秒数\"><a href=\"#获取当前时间的毫秒数\" class=\"headerlink\" title=\"获取当前时间的毫秒数\"></a>获取当前时间的毫秒数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\"><span class=\"comment\">/*返回1970年1月1日至今的毫秒数*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*下面是作用相同，写法不同*/</span></span><br><span class=\"line\"><span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*这个也返回值相同*/</span></span><br><span class=\"line\">+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br></pre></td></tr></table></figure>\n<h1 id=\"”操作符\"><a href=\"#”操作符\" class=\"headerlink\" title=\"+”操作符\"></a>+”操作符</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*将元素转换成number类型*/</span></span><br><span class=\"line\">+<span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"comment\">/*返回123*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"string\">'www'</span></span><br><span class=\"line\"><span class=\"comment\">/*返回NaN*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*同理*/</span></span><br><span class=\"line\">+<span class=\"built_in\">Date</span>.now()</span><br></pre></td></tr></table></figure>\n<h1 id=\"toLocaleDateString-和-toLocaleTimeString-区别\"><a href=\"#toLocaleDateString-和-toLocaleTimeString-区别\" class=\"headerlink\" title=\"toLocaleDateString()  和 toLocaleTimeString() 区别\"></a>toLocaleDateString()  和 toLocaleTimeString() 区别</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleDateString()</span><br><span class=\"line\"><span class=\"comment\">/*2017/8/18  获取的年月日*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString()</span><br><span class=\"line\"><span class=\"comment\">/*下午3:56:16 获取的时分秒*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*注意必须要用时间对象调用才行</span></span><br><span class=\"line\"><span class=\"comment\">   比如 Date.now().toLocaleDateString()会报错，因为Date.now()返回的是毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"时间格式处理技巧\"><a href=\"#时间格式处理技巧\" class=\"headerlink\" title=\"时间格式处理技巧\"></a>时间格式处理技巧</h1><p>如果想格式处理 当前时间与之前某个特定时间的时差 可以用这样的方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*duration为差值*/</span></span><br><span class=\"line\">duration&gt;<span class=\"number\">60</span> </span><br><span class=\"line\">\t?<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.round(duration<span class=\"regexp\">/60)&#125;分钟前`</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">\t: `$&#123;Math.round(Math.max(duration , 1))&#125;秒前`</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">/</span>*</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"number\">1.</span>利用了ES6的模板字符串，结构更清晰</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"number\">2.</span>利用三目运算符(三元运算符)进行判断，避免各种<span class=\"keyword\">if</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"number\">3.</span><span class=\"built_in\">Math</span>.max 如果差值小于<span class=\"number\">1</span>s，则按<span class=\"number\">1</span>s计算，避免又一次的<span class=\"keyword\">if</span>判断</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">*<span class=\"regexp\">/</span></span></span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"mobx基本用法","date":"2018-03-06T01:59:46.000Z","_content":"\n### 一、前言\n本文是我初学mobx时对mobx一些基本的认识，如果新发现会继续更新\n\n### 二、redux和mobx\n\n相同点：都是用来管理JavaScript应用的状态，他们不一定要跟react结合使用，还可以与别的框架结合\n\n不同点：\n\n\n1. **redux**学习成本相对于mobx成本要高很多，有reducer、action、dispatch等概念，规则多，比如更新数据必须要用 dispatch，更新的逻辑必须要用 action，刚学的时候可能有点懵。\n**mobx**比较自由，可以用obj.key 的方式更新\n2. **redux**更新数据的时候，要将更新数据的整个对象替换为一个新的对象才可以触发更新(这点接触过redux的会有感受)，而mobx自始至终是一份引用，所以redux每次会触发很多的组件的重新渲染，为了优化会配合immutable。\n**mobx**则是更新哪个属性，仅仅这个属性所在的位置会重新渲染（不是组件的重新渲染，不触发componentWillMount等方法，会触发componentWillUpdata）\n\n以上为自己理解，如有错误烦请指出\n\n### 三、mobx基本概念\n> tip:以下提到的 `@` 是ES7里的修饰器，可以到网上找资源学习 es7的修饰器\n\n#### 1. **@observable **\n将属性转为可观察的，一旦发生变化，则变量所处的位置会立即发生变化\n\n#### 2. **@computed**\n\n这是一个有点不好理解的API，而且官网描述的也不是很清楚，下面是我的理解，如果有误，请指出\n讲这个API之前先看一下下面的例子：\n``` javascript\n/************************************mobx********************************/\n\nimport { observable ,computed,autorun,action } from 'mobx'\n\nclass AppState {\n\t@observable count=0;\n\t@observable max = 5;\n\t@computed get msg(){\n\t\tconsole.log('msg的getter里执行...')\n\t\treturn `msg结果===>${this.max>this.count}`\n\t}\n\t@action add(){\n\t\tthis.count +=1;\n\t}\n\t@action changeName(c){\n\t\tthis.max=c\n\t}\n}\nconst appState = new AppState;\nsetInterval(()=>{\n\tappState.add()\n},2000)\nexport default appState;\n\n/************************************index.jsx********************************/\n\nimport React,{ Component } from 'react'\nimport {observer,inject} from 'mobx-react'\nimport PropTypes from 'prop-types'\n\n@inject('appState')\n\n@observer\nexport default class TopicList extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.changeName=this.changeName.bind(this)\n\t}\n\tcomponentWillUpdate(){\n\t\tconsole.log('更新！')\n\t}\n\tchangeName(event){\n\t\tthis.props.appState.changeName(event.target.value)\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" onChange={this.changeName}/>\n\t\t\t\t<span>{this.props.appState.msg}</span>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nTopicList.propTypes={\n\tappState:PropTypes.object\n}\n\n```\n> 逻辑是有两个变量 count和max，在msg的getter里判断max>count的情况,其中max为固定值，count每秒+1。\n\n在第二节的redux和mobx异同之处提出了mobx数据变化的时候组件只会触发 ` componentWillUpdata ` （没什么来源，自己试的），下面来看看上面代码 (` mobx里msg部分加了 @computed `) 运行情况：\n\n\n![加了 @computed](/images/mobx基本用法/1.gif)\n\n** 可以看到只有当 `msg` 值发生变化的时候，才会触发 ` componentWillUpdata ` ，也就是前5s msg的结果一直为 true时，组件里是没有接收到新的 {this.props.appState.msg} 的（因为接受新的props值会触发 componentWillUpdata）**\n\n下面再来看看 ` mobx里msg部分不加 @computed `  运行情况\n``` javascript\nget msg(){\n\tconsole.log('msg的getter里执行...')\n\treturn `msg结果===>${this.max>this.count}`\n}\n```\n![不加 @computed](/images/mobx基本用法/2.gif)\n\n** 可以看到每一次的count值变化都会触发组件的componentWillUpdata **\n\n看明白了上面的例子和运行时的不同，再看看下面的总结就会好理解了\n\n** 总结：\n如果使用了@computed （@computed msg getter()），那么msg的值将会被缓存，如果count的变化没有触发msg值的变话，那么msg的getter()值就不会改变，index.jsx组件也不会收到通知(componentWillUpdata)。（第一种情况）**\n\n** 如果不使用@computed属性，直接msg getter()的话，那么一旦count改变，所有用到msg getter()的地方都将重新计算(第二种情况)。 \n ** \n > @computed的意义在于它能够由MobX进行更智能的优化\n\n\n #### 3. ** autorun **\n 定义的 @observable 变量如果发生变化，autorun会自动执行相应的方法,例如将上面的mobx修改，index.jsx不变\n\n ``` javascript \n import { observable ,computed,autorun,action } from 'mobx'\n\n class AppState {\n \t@observable count=0;\n \t@observable max = 5;\n \t@computed get msg(){\n \t\tconsole.log('msg的getter里执行...')\n \t\treturn `msg结果===>${this.max>this.count}`\n \t}\n \t@action add(){\n \t\tthis.count +=1;\n \t}\n \t@action changeName(c){\n \t\tthis.max=c\n \t}\n }\n\n const appState = new AppState;\n// 添加了 autorun\n autorun(()=>{\n \tconsole.log(`${appState.count} 运行运行~`)\n })\n setInterval(()=>{\n \tappState.add()\n },1000)\n export default appState;\n ```\n 因为autorun里的函数依赖了 count ，所以每一次setInterval的时候，都会执行autorun里的函数\n\n #### 4.** @action**\n 如果要更新store里的内容，就要在相应的函数前加上 `@action` 例如上面的例子，标记为@action 。\n\n 作用：在mobx-react高级渲染性能优化小节中，我们知道，使用transaction可以将多个应用状态(Observable)的更新视为一次操作，并只触发一次监听者(Reactions)的动作(UI更新、网络请求等)，从而更大程度地提升应用的性能，避免多余的UI渲染和网络请求。action中封装了transaction，对函数使用action修饰符后，无论函数中对@observable变量（应用状态）有多少次修改，都只会在函数执行完成后，触发一次对应的监听者。如下代码，reset函数只会触发一次UI更新。\n ``` javascript\n class TodoItemModel {\n     id;\n     @observable title;\n     @observable completed;\n\n     //使用action后，reset函数执行完成后，才会触发一次其监听者\n     @action\n     reset() {\n         this.completed = false;\n         this.title= '';\n     }\n }\n ```\n\n\n #### 5.** @oberver**\n\n observer 函数/装饰器可以用来将 React 组件转变成响应式组件\n oberver是用来连接mobx与组件的一个API（告诉mobx本组件依赖于mobx的状态），由一个单独的包 mobx-react 提供，例子看上面的 index.jsx组件。使用了 observer 的react组件中用到的变量发生变化，组件才会更新\n\n ### 四、运行环境的配置\n\n@(修饰器)是ES7的一个提案，Babel 转码器已经支持 Decorator\n需要安装 babel-preset-stage-1 （stage-0也可以）和babel-plugin-transform-decorators，babel-plugin-transform-decorators一定要放在别的plugins前\n\n![.babelrc配置](/images/mobx基本用法/3.png)\n\n#### 6. **useStaticRendering**\n我们知道可以通过使用@observer，将react组件转换成一个监听者(Reactions)，这样在被监听的应用状态变量(Observable)有更新时，react组件就会重新渲染。而对于服务端的React组件，我们只需要它被渲染一次，而不需要组件监听模型的状态。事实上，如果服务端React组件像客户端组件一样监听模型的状态变化，就会造成严重的内存泄漏问题。官方提供了useStaticRendering方法，用于避免mobx服务端渲染的内存泄漏问题; 该方法只需要在server启动时设置一次。\n\nuseStaticRendering(true);","source":"_posts/mobx基本用法.md","raw":"---\ntitle: mobx基本用法\ndate: 2018-03-06 09:59:46\ntags: mobx\n---\n\n### 一、前言\n本文是我初学mobx时对mobx一些基本的认识，如果新发现会继续更新\n\n### 二、redux和mobx\n\n相同点：都是用来管理JavaScript应用的状态，他们不一定要跟react结合使用，还可以与别的框架结合\n\n不同点：\n\n\n1. **redux**学习成本相对于mobx成本要高很多，有reducer、action、dispatch等概念，规则多，比如更新数据必须要用 dispatch，更新的逻辑必须要用 action，刚学的时候可能有点懵。\n**mobx**比较自由，可以用obj.key 的方式更新\n2. **redux**更新数据的时候，要将更新数据的整个对象替换为一个新的对象才可以触发更新(这点接触过redux的会有感受)，而mobx自始至终是一份引用，所以redux每次会触发很多的组件的重新渲染，为了优化会配合immutable。\n**mobx**则是更新哪个属性，仅仅这个属性所在的位置会重新渲染（不是组件的重新渲染，不触发componentWillMount等方法，会触发componentWillUpdata）\n\n以上为自己理解，如有错误烦请指出\n\n### 三、mobx基本概念\n> tip:以下提到的 `@` 是ES7里的修饰器，可以到网上找资源学习 es7的修饰器\n\n#### 1. **@observable **\n将属性转为可观察的，一旦发生变化，则变量所处的位置会立即发生变化\n\n#### 2. **@computed**\n\n这是一个有点不好理解的API，而且官网描述的也不是很清楚，下面是我的理解，如果有误，请指出\n讲这个API之前先看一下下面的例子：\n``` javascript\n/************************************mobx********************************/\n\nimport { observable ,computed,autorun,action } from 'mobx'\n\nclass AppState {\n\t@observable count=0;\n\t@observable max = 5;\n\t@computed get msg(){\n\t\tconsole.log('msg的getter里执行...')\n\t\treturn `msg结果===>${this.max>this.count}`\n\t}\n\t@action add(){\n\t\tthis.count +=1;\n\t}\n\t@action changeName(c){\n\t\tthis.max=c\n\t}\n}\nconst appState = new AppState;\nsetInterval(()=>{\n\tappState.add()\n},2000)\nexport default appState;\n\n/************************************index.jsx********************************/\n\nimport React,{ Component } from 'react'\nimport {observer,inject} from 'mobx-react'\nimport PropTypes from 'prop-types'\n\n@inject('appState')\n\n@observer\nexport default class TopicList extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.changeName=this.changeName.bind(this)\n\t}\n\tcomponentWillUpdate(){\n\t\tconsole.log('更新！')\n\t}\n\tchangeName(event){\n\t\tthis.props.appState.changeName(event.target.value)\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" onChange={this.changeName}/>\n\t\t\t\t<span>{this.props.appState.msg}</span>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nTopicList.propTypes={\n\tappState:PropTypes.object\n}\n\n```\n> 逻辑是有两个变量 count和max，在msg的getter里判断max>count的情况,其中max为固定值，count每秒+1。\n\n在第二节的redux和mobx异同之处提出了mobx数据变化的时候组件只会触发 ` componentWillUpdata ` （没什么来源，自己试的），下面来看看上面代码 (` mobx里msg部分加了 @computed `) 运行情况：\n\n\n![加了 @computed](/images/mobx基本用法/1.gif)\n\n** 可以看到只有当 `msg` 值发生变化的时候，才会触发 ` componentWillUpdata ` ，也就是前5s msg的结果一直为 true时，组件里是没有接收到新的 {this.props.appState.msg} 的（因为接受新的props值会触发 componentWillUpdata）**\n\n下面再来看看 ` mobx里msg部分不加 @computed `  运行情况\n``` javascript\nget msg(){\n\tconsole.log('msg的getter里执行...')\n\treturn `msg结果===>${this.max>this.count}`\n}\n```\n![不加 @computed](/images/mobx基本用法/2.gif)\n\n** 可以看到每一次的count值变化都会触发组件的componentWillUpdata **\n\n看明白了上面的例子和运行时的不同，再看看下面的总结就会好理解了\n\n** 总结：\n如果使用了@computed （@computed msg getter()），那么msg的值将会被缓存，如果count的变化没有触发msg值的变话，那么msg的getter()值就不会改变，index.jsx组件也不会收到通知(componentWillUpdata)。（第一种情况）**\n\n** 如果不使用@computed属性，直接msg getter()的话，那么一旦count改变，所有用到msg getter()的地方都将重新计算(第二种情况)。 \n ** \n > @computed的意义在于它能够由MobX进行更智能的优化\n\n\n #### 3. ** autorun **\n 定义的 @observable 变量如果发生变化，autorun会自动执行相应的方法,例如将上面的mobx修改，index.jsx不变\n\n ``` javascript \n import { observable ,computed,autorun,action } from 'mobx'\n\n class AppState {\n \t@observable count=0;\n \t@observable max = 5;\n \t@computed get msg(){\n \t\tconsole.log('msg的getter里执行...')\n \t\treturn `msg结果===>${this.max>this.count}`\n \t}\n \t@action add(){\n \t\tthis.count +=1;\n \t}\n \t@action changeName(c){\n \t\tthis.max=c\n \t}\n }\n\n const appState = new AppState;\n// 添加了 autorun\n autorun(()=>{\n \tconsole.log(`${appState.count} 运行运行~`)\n })\n setInterval(()=>{\n \tappState.add()\n },1000)\n export default appState;\n ```\n 因为autorun里的函数依赖了 count ，所以每一次setInterval的时候，都会执行autorun里的函数\n\n #### 4.** @action**\n 如果要更新store里的内容，就要在相应的函数前加上 `@action` 例如上面的例子，标记为@action 。\n\n 作用：在mobx-react高级渲染性能优化小节中，我们知道，使用transaction可以将多个应用状态(Observable)的更新视为一次操作，并只触发一次监听者(Reactions)的动作(UI更新、网络请求等)，从而更大程度地提升应用的性能，避免多余的UI渲染和网络请求。action中封装了transaction，对函数使用action修饰符后，无论函数中对@observable变量（应用状态）有多少次修改，都只会在函数执行完成后，触发一次对应的监听者。如下代码，reset函数只会触发一次UI更新。\n ``` javascript\n class TodoItemModel {\n     id;\n     @observable title;\n     @observable completed;\n\n     //使用action后，reset函数执行完成后，才会触发一次其监听者\n     @action\n     reset() {\n         this.completed = false;\n         this.title= '';\n     }\n }\n ```\n\n\n #### 5.** @oberver**\n\n observer 函数/装饰器可以用来将 React 组件转变成响应式组件\n oberver是用来连接mobx与组件的一个API（告诉mobx本组件依赖于mobx的状态），由一个单独的包 mobx-react 提供，例子看上面的 index.jsx组件。使用了 observer 的react组件中用到的变量发生变化，组件才会更新\n\n ### 四、运行环境的配置\n\n@(修饰器)是ES7的一个提案，Babel 转码器已经支持 Decorator\n需要安装 babel-preset-stage-1 （stage-0也可以）和babel-plugin-transform-decorators，babel-plugin-transform-decorators一定要放在别的plugins前\n\n![.babelrc配置](/images/mobx基本用法/3.png)\n\n#### 6. **useStaticRendering**\n我们知道可以通过使用@observer，将react组件转换成一个监听者(Reactions)，这样在被监听的应用状态变量(Observable)有更新时，react组件就会重新渲染。而对于服务端的React组件，我们只需要它被渲染一次，而不需要组件监听模型的状态。事实上，如果服务端React组件像客户端组件一样监听模型的状态变化，就会造成严重的内存泄漏问题。官方提供了useStaticRendering方法，用于避免mobx服务端渲染的内存泄漏问题; 该方法只需要在server启动时设置一次。\n\nuseStaticRendering(true);","slug":"mobx基本用法","published":1,"updated":"2018-09-28T02:53:25.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kgr000hvps6zuem7b09","content":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>本文是我初学mobx时对mobx一些基本的认识，如果新发现会继续更新</p>\n<h3 id=\"二、redux和mobx\"><a href=\"#二、redux和mobx\" class=\"headerlink\" title=\"二、redux和mobx\"></a>二、redux和mobx</h3><p>相同点：都是用来管理JavaScript应用的状态，他们不一定要跟react结合使用，还可以与别的框架结合</p>\n<p>不同点：</p>\n<ol>\n<li><strong>redux</strong>学习成本相对于mobx成本要高很多，有reducer、action、dispatch等概念，规则多，比如更新数据必须要用 dispatch，更新的逻辑必须要用 action，刚学的时候可能有点懵。<br><strong>mobx</strong>比较自由，可以用obj.key 的方式更新</li>\n<li><strong>redux</strong>更新数据的时候，要将更新数据的整个对象替换为一个新的对象才可以触发更新(这点接触过redux的会有感受)，而mobx自始至终是一份引用，所以redux每次会触发很多的组件的重新渲染，为了优化会配合immutable。<br><strong>mobx</strong>则是更新哪个属性，仅仅这个属性所在的位置会重新渲染（不是组件的重新渲染，不触发componentWillMount等方法，会触发componentWillUpdata）</li>\n</ol>\n<p>以上为自己理解，如有错误烦请指出</p>\n<h3 id=\"三、mobx基本概念\"><a href=\"#三、mobx基本概念\" class=\"headerlink\" title=\"三、mobx基本概念\"></a>三、mobx基本概念</h3><blockquote>\n<p>tip:以下提到的 <code>@</code> 是ES7里的修饰器，可以到网上找资源学习 es7的修饰器</p>\n</blockquote>\n<h4 id=\"1-observable\"><a href=\"#1-observable\" class=\"headerlink\" title=\"1. @observable \"></a>1. <strong>@observable </strong></h4><p>将属性转为可观察的，一旦发生变化，则变量所处的位置会立即发生变化</p>\n<h4 id=\"2-computed\"><a href=\"#2-computed\" class=\"headerlink\" title=\"2. @computed\"></a>2. <strong>@computed</strong></h4><p>这是一个有点不好理解的API，而且官网描述的也不是很清楚，下面是我的理解，如果有误，请指出<br>讲这个API之前先看一下下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************************************mobx********************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable ,computed,autorun,action &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppState</span> </span>&#123;</span><br><span class=\"line\">\t@observable count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t@observable max = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t@computed get msg()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'msg的getter里执行...'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">`msg结果===&gt;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.max&gt;<span class=\"keyword\">this</span>.count&#125;</span>`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@action add()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.count +=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@action changeName(c)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.max=c</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> appState = <span class=\"keyword\">new</span> AppState;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\tappState.add()</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> appState;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************************************index.jsx********************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observer,inject&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">'prop-types'</span></span><br><span class=\"line\"></span><br><span class=\"line\">@inject(<span class=\"string\">'appState'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">@observer</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.changeName=<span class=\"keyword\">this</span>.changeName.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'更新！'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tchangeName(event)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.props.appState.changeName(event.target.value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"text\"</span> onChange=&#123;<span class=\"keyword\">this</span>.changeName&#125;/&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;&#123;<span class=\"keyword\">this</span>.props.appState.msg&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;/</span>div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">TopicList.propTypes=&#123;</span><br><span class=\"line\">\tappState:PropTypes.object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>逻辑是有两个变量 count和max，在msg的getter里判断max&gt;count的情况,其中max为固定值，count每秒+1。</p>\n</blockquote>\n<p>在第二节的redux和mobx异同之处提出了mobx数据变化的时候组件只会触发 <code>componentWillUpdata</code> （没什么来源，自己试的），下面来看看上面代码 (<code>mobx里msg部分加了 @computed</code>) 运行情况：</p>\n<p><img src=\"/images/mobx基本用法/1.gif\" alt=\"加了 @computed\"></p>\n<p><strong> 可以看到只有当 <code>msg</code> 值发生变化的时候，才会触发 <code>componentWillUpdata</code> ，也就是前5s msg的结果一直为 true时，组件里是没有接收到新的 {this.props.appState.msg} 的（因为接受新的props值会触发 componentWillUpdata）</strong></p>\n<p>下面再来看看 <code>mobx里msg部分不加 @computed</code>  运行情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get msg()&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'msg的getter里执行...'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">`msg结果===&gt;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.max&gt;<span class=\"keyword\">this</span>.count&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/mobx基本用法/2.gif\" alt=\"不加 @computed\" title=\"\">\n                </div>\n                <div class=\"image-caption\">不加 @computed</div>\n            </figure>\n<p><strong> 可以看到每一次的count值变化都会触发组件的componentWillUpdata </strong></p>\n<p>看明白了上面的例子和运行时的不同，再看看下面的总结就会好理解了</p>\n<p><strong> 总结：<br>如果使用了@computed （@computed msg getter()），那么msg的值将会被缓存，如果count的变化没有触发msg值的变话，那么msg的getter()值就不会改变，index.jsx组件也不会收到通知(componentWillUpdata)。（第一种情况）</strong></p>\n<p><strong> 如果不使用@computed属性，直接msg getter()的话，那么一旦count改变，所有用到msg getter()的地方都将重新计算(第二种情况)。 \n </strong> </p>\n<blockquote>\n<p>@computed的意义在于它能够由MobX进行更智能的优化</p>\n</blockquote>\n<h4 id=\"3-autorun\"><a href=\"#3-autorun\" class=\"headerlink\" title=\"3.  autorun \"></a>3. <strong> autorun </strong></h4><p> 定义的 @observable 变量如果发生变化，autorun会自动执行相应的方法,例如将上面的mobx修改，index.jsx不变</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">import</span> &#123; observable ,computed,autorun,action &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppState</span> </span>&#123;</span><br><span class=\"line\"> \t@observable count=<span class=\"number\">0</span>;</span><br><span class=\"line\"> \t@observable max = <span class=\"number\">5</span>;</span><br><span class=\"line\"> \t@computed get msg()&#123;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'msg的getter里执行...'</span>)</span><br><span class=\"line\"> \t\t<span class=\"keyword\">return</span> <span class=\"string\">`msg结果===&gt;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.max&gt;<span class=\"keyword\">this</span>.count&#125;</span>`</span></span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> \t@action add()&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">this</span>.count +=<span class=\"number\">1</span>;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> \t@action changeName(c)&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">this</span>.max=c</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> appState = <span class=\"keyword\">new</span> AppState;</span><br><span class=\"line\"><span class=\"comment\">// 添加了 autorun</span></span><br><span class=\"line\"> autorun(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;appState.count&#125;</span> 运行运行~`</span>)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\"> \tappState.add()</span><br><span class=\"line\"> &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"> <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> appState;</span><br></pre></td></tr></table></figure>\n<p> 因为autorun里的函数依赖了 count ，所以每一次setInterval的时候，都会执行autorun里的函数</p>\n<h4 id=\"4-action\"><a href=\"#4-action\" class=\"headerlink\" title=\"4. @action\"></a>4.<strong> @action</strong></h4><p> 如果要更新store里的内容，就要在相应的函数前加上 <code>@action</code> 例如上面的例子，标记为@action 。</p>\n<p> 作用：在mobx-react高级渲染性能优化小节中，我们知道，使用transaction可以将多个应用状态(Observable)的更新视为一次操作，并只触发一次监听者(Reactions)的动作(UI更新、网络请求等)，从而更大程度地提升应用的性能，避免多余的UI渲染和网络请求。action中封装了transaction，对函数使用action修饰符后，无论函数中对@observable变量（应用状态）有多少次修改，都只会在函数执行完成后，触发一次对应的监听者。如下代码，reset函数只会触发一次UI更新。<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItemModel</span> </span>&#123;</span><br><span class=\"line\">    id;</span><br><span class=\"line\">    @observable title;</span><br><span class=\"line\">    @observable completed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用action后，reset函数执行完成后，才会触发一次其监听者</span></span><br><span class=\"line\">    @action</span><br><span class=\"line\">    reset() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.completed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title= <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-oberver\"><a href=\"#5-oberver\" class=\"headerlink\" title=\"5. @oberver\"></a>5.<strong> @oberver</strong></h4><p> observer 函数/装饰器可以用来将 React 组件转变成响应式组件<br> oberver是用来连接mobx与组件的一个API（告诉mobx本组件依赖于mobx的状态），由一个单独的包 mobx-react 提供，例子看上面的 index.jsx组件。使用了 observer 的react组件中用到的变量发生变化，组件才会更新</p>\n<h3 id=\"四、运行环境的配置\"><a href=\"#四、运行环境的配置\" class=\"headerlink\" title=\"四、运行环境的配置\"></a>四、运行环境的配置</h3><p>@(修饰器)是ES7的一个提案，Babel 转码器已经支持 Decorator<br>需要安装 babel-preset-stage-1 （stage-0也可以）和babel-plugin-transform-decorators，babel-plugin-transform-decorators一定要放在别的plugins前</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/mobx基本用法/3.png\" alt=\".babelrc配置\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.babelrc配置</div>\n            </figure>\n<h4 id=\"6-useStaticRendering\"><a href=\"#6-useStaticRendering\" class=\"headerlink\" title=\"6. useStaticRendering\"></a>6. <strong>useStaticRendering</strong></h4><p>我们知道可以通过使用@observer，将react组件转换成一个监听者(Reactions)，这样在被监听的应用状态变量(Observable)有更新时，react组件就会重新渲染。而对于服务端的React组件，我们只需要它被渲染一次，而不需要组件监听模型的状态。事实上，如果服务端React组件像客户端组件一样监听模型的状态变化，就会造成严重的内存泄漏问题。官方提供了useStaticRendering方法，用于避免mobx服务端渲染的内存泄漏问题; 该方法只需要在server启动时设置一次。</p>\n<p>useStaticRendering(true);</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>本文是我初学mobx时对mobx一些基本的认识，如果新发现会继续更新</p>\n<h3 id=\"二、redux和mobx\"><a href=\"#二、redux和mobx\" class=\"headerlink\" title=\"二、redux和mobx\"></a>二、redux和mobx</h3><p>相同点：都是用来管理JavaScript应用的状态，他们不一定要跟react结合使用，还可以与别的框架结合</p>\n<p>不同点：</p>\n<ol>\n<li><strong>redux</strong>学习成本相对于mobx成本要高很多，有reducer、action、dispatch等概念，规则多，比如更新数据必须要用 dispatch，更新的逻辑必须要用 action，刚学的时候可能有点懵。<br><strong>mobx</strong>比较自由，可以用obj.key 的方式更新</li>\n<li><strong>redux</strong>更新数据的时候，要将更新数据的整个对象替换为一个新的对象才可以触发更新(这点接触过redux的会有感受)，而mobx自始至终是一份引用，所以redux每次会触发很多的组件的重新渲染，为了优化会配合immutable。<br><strong>mobx</strong>则是更新哪个属性，仅仅这个属性所在的位置会重新渲染（不是组件的重新渲染，不触发componentWillMount等方法，会触发componentWillUpdata）</li>\n</ol>\n<p>以上为自己理解，如有错误烦请指出</p>\n<h3 id=\"三、mobx基本概念\"><a href=\"#三、mobx基本概念\" class=\"headerlink\" title=\"三、mobx基本概念\"></a>三、mobx基本概念</h3><blockquote>\n<p>tip:以下提到的 <code>@</code> 是ES7里的修饰器，可以到网上找资源学习 es7的修饰器</p>\n</blockquote>\n<h4 id=\"1-observable\"><a href=\"#1-observable\" class=\"headerlink\" title=\"1. @observable \"></a>1. <strong>@observable </strong></h4><p>将属性转为可观察的，一旦发生变化，则变量所处的位置会立即发生变化</p>\n<h4 id=\"2-computed\"><a href=\"#2-computed\" class=\"headerlink\" title=\"2. @computed\"></a>2. <strong>@computed</strong></h4><p>这是一个有点不好理解的API，而且官网描述的也不是很清楚，下面是我的理解，如果有误，请指出<br>讲这个API之前先看一下下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************************************mobx********************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable ,computed,autorun,action &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppState</span> </span>&#123;</span><br><span class=\"line\">\t@observable count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t@observable max = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t@computed get msg()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'msg的getter里执行...'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">`msg结果===&gt;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.max&gt;<span class=\"keyword\">this</span>.count&#125;</span>`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@action add()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.count +=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@action changeName(c)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.max=c</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> appState = <span class=\"keyword\">new</span> AppState;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\tappState.add()</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> appState;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************************************index.jsx********************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React,&#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observer,inject&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">'prop-types'</span></span><br><span class=\"line\"></span><br><span class=\"line\">@inject(<span class=\"string\">'appState'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">@observer</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.changeName=<span class=\"keyword\">this</span>.changeName.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'更新！'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tchangeName(event)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.props.appState.changeName(event.target.value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"text\"</span> onChange=&#123;<span class=\"keyword\">this</span>.changeName&#125;/&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;&#123;<span class=\"keyword\">this</span>.props.appState.msg&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;/</span>div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">TopicList.propTypes=&#123;</span><br><span class=\"line\">\tappState:PropTypes.object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>逻辑是有两个变量 count和max，在msg的getter里判断max&gt;count的情况,其中max为固定值，count每秒+1。</p>\n</blockquote>\n<p>在第二节的redux和mobx异同之处提出了mobx数据变化的时候组件只会触发 <code>componentWillUpdata</code> （没什么来源，自己试的），下面来看看上面代码 (<code>mobx里msg部分加了 @computed</code>) 运行情况：</p>\n<p><img src=\"/images/mobx基本用法/1.gif\" alt=\"加了 @computed\"></p>\n<p><strong> 可以看到只有当 <code>msg</code> 值发生变化的时候，才会触发 <code>componentWillUpdata</code> ，也就是前5s msg的结果一直为 true时，组件里是没有接收到新的 {this.props.appState.msg} 的（因为接受新的props值会触发 componentWillUpdata）</strong></p>\n<p>下面再来看看 <code>mobx里msg部分不加 @computed</code>  运行情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get msg()&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'msg的getter里执行...'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">`msg结果===&gt;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.max&gt;<span class=\"keyword\">this</span>.count&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/mobx基本用法/2.gif\" alt=\"不加 @computed\" title=\"\">\n                </div>\n                <div class=\"image-caption\">不加 @computed</div>\n            </figure>\n<p><strong> 可以看到每一次的count值变化都会触发组件的componentWillUpdata </strong></p>\n<p>看明白了上面的例子和运行时的不同，再看看下面的总结就会好理解了</p>\n<p><strong> 总结：<br>如果使用了@computed （@computed msg getter()），那么msg的值将会被缓存，如果count的变化没有触发msg值的变话，那么msg的getter()值就不会改变，index.jsx组件也不会收到通知(componentWillUpdata)。（第一种情况）</strong></p>\n<p><strong> 如果不使用@computed属性，直接msg getter()的话，那么一旦count改变，所有用到msg getter()的地方都将重新计算(第二种情况)。 \n </strong> </p>\n<blockquote>\n<p>@computed的意义在于它能够由MobX进行更智能的优化</p>\n</blockquote>\n<h4 id=\"3-autorun\"><a href=\"#3-autorun\" class=\"headerlink\" title=\"3.  autorun \"></a>3. <strong> autorun </strong></h4><p> 定义的 @observable 变量如果发生变化，autorun会自动执行相应的方法,例如将上面的mobx修改，index.jsx不变</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">import</span> &#123; observable ,computed,autorun,action &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppState</span> </span>&#123;</span><br><span class=\"line\"> \t@observable count=<span class=\"number\">0</span>;</span><br><span class=\"line\"> \t@observable max = <span class=\"number\">5</span>;</span><br><span class=\"line\"> \t@computed get msg()&#123;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'msg的getter里执行...'</span>)</span><br><span class=\"line\"> \t\t<span class=\"keyword\">return</span> <span class=\"string\">`msg结果===&gt;<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.max&gt;<span class=\"keyword\">this</span>.count&#125;</span>`</span></span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> \t@action add()&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">this</span>.count +=<span class=\"number\">1</span>;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> \t@action changeName(c)&#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">this</span>.max=c</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> appState = <span class=\"keyword\">new</span> AppState;</span><br><span class=\"line\"><span class=\"comment\">// 添加了 autorun</span></span><br><span class=\"line\"> autorun(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;appState.count&#125;</span> 运行运行~`</span>)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\"> \tappState.add()</span><br><span class=\"line\"> &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"> <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> appState;</span><br></pre></td></tr></table></figure>\n<p> 因为autorun里的函数依赖了 count ，所以每一次setInterval的时候，都会执行autorun里的函数</p>\n<h4 id=\"4-action\"><a href=\"#4-action\" class=\"headerlink\" title=\"4. @action\"></a>4.<strong> @action</strong></h4><p> 如果要更新store里的内容，就要在相应的函数前加上 <code>@action</code> 例如上面的例子，标记为@action 。</p>\n<p> 作用：在mobx-react高级渲染性能优化小节中，我们知道，使用transaction可以将多个应用状态(Observable)的更新视为一次操作，并只触发一次监听者(Reactions)的动作(UI更新、网络请求等)，从而更大程度地提升应用的性能，避免多余的UI渲染和网络请求。action中封装了transaction，对函数使用action修饰符后，无论函数中对@observable变量（应用状态）有多少次修改，都只会在函数执行完成后，触发一次对应的监听者。如下代码，reset函数只会触发一次UI更新。<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItemModel</span> </span>&#123;</span><br><span class=\"line\">    id;</span><br><span class=\"line\">    @observable title;</span><br><span class=\"line\">    @observable completed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用action后，reset函数执行完成后，才会触发一次其监听者</span></span><br><span class=\"line\">    @action</span><br><span class=\"line\">    reset() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.completed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title= <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-oberver\"><a href=\"#5-oberver\" class=\"headerlink\" title=\"5. @oberver\"></a>5.<strong> @oberver</strong></h4><p> observer 函数/装饰器可以用来将 React 组件转变成响应式组件<br> oberver是用来连接mobx与组件的一个API（告诉mobx本组件依赖于mobx的状态），由一个单独的包 mobx-react 提供，例子看上面的 index.jsx组件。使用了 observer 的react组件中用到的变量发生变化，组件才会更新</p>\n<h3 id=\"四、运行环境的配置\"><a href=\"#四、运行环境的配置\" class=\"headerlink\" title=\"四、运行环境的配置\"></a>四、运行环境的配置</h3><p>@(修饰器)是ES7的一个提案，Babel 转码器已经支持 Decorator<br>需要安装 babel-preset-stage-1 （stage-0也可以）和babel-plugin-transform-decorators，babel-plugin-transform-decorators一定要放在别的plugins前</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/mobx基本用法/3.png\" alt=\".babelrc配置\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.babelrc配置</div>\n            </figure>\n<h4 id=\"6-useStaticRendering\"><a href=\"#6-useStaticRendering\" class=\"headerlink\" title=\"6. useStaticRendering\"></a>6. <strong>useStaticRendering</strong></h4><p>我们知道可以通过使用@observer，将react组件转换成一个监听者(Reactions)，这样在被监听的应用状态变量(Observable)有更新时，react组件就会重新渲染。而对于服务端的React组件，我们只需要它被渲染一次，而不需要组件监听模型的状态。事实上，如果服务端React组件像客户端组件一样监听模型的状态变化，就会造成严重的内存泄漏问题。官方提供了useStaticRendering方法，用于避免mobx服务端渲染的内存泄漏问题; 该方法只需要在server启动时设置一次。</p>\n<p>useStaticRendering(true);</p>\n"},{"title":"optimization.splitChunks","date":"2018-05-21T10:04:16.000Z","_content":"","source":"_posts/optimization-splitChunks.md","raw":"---\ntitle: optimization.splitChunks\ndate: 2018-05-21 18:04:16\ntags:\n---\n","slug":"optimization-splitChunks","published":1,"updated":"2018-09-28T02:53:25.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kgt000jvps6iv8wt1yr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"position的sticky属性","date":"2017-09-13T02:25:03.000Z","_content":"\n![表头跟随](/images/position的sticky属性/1.gif)\n图中展示的效果使我们在日常开发中常见的效果。\n以前我都是用js判断是否滚动一定距离然后给这个元素设置`position:fixed`这种方式来做的，\n今天就来记录一下用css怎么做\n\n### 一、介绍\n`css` 中的 `position` 属性的值常用的主要有下面几种：\n1.absolute\n2.relative\n3.fixed\n现在用到的值为 `sticky`：\n设置了`sticky`的元素，不脱离文档流，在屏幕范围时（viewport），该元素位置不受到定位影响（top、left等值无效），当该元素的视图将要离开偏移范围时，定位会变成 `fixed` 的效果，并且根据设置的top 、left值进行定位\n\n### 二、用法\n上面的gif图里，我将搜索框的元素设置为\n``` css\npostion:sticky;\ntop:0;\nleft:0\n```\n所以当移出屏幕时就会触发fixed定位\n\n### 三、兼容性\n刚刚把它用在实际项目中去了，结果安卓自带的浏览器不支持，所以附加上解决办法：\n``` javascript\n//判断是否支持\nif (CSS.supports(\"position\", \"sticky\") || CSS.supports(\"position\", \"-webkit-sticky\")) {\n    // 支持 sticky,顶部吸附\n\tthis.setState({\n\t\tsupport:true\n\t})\n}else{\n\tdocument.addEventListener('scroll',this._scrollTop)\n}\n//不支持的主要处理\n_scrollTop(){\n\tlet offsetY=this.searchDOM.offsetTop;\n\tlet css=null;\n\tif(window.scrollY>offsetY){\n\t\tcss={\n\t\t\tposition:'fixed',\n\t\t\ttop:0,\n\t\t\tzIndex:999\n\t\t}\n\t}else{\n\t\tcss={\n\t\t\tposition:'static',\n\t\t}\n\t}\n\tthis.setState({\n\t\tcss\n\t})\n}\n```\n\n### 四、总结\n* 该元素不脱离文档流，仍保留元素原本在文档流中的位置\n* 当元素在容器中被滚动超过指定偏移值时，元素在容器内固定在指定位置。比如你设置了 `top:50px` 那么sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动\n* 元素固定的相对偏移是相对于它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于 `viewport` 来计算元素的偏移量","source":"_posts/position的sticky属性.md","raw":"---\ntitle: position的sticky属性\ndate: 2017-09-13 10:25:03\ntags: css\n---\n\n![表头跟随](/images/position的sticky属性/1.gif)\n图中展示的效果使我们在日常开发中常见的效果。\n以前我都是用js判断是否滚动一定距离然后给这个元素设置`position:fixed`这种方式来做的，\n今天就来记录一下用css怎么做\n\n### 一、介绍\n`css` 中的 `position` 属性的值常用的主要有下面几种：\n1.absolute\n2.relative\n3.fixed\n现在用到的值为 `sticky`：\n设置了`sticky`的元素，不脱离文档流，在屏幕范围时（viewport），该元素位置不受到定位影响（top、left等值无效），当该元素的视图将要离开偏移范围时，定位会变成 `fixed` 的效果，并且根据设置的top 、left值进行定位\n\n### 二、用法\n上面的gif图里，我将搜索框的元素设置为\n``` css\npostion:sticky;\ntop:0;\nleft:0\n```\n所以当移出屏幕时就会触发fixed定位\n\n### 三、兼容性\n刚刚把它用在实际项目中去了，结果安卓自带的浏览器不支持，所以附加上解决办法：\n``` javascript\n//判断是否支持\nif (CSS.supports(\"position\", \"sticky\") || CSS.supports(\"position\", \"-webkit-sticky\")) {\n    // 支持 sticky,顶部吸附\n\tthis.setState({\n\t\tsupport:true\n\t})\n}else{\n\tdocument.addEventListener('scroll',this._scrollTop)\n}\n//不支持的主要处理\n_scrollTop(){\n\tlet offsetY=this.searchDOM.offsetTop;\n\tlet css=null;\n\tif(window.scrollY>offsetY){\n\t\tcss={\n\t\t\tposition:'fixed',\n\t\t\ttop:0,\n\t\t\tzIndex:999\n\t\t}\n\t}else{\n\t\tcss={\n\t\t\tposition:'static',\n\t\t}\n\t}\n\tthis.setState({\n\t\tcss\n\t})\n}\n```\n\n### 四、总结\n* 该元素不脱离文档流，仍保留元素原本在文档流中的位置\n* 当元素在容器中被滚动超过指定偏移值时，元素在容器内固定在指定位置。比如你设置了 `top:50px` 那么sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动\n* 元素固定的相对偏移是相对于它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于 `viewport` 来计算元素的偏移量","slug":"position的sticky属性","published":1,"updated":"2018-09-28T02:53:25.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kgw000lvps6liuu5z35","content":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/position的sticky属性/1.gif\" alt=\"表头跟随\" title=\"\">\n                </div>\n                <div class=\"image-caption\">表头跟随</div>\n            </figure>\n<p>图中展示的效果使我们在日常开发中常见的效果。<br>以前我都是用js判断是否滚动一定距离然后给这个元素设置<code>position:fixed</code>这种方式来做的，<br>今天就来记录一下用css怎么做</p>\n<h3 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h3><p><code>css</code> 中的 <code>position</code> 属性的值常用的主要有下面几种：<br>1.absolute<br>2.relative<br>3.fixed<br>现在用到的值为 <code>sticky</code>：<br>设置了<code>sticky</code>的元素，不脱离文档流，在屏幕范围时（viewport），该元素位置不受到定位影响（top、left等值无效），当该元素的视图将要离开偏移范围时，定位会变成 <code>fixed</code> 的效果，并且根据设置的top 、left值进行定位</p>\n<h3 id=\"二、用法\"><a href=\"#二、用法\" class=\"headerlink\" title=\"二、用法\"></a>二、用法</h3><p>上面的gif图里，我将搜索框的元素设置为<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">postion</span><span class=\"selector-pseudo\">:sticky</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:0</span></span><br></pre></td></tr></table></figure></p>\n<p>所以当移出屏幕时就会触发fixed定位</p>\n<h3 id=\"三、兼容性\"><a href=\"#三、兼容性\" class=\"headerlink\" title=\"三、兼容性\"></a>三、兼容性</h3><p>刚刚把它用在实际项目中去了，结果安卓自带的浏览器不支持，所以附加上解决办法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断是否支持</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (CSS.supports(<span class=\"string\">\"position\"</span>, <span class=\"string\">\"sticky\"</span>) || CSS.supports(<span class=\"string\">\"position\"</span>, <span class=\"string\">\"-webkit-sticky\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 支持 sticky,顶部吸附</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\tsupport:<span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"keyword\">this</span>._scrollTop)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//不支持的主要处理</span></span><br><span class=\"line\">_scrollTop()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> offsetY=<span class=\"keyword\">this</span>.searchDOM.offsetTop;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> css=<span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.scrollY&gt;offsetY)&#123;</span><br><span class=\"line\">\t\tcss=&#123;</span><br><span class=\"line\">\t\t\tposition:<span class=\"string\">'fixed'</span>,</span><br><span class=\"line\">\t\t\ttop:<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\tzIndex:<span class=\"number\">999</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tcss=&#123;</span><br><span class=\"line\">\t\t\tposition:<span class=\"string\">'static'</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\tcss</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><ul>\n<li>该元素不脱离文档流，仍保留元素原本在文档流中的位置</li>\n<li>当元素在容器中被滚动超过指定偏移值时，元素在容器内固定在指定位置。比如你设置了 <code>top:50px</code> 那么sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动</li>\n<li>元素固定的相对偏移是相对于它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于 <code>viewport</code> 来计算元素的偏移量</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/position的sticky属性/1.gif\" alt=\"表头跟随\" title=\"\">\n                </div>\n                <div class=\"image-caption\">表头跟随</div>\n            </figure>\n<p>图中展示的效果使我们在日常开发中常见的效果。<br>以前我都是用js判断是否滚动一定距离然后给这个元素设置<code>position:fixed</code>这种方式来做的，<br>今天就来记录一下用css怎么做</p>\n<h3 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h3><p><code>css</code> 中的 <code>position</code> 属性的值常用的主要有下面几种：<br>1.absolute<br>2.relative<br>3.fixed<br>现在用到的值为 <code>sticky</code>：<br>设置了<code>sticky</code>的元素，不脱离文档流，在屏幕范围时（viewport），该元素位置不受到定位影响（top、left等值无效），当该元素的视图将要离开偏移范围时，定位会变成 <code>fixed</code> 的效果，并且根据设置的top 、left值进行定位</p>\n<h3 id=\"二、用法\"><a href=\"#二、用法\" class=\"headerlink\" title=\"二、用法\"></a>二、用法</h3><p>上面的gif图里，我将搜索框的元素设置为<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">postion</span><span class=\"selector-pseudo\">:sticky</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span><span class=\"selector-pseudo\">:0</span></span><br></pre></td></tr></table></figure></p>\n<p>所以当移出屏幕时就会触发fixed定位</p>\n<h3 id=\"三、兼容性\"><a href=\"#三、兼容性\" class=\"headerlink\" title=\"三、兼容性\"></a>三、兼容性</h3><p>刚刚把它用在实际项目中去了，结果安卓自带的浏览器不支持，所以附加上解决办法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断是否支持</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (CSS.supports(<span class=\"string\">\"position\"</span>, <span class=\"string\">\"sticky\"</span>) || CSS.supports(<span class=\"string\">\"position\"</span>, <span class=\"string\">\"-webkit-sticky\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 支持 sticky,顶部吸附</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\tsupport:<span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"keyword\">this</span>._scrollTop)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//不支持的主要处理</span></span><br><span class=\"line\">_scrollTop()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> offsetY=<span class=\"keyword\">this</span>.searchDOM.offsetTop;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> css=<span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.scrollY&gt;offsetY)&#123;</span><br><span class=\"line\">\t\tcss=&#123;</span><br><span class=\"line\">\t\t\tposition:<span class=\"string\">'fixed'</span>,</span><br><span class=\"line\">\t\t\ttop:<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\tzIndex:<span class=\"number\">999</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tcss=&#123;</span><br><span class=\"line\">\t\t\tposition:<span class=\"string\">'static'</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\tcss</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><ul>\n<li>该元素不脱离文档流，仍保留元素原本在文档流中的位置</li>\n<li>当元素在容器中被滚动超过指定偏移值时，元素在容器内固定在指定位置。比如你设置了 <code>top:50px</code> 那么sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动</li>\n<li>元素固定的相对偏移是相对于它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于 <code>viewport</code> 来计算元素的偏移量</li>\n</ul>\n"},{"title":"python格式化字符","date":"2018-08-09T03:38:07.000Z","_content":"\n### 一、前言\n本文是我初学python对格式化字符操作中的一些相对疑难问题的记录和理解\n\n### 二、python中格式化方法format\n\n#### 1.简单用法\n对于format最简单的用法就是这样了\n``` python\nname='YMBo'\nage=18\nprint '{0} is {1} years old'.format(name,age)\n```\n输出为\n> YMBo is 18 years old\n\n对于这种字符串拼接也可以用这种方式：\n``` python\nname='YMBo'\nage=18\nprint name+' and '+str(age)\n```\n* 注意！这种方式的字符串拼接类型都要为 str，所以`age`这一项要转为str，而format这中方式就不用\n\n#### 2.复杂用法\n``` python\nname='YMBo'\nprint('lalallala :{0:3}'.format(name))\n# {0:3}\n```\n* 0：这里的 0 表示第几个参数，这里只有一个所以是 0\n* 3：这个3表示输出宽度，如果输出宽度小于字符串宽度则最后输出宽度为字符串宽度\n------------------------------------\n``` python\nname='YMBo'\nprint('lalallala :{0:^3}'.format(name))\n# {0:^3}\n```\n* 这里多了个 `^`表示右对齐\n------------------------------------\n``` python\nprint('lalallala :{0:.3f}'.format(1.0/3))\n# {0:.3f}\n```\n* 0表示第一个参数\n* ：后面没有数字表示宽度则自动分配\n* .3表示小数点后3位\n* f表示按照浮点数输出\n\n--------------------------------------\n``` python\nprint(' :{0:_^100.3f}'.format(1.0/3))\n# {0:.3f}\n```\n* 这里的下滑线是填充文本\n\n#### 总结\n对比一下，python字符串格式化操作和JavaScript很相似的\n都有两种方式\n1.字符串和变量++++这种操作，但是python需要将不是str类型的变量转为str类型，而js不用\n2.python中'{}'.format()，js中\\`${}\\`这种操作\n","source":"_posts/python格式化字符.md","raw":"---\ntitle: python格式化字符\ndate: 2018-08-09 11:38:07\ntags: python\n---\n\n### 一、前言\n本文是我初学python对格式化字符操作中的一些相对疑难问题的记录和理解\n\n### 二、python中格式化方法format\n\n#### 1.简单用法\n对于format最简单的用法就是这样了\n``` python\nname='YMBo'\nage=18\nprint '{0} is {1} years old'.format(name,age)\n```\n输出为\n> YMBo is 18 years old\n\n对于这种字符串拼接也可以用这种方式：\n``` python\nname='YMBo'\nage=18\nprint name+' and '+str(age)\n```\n* 注意！这种方式的字符串拼接类型都要为 str，所以`age`这一项要转为str，而format这中方式就不用\n\n#### 2.复杂用法\n``` python\nname='YMBo'\nprint('lalallala :{0:3}'.format(name))\n# {0:3}\n```\n* 0：这里的 0 表示第几个参数，这里只有一个所以是 0\n* 3：这个3表示输出宽度，如果输出宽度小于字符串宽度则最后输出宽度为字符串宽度\n------------------------------------\n``` python\nname='YMBo'\nprint('lalallala :{0:^3}'.format(name))\n# {0:^3}\n```\n* 这里多了个 `^`表示右对齐\n------------------------------------\n``` python\nprint('lalallala :{0:.3f}'.format(1.0/3))\n# {0:.3f}\n```\n* 0表示第一个参数\n* ：后面没有数字表示宽度则自动分配\n* .3表示小数点后3位\n* f表示按照浮点数输出\n\n--------------------------------------\n``` python\nprint(' :{0:_^100.3f}'.format(1.0/3))\n# {0:.3f}\n```\n* 这里的下滑线是填充文本\n\n#### 总结\n对比一下，python字符串格式化操作和JavaScript很相似的\n都有两种方式\n1.字符串和变量++++这种操作，但是python需要将不是str类型的变量转为str类型，而js不用\n2.python中'{}'.format()，js中\\`${}\\`这种操作\n","slug":"python格式化字符","published":1,"updated":"2018-09-28T02:53:25.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kgx000mvps6sm605648","content":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>本文是我初学python对格式化字符操作中的一些相对疑难问题的记录和理解</p>\n<h3 id=\"二、python中格式化方法format\"><a href=\"#二、python中格式化方法format\" class=\"headerlink\" title=\"二、python中格式化方法format\"></a>二、python中格式化方法format</h3><h4 id=\"1-简单用法\"><a href=\"#1-简单用法\" class=\"headerlink\" title=\"1.简单用法\"></a>1.简单用法</h4><p>对于format最简单的用法就是这样了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">'YMBo'</span></span><br><span class=\"line\">age=<span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'&#123;0&#125; is &#123;1&#125; years old'</span>.format(name,age)</span><br></pre></td></tr></table></figure></p>\n<p>输出为</p>\n<blockquote>\n<p>YMBo is 18 years old</p>\n</blockquote>\n<p>对于这种字符串拼接也可以用这种方式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">'YMBo'</span></span><br><span class=\"line\">age=<span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> name+<span class=\"string\">' and '</span>+str(age)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>注意！这种方式的字符串拼接类型都要为 str，所以<code>age</code>这一项要转为str，而format这中方式就不用</li>\n</ul>\n<h4 id=\"2-复杂用法\"><a href=\"#2-复杂用法\" class=\"headerlink\" title=\"2.复杂用法\"></a>2.复杂用法</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">'YMBo'</span></span><br><span class=\"line\">print(<span class=\"string\">'lalallala :&#123;0:3&#125;'</span>.format(name))</span><br><span class=\"line\"><span class=\"comment\"># &#123;0:3&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>0：这里的 0 表示第几个参数，这里只有一个所以是 0</li>\n<li>3：这个3表示输出宽度，如果输出宽度小于字符串宽度则最后输出宽度为字符串宽度</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">'YMBo'</span></span><br><span class=\"line\">print(<span class=\"string\">'lalallala :&#123;0:^3&#125;'</span>.format(name))</span><br><span class=\"line\"><span class=\"comment\"># &#123;0:^3&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>这里多了个 <code>^</code>表示右对齐</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'lalallala :&#123;0:.3f&#125;'</span>.format(<span class=\"number\">1.0</span>/<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"comment\"># &#123;0:.3f&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>0表示第一个参数</li>\n<li>：后面没有数字表示宽度则自动分配</li>\n<li>.3表示小数点后3位</li>\n<li>f表示按照浮点数输出</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">' :&#123;0:_^100.3f&#125;'</span>.format(<span class=\"number\">1.0</span>/<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"comment\"># &#123;0:.3f&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>这里的下滑线是填充文本</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>对比一下，python字符串格式化操作和JavaScript很相似的<br>都有两种方式<br>1.字符串和变量++++这种操作，但是python需要将不是str类型的变量转为str类型，而js不用<br>2.python中’{}’.format()，js中`${}`这种操作</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>本文是我初学python对格式化字符操作中的一些相对疑难问题的记录和理解</p>\n<h3 id=\"二、python中格式化方法format\"><a href=\"#二、python中格式化方法format\" class=\"headerlink\" title=\"二、python中格式化方法format\"></a>二、python中格式化方法format</h3><h4 id=\"1-简单用法\"><a href=\"#1-简单用法\" class=\"headerlink\" title=\"1.简单用法\"></a>1.简单用法</h4><p>对于format最简单的用法就是这样了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">'YMBo'</span></span><br><span class=\"line\">age=<span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'&#123;0&#125; is &#123;1&#125; years old'</span>.format(name,age)</span><br></pre></td></tr></table></figure></p>\n<p>输出为</p>\n<blockquote>\n<p>YMBo is 18 years old</p>\n</blockquote>\n<p>对于这种字符串拼接也可以用这种方式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">'YMBo'</span></span><br><span class=\"line\">age=<span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> name+<span class=\"string\">' and '</span>+str(age)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>注意！这种方式的字符串拼接类型都要为 str，所以<code>age</code>这一项要转为str，而format这中方式就不用</li>\n</ul>\n<h4 id=\"2-复杂用法\"><a href=\"#2-复杂用法\" class=\"headerlink\" title=\"2.复杂用法\"></a>2.复杂用法</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">'YMBo'</span></span><br><span class=\"line\">print(<span class=\"string\">'lalallala :&#123;0:3&#125;'</span>.format(name))</span><br><span class=\"line\"><span class=\"comment\"># &#123;0:3&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>0：这里的 0 表示第几个参数，这里只有一个所以是 0</li>\n<li>3：这个3表示输出宽度，如果输出宽度小于字符串宽度则最后输出宽度为字符串宽度</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=<span class=\"string\">'YMBo'</span></span><br><span class=\"line\">print(<span class=\"string\">'lalallala :&#123;0:^3&#125;'</span>.format(name))</span><br><span class=\"line\"><span class=\"comment\"># &#123;0:^3&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>这里多了个 <code>^</code>表示右对齐</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'lalallala :&#123;0:.3f&#125;'</span>.format(<span class=\"number\">1.0</span>/<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"comment\"># &#123;0:.3f&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>0表示第一个参数</li>\n<li>：后面没有数字表示宽度则自动分配</li>\n<li>.3表示小数点后3位</li>\n<li>f表示按照浮点数输出</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">' :&#123;0:_^100.3f&#125;'</span>.format(<span class=\"number\">1.0</span>/<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"comment\"># &#123;0:.3f&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>这里的下滑线是填充文本</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>对比一下，python字符串格式化操作和JavaScript很相似的<br>都有两种方式<br>1.字符串和变量++++这种操作，但是python需要将不是str类型的变量转为str类型，而js不用<br>2.python中’{}’.format()，js中`${}`这种操作</p>\n"},{"title":"react中的context","date":"2017-08-21T03:29:02.000Z","_content":"## 一、为什么用context？\n现在我们有一颗组件树：\n![组件树](/images/react中的context/1.png)\n假如这个组件树代表的应用是用户可以自定义主题的，每个子组件都会根据主题的不同来调整自己的样式，所以‘主题色’这个东西就应该是组件之间共享的一个状态，所以应该放到Index组件中。\n但是在此之前能想到的办法只能是`this.props.主题色`\n![主题色的传递](/images/react中的context/2.png)\n这种形式，这种形式实在是麻烦，如果组件嵌套过深，就不得不一层层传递到最底层，所以就出现了简单的办法——通过context传递\ncontext这种方法是全局都能共享的状态，我们需要的时候就去取这个状态，不需要手动传递\n![context共享状态](/images/react中的context/3.png)\n\n## 二、实践，看看代码怎么写\n### 先创建一个整体结构\n``` javascript\nclass Index extends Component {\n  render () {\n    return (\n      <div>\n        <Header />\n        <Main />\n      </div>\n    )\n  }\n}\n\nclass Header extends Component {\n  render () {\n    return (\n    <div>\n      <h2>This is header</h2>\n      <Title />\n    </div>\n    )\n  }\n}\n\nclass Main extends Component {\n  render () {\n    return (\n    <div>\n      <h2>This is main</h2>\n      <Content />\n    </div>\n    )\n  }\n}\n\nclass Title extends Component {\n  render () {\n    return (\n      <h1>React.js 小书标题</h1>\n    )\n  }\n}\n\nclass Content extends Component {\n  render () {\n    return (\n    <div>\n      <h2>React.js 小书内容</h2>\n    </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Index />,\n  document.getElementById('root')\n)\n```\n### 修改Index组件\n修改Index组件，让他往自己的context中放一个themeColor：\n``` javascript\nclass Index extends Component {\n  static childContextTypes = {\n    themeColor: PropTypes.string\n  }\n\n  constructor () {\n    super()\n    this.state = { themeColor: 'red' }\n  }\n\n  getChildContext () {\n    return { themeColor: this.state.themeColor }\n  }\n\n  render () {\n    return (\n      <div>\n        <Header />\n        <Main />\n      </div>\n    )\n  }\n}\n```\n### 代码说明\n1.`state`初始化一个`themeColor`状态，方便以后的修改\n2.`getChildContext`方法设置`context`，返回一个的对象就是`context`，所有子组件动能访问到，且用`this.state.themeColor`来设置`context`里面的`themeColor`\n3.注意，还需要加上一段参数的验证 `childContextTypes`,需要使用`prop-types`这个包，验证的是`getChildContext`返回的对象\n以上这些都是`必须的`,这里要提及一下为啥要验证`context`，这么多步骤多麻烦，据说`context`是一个危险的属性(`context 里面的数据能被随意接触就能被随意修改，每个组件都能够改 context 里面的内容会导致程序的运行不可预料`),所以按照react.js团队的想法就是，把危险的事情搞复杂一些，提高使用门栏人们就不去用了\n\n### 子组件的设置\n``` javascript\nclass Title extends Component {\n  static contextTypes = {\n    themeColor: PropTypes.string\n  }\n\n  render () {\n    return (\n      <h1 style={{ color: this.context.themeColor }}>React.js 小书标题</h1>\n    )\n  }\n}\n``` \n1.利用`contextTypes`进行验证，必写的，不写就无法获取`context`的状态，\n2.使用的话是通过`this.context.themeColor`来获取值的\n\n## 修改context\n在Index里面，我们已经初始化一个`state`状态了，叫：`this.state.themeColor`,所以使用setState就可以了\n\n## 四、我的例子:\n![点击变色按钮前](/images/react中的context/4.png)\n![点击变色按钮后](/images/react中的context/5.png)","source":"_posts/react中的context.md","raw":"---\ntitle: react中的context\ndate: 2017-08-21 11:29:02\ntags: react\n---\n## 一、为什么用context？\n现在我们有一颗组件树：\n![组件树](/images/react中的context/1.png)\n假如这个组件树代表的应用是用户可以自定义主题的，每个子组件都会根据主题的不同来调整自己的样式，所以‘主题色’这个东西就应该是组件之间共享的一个状态，所以应该放到Index组件中。\n但是在此之前能想到的办法只能是`this.props.主题色`\n![主题色的传递](/images/react中的context/2.png)\n这种形式，这种形式实在是麻烦，如果组件嵌套过深，就不得不一层层传递到最底层，所以就出现了简单的办法——通过context传递\ncontext这种方法是全局都能共享的状态，我们需要的时候就去取这个状态，不需要手动传递\n![context共享状态](/images/react中的context/3.png)\n\n## 二、实践，看看代码怎么写\n### 先创建一个整体结构\n``` javascript\nclass Index extends Component {\n  render () {\n    return (\n      <div>\n        <Header />\n        <Main />\n      </div>\n    )\n  }\n}\n\nclass Header extends Component {\n  render () {\n    return (\n    <div>\n      <h2>This is header</h2>\n      <Title />\n    </div>\n    )\n  }\n}\n\nclass Main extends Component {\n  render () {\n    return (\n    <div>\n      <h2>This is main</h2>\n      <Content />\n    </div>\n    )\n  }\n}\n\nclass Title extends Component {\n  render () {\n    return (\n      <h1>React.js 小书标题</h1>\n    )\n  }\n}\n\nclass Content extends Component {\n  render () {\n    return (\n    <div>\n      <h2>React.js 小书内容</h2>\n    </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Index />,\n  document.getElementById('root')\n)\n```\n### 修改Index组件\n修改Index组件，让他往自己的context中放一个themeColor：\n``` javascript\nclass Index extends Component {\n  static childContextTypes = {\n    themeColor: PropTypes.string\n  }\n\n  constructor () {\n    super()\n    this.state = { themeColor: 'red' }\n  }\n\n  getChildContext () {\n    return { themeColor: this.state.themeColor }\n  }\n\n  render () {\n    return (\n      <div>\n        <Header />\n        <Main />\n      </div>\n    )\n  }\n}\n```\n### 代码说明\n1.`state`初始化一个`themeColor`状态，方便以后的修改\n2.`getChildContext`方法设置`context`，返回一个的对象就是`context`，所有子组件动能访问到，且用`this.state.themeColor`来设置`context`里面的`themeColor`\n3.注意，还需要加上一段参数的验证 `childContextTypes`,需要使用`prop-types`这个包，验证的是`getChildContext`返回的对象\n以上这些都是`必须的`,这里要提及一下为啥要验证`context`，这么多步骤多麻烦，据说`context`是一个危险的属性(`context 里面的数据能被随意接触就能被随意修改，每个组件都能够改 context 里面的内容会导致程序的运行不可预料`),所以按照react.js团队的想法就是，把危险的事情搞复杂一些，提高使用门栏人们就不去用了\n\n### 子组件的设置\n``` javascript\nclass Title extends Component {\n  static contextTypes = {\n    themeColor: PropTypes.string\n  }\n\n  render () {\n    return (\n      <h1 style={{ color: this.context.themeColor }}>React.js 小书标题</h1>\n    )\n  }\n}\n``` \n1.利用`contextTypes`进行验证，必写的，不写就无法获取`context`的状态，\n2.使用的话是通过`this.context.themeColor`来获取值的\n\n## 修改context\n在Index里面，我们已经初始化一个`state`状态了，叫：`this.state.themeColor`,所以使用setState就可以了\n\n## 四、我的例子:\n![点击变色按钮前](/images/react中的context/4.png)\n![点击变色按钮后](/images/react中的context/5.png)","slug":"react中的context","published":1,"updated":"2018-09-28T02:53:25.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kgz000ovps6obat44hd","content":"<h2 id=\"一、为什么用context？\"><a href=\"#一、为什么用context？\" class=\"headerlink\" title=\"一、为什么用context？\"></a>一、为什么用context？</h2><p>现在我们有一颗组件树：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/1.png\" alt=\"组件树\" title=\"\">\n                </div>\n                <div class=\"image-caption\">组件树</div>\n            </figure><br>假如这个组件树代表的应用是用户可以自定义主题的，每个子组件都会根据主题的不同来调整自己的样式，所以‘主题色’这个东西就应该是组件之间共享的一个状态，所以应该放到Index组件中。<br>但是在此之前能想到的办法只能是<code>this.props.主题色</code><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/2.png\" alt=\"主题色的传递\" title=\"\">\n                </div>\n                <div class=\"image-caption\">主题色的传递</div>\n            </figure><br>这种形式，这种形式实在是麻烦，如果组件嵌套过深，就不得不一层层传递到最底层，所以就出现了简单的办法——通过context传递<br>context这种方法是全局都能共享的状态，我们需要的时候就去取这个状态，不需要手动传递<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/3.png\" alt=\"context共享状态\" title=\"\">\n                </div>\n                <div class=\"image-caption\">context共享状态</div>\n            </figure></p>\n<h2 id=\"二、实践，看看代码怎么写\"><a href=\"#二、实践，看看代码怎么写\" class=\"headerlink\" title=\"二、实践，看看代码怎么写\"></a>二、实践，看看代码怎么写</h2><h3 id=\"先创建一个整体结构\"><a href=\"#先创建一个整体结构\" class=\"headerlink\" title=\"先创建一个整体结构\"></a>先创建一个整体结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Header /&gt;</span><br><span class=\"line\">        &lt;Main /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">class Header extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  render () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h2&gt;This is header&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;Title /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">class Main extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  render () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h2&gt;This is main&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;Content /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">class Title extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  render () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h1&gt;React.js 小书标题&lt;/</span>h1&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Content</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h2&gt;React.js 小书内容&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Index /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改Index组件\"><a href=\"#修改Index组件\" class=\"headerlink\" title=\"修改Index组件\"></a>修改Index组件</h3><p>修改Index组件，让他往自己的context中放一个themeColor：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> childContextTypes = &#123;</span><br><span class=\"line\">    themeColor: PropTypes.string</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">themeColor</span>: <span class=\"string\">'red'</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getChildContext () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">themeColor</span>: <span class=\"keyword\">this</span>.state.themeColor &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Header /&gt;</span><br><span class=\"line\">        &lt;Main /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><p>1.<code>state</code>初始化一个<code>themeColor</code>状态，方便以后的修改<br>2.<code>getChildContext</code>方法设置<code>context</code>，返回一个的对象就是<code>context</code>，所有子组件动能访问到，且用<code>this.state.themeColor</code>来设置<code>context</code>里面的<code>themeColor</code><br>3.注意，还需要加上一段参数的验证 <code>childContextTypes</code>,需要使用<code>prop-types</code>这个包，验证的是<code>getChildContext</code>返回的对象<br>以上这些都是<code>必须的</code>,这里要提及一下为啥要验证<code>context</code>，这么多步骤多麻烦，据说<code>context</code>是一个危险的属性(<code>context 里面的数据能被随意接触就能被随意修改，每个组件都能够改 context 里面的内容会导致程序的运行不可预料</code>),所以按照react.js团队的想法就是，把危险的事情搞复杂一些，提高使用门栏人们就不去用了</p>\n<h3 id=\"子组件的设置\"><a href=\"#子组件的设置\" class=\"headerlink\" title=\"子组件的设置\"></a>子组件的设置</h3><pre><code class=\"javascript\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Title</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"keyword\">static</span> contextTypes = {\n    themeColor: PropTypes.string\n  }\n\n  render () {\n    <span class=\"keyword\">return</span> (\n      &lt;h1 style=<span class=\"xml\"><span class=\"comment\">{{ color: this.context.themeColor }}</span>&gt;React.js 小书标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>\n    )\n  }\n}\n</code></pre>\n<p>1.利用<code>contextTypes</code>进行验证，必写的，不写就无法获取<code>context</code>的状态，<br>2.使用的话是通过<code>this.context.themeColor</code>来获取值的</p>\n<h2 id=\"修改context\"><a href=\"#修改context\" class=\"headerlink\" title=\"修改context\"></a>修改context</h2><p>在Index里面，我们已经初始化一个<code>state</code>状态了，叫：<code>this.state.themeColor</code>,所以使用setState就可以了</p>\n<h2 id=\"四、我的例子\"><a href=\"#四、我的例子\" class=\"headerlink\" title=\"四、我的例子:\"></a>四、我的例子:</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/4.png\" alt=\"点击变色按钮前\" title=\"\">\n                </div>\n                <div class=\"image-caption\">点击变色按钮前</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/5.png\" alt=\"点击变色按钮后\" title=\"\">\n                </div>\n                <div class=\"image-caption\">点击变色按钮后</div>\n            </figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、为什么用context？\"><a href=\"#一、为什么用context？\" class=\"headerlink\" title=\"一、为什么用context？\"></a>一、为什么用context？</h2><p>现在我们有一颗组件树：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/1.png\" alt=\"组件树\" title=\"\">\n                </div>\n                <div class=\"image-caption\">组件树</div>\n            </figure><br>假如这个组件树代表的应用是用户可以自定义主题的，每个子组件都会根据主题的不同来调整自己的样式，所以‘主题色’这个东西就应该是组件之间共享的一个状态，所以应该放到Index组件中。<br>但是在此之前能想到的办法只能是<code>this.props.主题色</code><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/2.png\" alt=\"主题色的传递\" title=\"\">\n                </div>\n                <div class=\"image-caption\">主题色的传递</div>\n            </figure><br>这种形式，这种形式实在是麻烦，如果组件嵌套过深，就不得不一层层传递到最底层，所以就出现了简单的办法——通过context传递<br>context这种方法是全局都能共享的状态，我们需要的时候就去取这个状态，不需要手动传递<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/3.png\" alt=\"context共享状态\" title=\"\">\n                </div>\n                <div class=\"image-caption\">context共享状态</div>\n            </figure></p>\n<h2 id=\"二、实践，看看代码怎么写\"><a href=\"#二、实践，看看代码怎么写\" class=\"headerlink\" title=\"二、实践，看看代码怎么写\"></a>二、实践，看看代码怎么写</h2><h3 id=\"先创建一个整体结构\"><a href=\"#先创建一个整体结构\" class=\"headerlink\" title=\"先创建一个整体结构\"></a>先创建一个整体结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Header /&gt;</span><br><span class=\"line\">        &lt;Main /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">class Header extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  render () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h2&gt;This is header&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;Title /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">class Main extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  render () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h2&gt;This is main&lt;/</span>h2&gt;</span><br><span class=\"line\">      &lt;Content /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">class Title extends Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  render () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return (</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h1&gt;React.js 小书标题&lt;/</span>h1&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Content</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h2&gt;React.js 小书内容&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Index /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改Index组件\"><a href=\"#修改Index组件\" class=\"headerlink\" title=\"修改Index组件\"></a>修改Index组件</h3><p>修改Index组件，让他往自己的context中放一个themeColor：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> childContextTypes = &#123;</span><br><span class=\"line\">    themeColor: PropTypes.string</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">themeColor</span>: <span class=\"string\">'red'</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getChildContext () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">themeColor</span>: <span class=\"keyword\">this</span>.state.themeColor &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Header /&gt;</span><br><span class=\"line\">        &lt;Main /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><p>1.<code>state</code>初始化一个<code>themeColor</code>状态，方便以后的修改<br>2.<code>getChildContext</code>方法设置<code>context</code>，返回一个的对象就是<code>context</code>，所有子组件动能访问到，且用<code>this.state.themeColor</code>来设置<code>context</code>里面的<code>themeColor</code><br>3.注意，还需要加上一段参数的验证 <code>childContextTypes</code>,需要使用<code>prop-types</code>这个包，验证的是<code>getChildContext</code>返回的对象<br>以上这些都是<code>必须的</code>,这里要提及一下为啥要验证<code>context</code>，这么多步骤多麻烦，据说<code>context</code>是一个危险的属性(<code>context 里面的数据能被随意接触就能被随意修改，每个组件都能够改 context 里面的内容会导致程序的运行不可预料</code>),所以按照react.js团队的想法就是，把危险的事情搞复杂一些，提高使用门栏人们就不去用了</p>\n<h3 id=\"子组件的设置\"><a href=\"#子组件的设置\" class=\"headerlink\" title=\"子组件的设置\"></a>子组件的设置</h3><pre><code class=\"javascript\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Title</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>{\n  <span class=\"keyword\">static</span> contextTypes = {\n    themeColor: PropTypes.string\n  }\n\n  render () {\n    <span class=\"keyword\">return</span> (\n      &lt;h1 style=<span class=\"xml\"><span class=\"comment\">{{ color: this.context.themeColor }}</span>&gt;React.js 小书标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>\n    )\n  }\n}\n</code></pre>\n<p>1.利用<code>contextTypes</code>进行验证，必写的，不写就无法获取<code>context</code>的状态，<br>2.使用的话是通过<code>this.context.themeColor</code>来获取值的</p>\n<h2 id=\"修改context\"><a href=\"#修改context\" class=\"headerlink\" title=\"修改context\"></a>修改context</h2><p>在Index里面，我们已经初始化一个<code>state</code>状态了，叫：<code>this.state.themeColor</code>,所以使用setState就可以了</p>\n<h2 id=\"四、我的例子\"><a href=\"#四、我的例子\" class=\"headerlink\" title=\"四、我的例子:\"></a>四、我的例子:</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/4.png\" alt=\"点击变色按钮前\" title=\"\">\n                </div>\n                <div class=\"image-caption\">点击变色按钮前</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中的context/5.png\" alt=\"点击变色按钮后\" title=\"\">\n                </div>\n                <div class=\"image-caption\">点击变色按钮后</div>\n            </figure>"},{"title":"react中跨域请求数据","date":"2017-09-27T06:03:37.000Z","_content":"## 一、介绍\n在我写 [react ele](https://github.com/YMBo/react-ele) 项目的时候，里面的所有数据都要从ele获取，所以我之前的想法是先用死的数据模拟，然后用 node 写几个接口请求ele数据并返回给我的react。\n知道今天早上，我在纳闷 `react`开发过程中是用 `webpack` 起服务器的，那跟后台就是跨域了啊，这样ajax是没有办法请求的，所以吃完一个鸡蛋后查找了一番，果然让我找到了，看下面\n\n[传送门 -- gulp里服务端代理配置 ](https://ymbo.github.io/2018/01/09/http-proxy-middleware%E9%85%8D%E5%90%88gulp%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/)\n\n\n## 二、配置\nwebpack中 `proxy` 是设置代理的 \n``` javascript \nproxy: {\n  \"/api\": {\n      target: \"http://localhost:3000\",\n      secure: false,\n      changeOrigin : true\n    }\n},\n```\n现在比如说我 `/api/users` 这么请求，现在将代理请求http://localhost:3000/api/users \n\n` 注意 ` ：\n这里的 `secure` 参数表示能请求 `https` 的服务器\n`changeOrigin` 表示是否支持跨域请求，默认 `false` \n\n## 实例\n好了 现在我来试验一下\n``` javascript \n\"/base\": {\n    target: \"http://c.y.qq.com/\",\n    secure: false,\n    changeOrigin : true\n}\n```\n这个是我从qq音乐找了一个借口，在react中通过 `fetch` 请求\n``` javascript\nvar result = fetch('/base/fcgi-bin/fcg_wxdownload_config.fcg', { credentials: 'include', headers: { 'Accept': 'application/json, text/plain, */*' } })\nresult.then(res =>{return res.text();}).then(text => { console.log(text) })\n```\n看看返回结果\n![控制台输出](/images/react中跨域请求数据/1.png)\n是不是很方便~","source":"_posts/react中跨域请求数据.md","raw":"---\ntitle: react中跨域请求数据\ndate: 2017-09-27 14:03:37\ntags: [webpack proxy,react跨域请求]\n---\n## 一、介绍\n在我写 [react ele](https://github.com/YMBo/react-ele) 项目的时候，里面的所有数据都要从ele获取，所以我之前的想法是先用死的数据模拟，然后用 node 写几个接口请求ele数据并返回给我的react。\n知道今天早上，我在纳闷 `react`开发过程中是用 `webpack` 起服务器的，那跟后台就是跨域了啊，这样ajax是没有办法请求的，所以吃完一个鸡蛋后查找了一番，果然让我找到了，看下面\n\n[传送门 -- gulp里服务端代理配置 ](https://ymbo.github.io/2018/01/09/http-proxy-middleware%E9%85%8D%E5%90%88gulp%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/)\n\n\n## 二、配置\nwebpack中 `proxy` 是设置代理的 \n``` javascript \nproxy: {\n  \"/api\": {\n      target: \"http://localhost:3000\",\n      secure: false,\n      changeOrigin : true\n    }\n},\n```\n现在比如说我 `/api/users` 这么请求，现在将代理请求http://localhost:3000/api/users \n\n` 注意 ` ：\n这里的 `secure` 参数表示能请求 `https` 的服务器\n`changeOrigin` 表示是否支持跨域请求，默认 `false` \n\n## 实例\n好了 现在我来试验一下\n``` javascript \n\"/base\": {\n    target: \"http://c.y.qq.com/\",\n    secure: false,\n    changeOrigin : true\n}\n```\n这个是我从qq音乐找了一个借口，在react中通过 `fetch` 请求\n``` javascript\nvar result = fetch('/base/fcgi-bin/fcg_wxdownload_config.fcg', { credentials: 'include', headers: { 'Accept': 'application/json, text/plain, */*' } })\nresult.then(res =>{return res.text();}).then(text => { console.log(text) })\n```\n看看返回结果\n![控制台输出](/images/react中跨域请求数据/1.png)\n是不是很方便~","slug":"react中跨域请求数据","published":1,"updated":"2018-09-28T02:53:25.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kh1000pvps6nwaetokt","content":"<h2 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h2><p>在我写 <a href=\"https://github.com/YMBo/react-ele\" target=\"_blank\" rel=\"noopener\">react ele</a> 项目的时候，里面的所有数据都要从ele获取，所以我之前的想法是先用死的数据模拟，然后用 node 写几个接口请求ele数据并返回给我的react。<br>知道今天早上，我在纳闷 <code>react</code>开发过程中是用 <code>webpack</code> 起服务器的，那跟后台就是跨域了啊，这样ajax是没有办法请求的，所以吃完一个鸡蛋后查找了一番，果然让我找到了，看下面</p>\n<p><a href=\"https://ymbo.github.io/2018/01/09/http-proxy-middleware%E9%85%8D%E5%90%88gulp%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/\" target=\"_blank\" rel=\"noopener\">传送门 – gulp里服务端代理配置 </a></p>\n<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><p>webpack中 <code>proxy</code> 是设置代理的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"/api\"</span>: &#123;</span><br><span class=\"line\">      target: <span class=\"string\">\"http://localhost:3000\"</span>,</span><br><span class=\"line\">      secure: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      changeOrigin : <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>现在比如说我 <code>/api/users</code> 这么请求，现在将代理请求<a href=\"http://localhost:3000/api/users\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/users</a> </p>\n<p><code>注意</code> ：<br>这里的 <code>secure</code> 参数表示能请求 <code>https</code> 的服务器<br><code>changeOrigin</code> 表示是否支持跨域请求，默认 <code>false</code> </p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>好了 现在我来试验一下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"/base\"</span>: &#123;</span><br><span class=\"line\">    target: <span class=\"string\">\"http://c.y.qq.com/\"</span>,</span><br><span class=\"line\">    secure: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    changeOrigin : <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个是我从qq音乐找了一个借口，在react中通过 <code>fetch</code> 请求<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = fetch(<span class=\"string\">'/base/fcgi-bin/fcg_wxdownload_config.fcg'</span>, &#123; <span class=\"attr\">credentials</span>: <span class=\"string\">'include'</span>, <span class=\"attr\">headers</span>: &#123; <span class=\"string\">'Accept'</span>: <span class=\"string\">'application/json, text/plain, */*'</span> &#125; &#125;)</span><br><span class=\"line\">result.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span>&#123;<span class=\"keyword\">return</span> res.text();&#125;).then(<span class=\"function\"><span class=\"params\">text</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(text) &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>看看返回结果<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中跨域请求数据/1.png\" alt=\"控制台输出\" title=\"\">\n                </div>\n                <div class=\"image-caption\">控制台输出</div>\n            </figure><br>是不是很方便~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h2><p>在我写 <a href=\"https://github.com/YMBo/react-ele\" target=\"_blank\" rel=\"noopener\">react ele</a> 项目的时候，里面的所有数据都要从ele获取，所以我之前的想法是先用死的数据模拟，然后用 node 写几个接口请求ele数据并返回给我的react。<br>知道今天早上，我在纳闷 <code>react</code>开发过程中是用 <code>webpack</code> 起服务器的，那跟后台就是跨域了啊，这样ajax是没有办法请求的，所以吃完一个鸡蛋后查找了一番，果然让我找到了，看下面</p>\n<p><a href=\"https://ymbo.github.io/2018/01/09/http-proxy-middleware%E9%85%8D%E5%90%88gulp%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/\" target=\"_blank\" rel=\"noopener\">传送门 – gulp里服务端代理配置 </a></p>\n<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><p>webpack中 <code>proxy</code> 是设置代理的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"/api\"</span>: &#123;</span><br><span class=\"line\">      target: <span class=\"string\">\"http://localhost:3000\"</span>,</span><br><span class=\"line\">      secure: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      changeOrigin : <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>现在比如说我 <code>/api/users</code> 这么请求，现在将代理请求<a href=\"http://localhost:3000/api/users\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/users</a> </p>\n<p><code>注意</code> ：<br>这里的 <code>secure</code> 参数表示能请求 <code>https</code> 的服务器<br><code>changeOrigin</code> 表示是否支持跨域请求，默认 <code>false</code> </p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>好了 现在我来试验一下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"/base\"</span>: &#123;</span><br><span class=\"line\">    target: <span class=\"string\">\"http://c.y.qq.com/\"</span>,</span><br><span class=\"line\">    secure: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    changeOrigin : <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个是我从qq音乐找了一个借口，在react中通过 <code>fetch</code> 请求<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = fetch(<span class=\"string\">'/base/fcgi-bin/fcg_wxdownload_config.fcg'</span>, &#123; <span class=\"attr\">credentials</span>: <span class=\"string\">'include'</span>, <span class=\"attr\">headers</span>: &#123; <span class=\"string\">'Accept'</span>: <span class=\"string\">'application/json, text/plain, */*'</span> &#125; &#125;)</span><br><span class=\"line\">result.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span>&#123;<span class=\"keyword\">return</span> res.text();&#125;).then(<span class=\"function\"><span class=\"params\">text</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(text) &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>看看返回结果<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react中跨域请求数据/1.png\" alt=\"控制台输出\" title=\"\">\n                </div>\n                <div class=\"image-caption\">控制台输出</div>\n            </figure><br>是不是很方便~</p>\n"},{"title":"react服务端渲染","date":"2017-12-26T09:02:19.000Z","_content":"看了react服务端渲染，有点蒙圈，先挖坑准备","source":"_posts/react服务端渲染.md","raw":"---\ntitle: react服务端渲染\ndate: 2017-12-26 17:02:19\ntags: 'react'\n---\n看了react服务端渲染，有点蒙圈，先挖坑准备","slug":"react服务端渲染","published":1,"updated":"2018-09-28T02:53:25.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kh3000rvps6qeglivws","content":"<p>看了react服务端渲染，有点蒙圈，先挖坑准备</p>\n","site":{"data":{}},"excerpt":"","more":"<p>看了react服务端渲染，有点蒙圈，先挖坑准备</p>\n"},{"title":"react生命周期详解","date":"2018-03-27T09:11:54.000Z","_content":"\n### 一、react生命周期\n* componentWillMount\n* componentDidMount\n* componentWillReceiveProps\n* shouldComponentUpdate\n* componentWillUpdate\n* componentDidUpdate\n* componentUnmount\n每个生命周期概念不是本文讲解重点，重点是生命周期在组件渲染时候容易造成的混淆\n\n### 二、componentWillReceiveProps 和 componentWillUpdate ？？\n\n`componentWillReceiveProps` ： 组件接收到一个新的props会被调用，在初始化render时不会调用\n`componentWillUpdate` : 组件接收到系的props`或state`时被调用，初始化不会被调用\n\n看起来好像一样啊，有什么区别呢？来看下面\n\n#### 1.来做测试\n先定义两个组件，App和Son，我们的目的就是看看上面提到的两个生命周期的不同，所以这一部分暂不讨论每个生命周期执行顺序，留在下一节讨论。\n``` javascript\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\tword:'儿子'\n\t\t}\n\t}\n\tcomponentWillMount(){\n\t\tconsole.log('他爹生命周期：componentWillMount')\n\t}\n\tcomponentDidMount(){\n\t\tconsole.log('他爹生命周期：componentDidMount')\n\t}\n\tcomponentWillReceiveProps(nextprops){\n\t\tconsole.log('他爹生命周期：componentWillReceiveProps')\n\t}\n\tshouldComponentUpdate(){\n\t\tconsole.log('他爹生命周期：shouldComponentUpdate')\n\t\treturn true;\n\t}\n\tcomponentWillUpdate(nextprops,nextstates){\n\t\tconsole.log('他爹生命周期：componentWillUpdate')\n\t}\n\tcomponentDidUpdate(){\n\t\tconsole.log('他爹生命周期：componentDidUpdate')\n\t}\n\tcomponentWillUnmount(){\n\t\tconsole.log('他爹生命周期：componentWillUnmount')\n\t}\n\thandleClick(word){\n\t\tthis.setState({\n\t\t\tword:this.state.word ==='儿子' ? '孙子':'儿子'\n\t\t})\n\t}\n\trender(){\n\t\tconsole.log('他爹render')\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<button onClick={this.handleClick.bind(this)}>App点我</button>\n\t\t\t\t<Son word={this.state.word} />\n\t\t\t</div>\n\t\t)\n\t}\n}\nclass Son extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\tword:''\n\t\t}\n\t}\n\tcomponentWillMount(){\n\t\tconsole.log('儿子生命周期：componentWillMount')\n\t\tthis.setState({\n\t\t\tword:this.props.word\n\t\t})\n\t}\n\tcomponentDidMount(){\n\t\tconsole.log('儿子生命周期：componentDidMount')\n\t}\n\tcomponentWillReceiveProps(nextprops){\n\t\tconsole.log('儿子生命周期：componentWillReceiveProps')\n\t}\n\tshouldComponentUpdate(){\n\t\tconsole.log('儿子生命周期：shouldComponentUpdate')\n\t\treturn true;\n\t}\n\tcomponentWillUpdate(nextprops,nextstates){\n\t\tconsole.log('儿子生命周期：componentWillUpdate')\n\t}\n\tcomponentDidUpdate(){\n\t\tconsole.log('儿子生命周期：componentDidUpdate')\n\t}\n\tcomponentWillUnmount(){\n\t\tconsole.log('儿子生命周期：componentWillUnmount')\n\t}\n\thandleClick(){\n\t\tthis.setState({\n\t\t\tword:this.state.word ==='儿子' ? '孙子':'儿子'\n\t\t})\n\t}\n\trender(){\n\t\tconsole.log('儿子：render')\n\t\treturn(\n\t\t\t<div>\n\t\t\t{this.state.word}\n\t\t\t<button onClick={this.handleClick.bind(this)}>儿子按钮</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n逻辑很简单，父组件和子组件都可以通过各自的按钮改变子组件文字的内容\n\n先点击 `儿子按钮` 按钮，也就是子组件Son里的按钮\n![执行结果](/images/react生命周期详解/1.png)\n可以看到 *componentWillReceiveProps*  没有执行\n\n然后点击 `APP点我` 按钮：\n点之前：\n![点之前](/images/react生命周期详解/2.png)\n\n点之后：\n![点之后](/images/react生命周期详解/3.png)\n\n可以看到子组件的文字并没有发生变化，执行了上图中的这些生命周期方法。\n\n所以可以得到结论：componentWillReceiveProps触发条件是props更新，而componentWillUpdate触发条件是props或者states更新，上面说的时候也着重标记了\n\n为了让父组件的按钮能更改子组件的内容，我需要在*componentWillReceiveProps*或*componentWillUpdate*里写上\n``` javascript\nthis.setState({\n\tword:nextprops.word\n})\n```\n官网上说不能写在*componentWillUpdate*里，建议写在*componentWillReceiveProps*，我就不明白了，我非得写在*componentWillUpdate*里，看看执行结果\n![报错](/images/react生命周期详解/4.png)\n\n看 死循环了，因为上面提到*componentWillUpdate*触发条件是 states 变化 和 props变化，写在了这里就不停的setState  states的值，所以就不停的触发*componentWillUpdate*，因此像这种父组件更改子组件的内容应该写在 *componentWillReceiveProps* 里，来试试：\n![ojbk](/images/react生命周期详解/5.png)\n好，一切正常！\n\n** 总结：**\n\n名称 | componentWillReceiveProps | componentWillUpdate \n- | :-: | :-:\n触发条件 | props变化 |  props或states变化\n注意事项 | setState的更新要写在componentWillReceiveProps里\n\n\t\t\n\t\n### 三、生命周期执行顺序\n还是上面的例子\n\n#### 1.初始化时父子组件的声明周期执行顺序\n![结果](/images/react生命周期详解/6.png)\n\n#### 2.点击父组件的按钮时生命周期执行顺序\n![结果](/images/react生命周期详解/7.png)\n\n#### 3.点击子组件执行顺序\n![结果](/images/react生命周期详解/8.png)\n\n#### 4.还有一种情况，点击子组件触发父组件内容的更改\n``` javascript\nclass Son extends Component{\n\tponentWillMount(){\n\t\tconsole.log('儿子生命周期：componentWillMount')\n\t}\n\tcomponentDidMount(){\n\t\tconsole.log('儿子生命周期：componentDidMount')\n\t}\n\tcomponentWillReceiveProps(nextprops){\n\t\tconsole.log('儿子生命周期：componentWillReceiveProps')\n\t}\n\tshouldComponentUpdate(){\n\t\tconsole.log('儿子生命周期：shouldComponentUpdate')\n\t\treturn true;\n\t}\n\tcomponentWillUpdate(nextprops,nextstates){\n\t\tconsole.log('儿子生命周期：componentWillUpdate')\n\t}\n\tcomponentDidUpdate(){\n\t\tconsole.log('儿子生命周期：componentDidUpdate')\n\t}\n\tcomponentWillUnmount(){\n\t\tconsole.log('儿子生命周期：componentWillUnmount')\n\t}\n\thandleClick(){\n\t\tvar word=this.props.word === '儿子' ? '孙子':'儿子'\n\t\tthis.props.click(word)\n\t}\n\trender(){\n\t\tconsole.log('儿子：render')\n\t\treturn(\n\t\t\t<div>\n\t\t\t<button onClick={this.handleClick.bind(this)}>儿子按钮</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\tword:'儿子'\n\t\t}\n\t}\n\tcomponentWillMount(){\n\t\tconsole.log('他爹生命周期：componentWillMount')\n\t}\n\tcomponentDidMount(){\n\t\tconsole.log('他爹生命周期：componentDidMount')\n\t}\n\tcomponentWillReceiveProps(nextprops){\n\t\tconsole.log('他爹生命周期：componentWillReceiveProps')\n\t}\n\tshouldComponentUpdate(){\n\t\tconsole.log('他爹生命周期：shouldComponentUpdate')\n\t\treturn true;\n\t}\n\tcomponentWillUpdate(nextprops,nextstates){\n\t\tconsole.log('他爹生命周期：componentWillUpdate')\n\t}\n\tcomponentDidUpdate(){\n\t\tconsole.log('他爹生命周期：componentDidUpdate')\n\t}\n\tcomponentWillUnmount(){\n\t\tconsole.log('他爹生命周期：componentWillUnmount')\n\t}\n\thandleClick(word){\n\t\tthis.setState({\n\t\t\tword:word\n\t\t})\n\t}\n\trender(){\n\t\tconsole.log('他爹render')\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t{this.state.word}\n\t\t\t\t<Son word={this.state.word} click={this.handleClick.bind(this)} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n![结果](/images/react生命周期详解/9.png)\n\n**上述的几种执行结果也很简单，看一看就会执行顺序就会变得清晰了**","source":"_posts/react生命周期详解.md","raw":"---\ntitle: react生命周期详解\ndate: 2018-03-27 17:11:54\ntags: react\n---\n\n### 一、react生命周期\n* componentWillMount\n* componentDidMount\n* componentWillReceiveProps\n* shouldComponentUpdate\n* componentWillUpdate\n* componentDidUpdate\n* componentUnmount\n每个生命周期概念不是本文讲解重点，重点是生命周期在组件渲染时候容易造成的混淆\n\n### 二、componentWillReceiveProps 和 componentWillUpdate ？？\n\n`componentWillReceiveProps` ： 组件接收到一个新的props会被调用，在初始化render时不会调用\n`componentWillUpdate` : 组件接收到系的props`或state`时被调用，初始化不会被调用\n\n看起来好像一样啊，有什么区别呢？来看下面\n\n#### 1.来做测试\n先定义两个组件，App和Son，我们的目的就是看看上面提到的两个生命周期的不同，所以这一部分暂不讨论每个生命周期执行顺序，留在下一节讨论。\n``` javascript\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\tword:'儿子'\n\t\t}\n\t}\n\tcomponentWillMount(){\n\t\tconsole.log('他爹生命周期：componentWillMount')\n\t}\n\tcomponentDidMount(){\n\t\tconsole.log('他爹生命周期：componentDidMount')\n\t}\n\tcomponentWillReceiveProps(nextprops){\n\t\tconsole.log('他爹生命周期：componentWillReceiveProps')\n\t}\n\tshouldComponentUpdate(){\n\t\tconsole.log('他爹生命周期：shouldComponentUpdate')\n\t\treturn true;\n\t}\n\tcomponentWillUpdate(nextprops,nextstates){\n\t\tconsole.log('他爹生命周期：componentWillUpdate')\n\t}\n\tcomponentDidUpdate(){\n\t\tconsole.log('他爹生命周期：componentDidUpdate')\n\t}\n\tcomponentWillUnmount(){\n\t\tconsole.log('他爹生命周期：componentWillUnmount')\n\t}\n\thandleClick(word){\n\t\tthis.setState({\n\t\t\tword:this.state.word ==='儿子' ? '孙子':'儿子'\n\t\t})\n\t}\n\trender(){\n\t\tconsole.log('他爹render')\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<button onClick={this.handleClick.bind(this)}>App点我</button>\n\t\t\t\t<Son word={this.state.word} />\n\t\t\t</div>\n\t\t)\n\t}\n}\nclass Son extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\tword:''\n\t\t}\n\t}\n\tcomponentWillMount(){\n\t\tconsole.log('儿子生命周期：componentWillMount')\n\t\tthis.setState({\n\t\t\tword:this.props.word\n\t\t})\n\t}\n\tcomponentDidMount(){\n\t\tconsole.log('儿子生命周期：componentDidMount')\n\t}\n\tcomponentWillReceiveProps(nextprops){\n\t\tconsole.log('儿子生命周期：componentWillReceiveProps')\n\t}\n\tshouldComponentUpdate(){\n\t\tconsole.log('儿子生命周期：shouldComponentUpdate')\n\t\treturn true;\n\t}\n\tcomponentWillUpdate(nextprops,nextstates){\n\t\tconsole.log('儿子生命周期：componentWillUpdate')\n\t}\n\tcomponentDidUpdate(){\n\t\tconsole.log('儿子生命周期：componentDidUpdate')\n\t}\n\tcomponentWillUnmount(){\n\t\tconsole.log('儿子生命周期：componentWillUnmount')\n\t}\n\thandleClick(){\n\t\tthis.setState({\n\t\t\tword:this.state.word ==='儿子' ? '孙子':'儿子'\n\t\t})\n\t}\n\trender(){\n\t\tconsole.log('儿子：render')\n\t\treturn(\n\t\t\t<div>\n\t\t\t{this.state.word}\n\t\t\t<button onClick={this.handleClick.bind(this)}>儿子按钮</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n逻辑很简单，父组件和子组件都可以通过各自的按钮改变子组件文字的内容\n\n先点击 `儿子按钮` 按钮，也就是子组件Son里的按钮\n![执行结果](/images/react生命周期详解/1.png)\n可以看到 *componentWillReceiveProps*  没有执行\n\n然后点击 `APP点我` 按钮：\n点之前：\n![点之前](/images/react生命周期详解/2.png)\n\n点之后：\n![点之后](/images/react生命周期详解/3.png)\n\n可以看到子组件的文字并没有发生变化，执行了上图中的这些生命周期方法。\n\n所以可以得到结论：componentWillReceiveProps触发条件是props更新，而componentWillUpdate触发条件是props或者states更新，上面说的时候也着重标记了\n\n为了让父组件的按钮能更改子组件的内容，我需要在*componentWillReceiveProps*或*componentWillUpdate*里写上\n``` javascript\nthis.setState({\n\tword:nextprops.word\n})\n```\n官网上说不能写在*componentWillUpdate*里，建议写在*componentWillReceiveProps*，我就不明白了，我非得写在*componentWillUpdate*里，看看执行结果\n![报错](/images/react生命周期详解/4.png)\n\n看 死循环了，因为上面提到*componentWillUpdate*触发条件是 states 变化 和 props变化，写在了这里就不停的setState  states的值，所以就不停的触发*componentWillUpdate*，因此像这种父组件更改子组件的内容应该写在 *componentWillReceiveProps* 里，来试试：\n![ojbk](/images/react生命周期详解/5.png)\n好，一切正常！\n\n** 总结：**\n\n名称 | componentWillReceiveProps | componentWillUpdate \n- | :-: | :-:\n触发条件 | props变化 |  props或states变化\n注意事项 | setState的更新要写在componentWillReceiveProps里\n\n\t\t\n\t\n### 三、生命周期执行顺序\n还是上面的例子\n\n#### 1.初始化时父子组件的声明周期执行顺序\n![结果](/images/react生命周期详解/6.png)\n\n#### 2.点击父组件的按钮时生命周期执行顺序\n![结果](/images/react生命周期详解/7.png)\n\n#### 3.点击子组件执行顺序\n![结果](/images/react生命周期详解/8.png)\n\n#### 4.还有一种情况，点击子组件触发父组件内容的更改\n``` javascript\nclass Son extends Component{\n\tponentWillMount(){\n\t\tconsole.log('儿子生命周期：componentWillMount')\n\t}\n\tcomponentDidMount(){\n\t\tconsole.log('儿子生命周期：componentDidMount')\n\t}\n\tcomponentWillReceiveProps(nextprops){\n\t\tconsole.log('儿子生命周期：componentWillReceiveProps')\n\t}\n\tshouldComponentUpdate(){\n\t\tconsole.log('儿子生命周期：shouldComponentUpdate')\n\t\treturn true;\n\t}\n\tcomponentWillUpdate(nextprops,nextstates){\n\t\tconsole.log('儿子生命周期：componentWillUpdate')\n\t}\n\tcomponentDidUpdate(){\n\t\tconsole.log('儿子生命周期：componentDidUpdate')\n\t}\n\tcomponentWillUnmount(){\n\t\tconsole.log('儿子生命周期：componentWillUnmount')\n\t}\n\thandleClick(){\n\t\tvar word=this.props.word === '儿子' ? '孙子':'儿子'\n\t\tthis.props.click(word)\n\t}\n\trender(){\n\t\tconsole.log('儿子：render')\n\t\treturn(\n\t\t\t<div>\n\t\t\t<button onClick={this.handleClick.bind(this)}>儿子按钮</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\tword:'儿子'\n\t\t}\n\t}\n\tcomponentWillMount(){\n\t\tconsole.log('他爹生命周期：componentWillMount')\n\t}\n\tcomponentDidMount(){\n\t\tconsole.log('他爹生命周期：componentDidMount')\n\t}\n\tcomponentWillReceiveProps(nextprops){\n\t\tconsole.log('他爹生命周期：componentWillReceiveProps')\n\t}\n\tshouldComponentUpdate(){\n\t\tconsole.log('他爹生命周期：shouldComponentUpdate')\n\t\treturn true;\n\t}\n\tcomponentWillUpdate(nextprops,nextstates){\n\t\tconsole.log('他爹生命周期：componentWillUpdate')\n\t}\n\tcomponentDidUpdate(){\n\t\tconsole.log('他爹生命周期：componentDidUpdate')\n\t}\n\tcomponentWillUnmount(){\n\t\tconsole.log('他爹生命周期：componentWillUnmount')\n\t}\n\thandleClick(word){\n\t\tthis.setState({\n\t\t\tword:word\n\t\t})\n\t}\n\trender(){\n\t\tconsole.log('他爹render')\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t{this.state.word}\n\t\t\t\t<Son word={this.state.word} click={this.handleClick.bind(this)} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n```\n\n![结果](/images/react生命周期详解/9.png)\n\n**上述的几种执行结果也很简单，看一看就会执行顺序就会变得清晰了**","slug":"react生命周期详解","published":1,"updated":"2018-09-28T02:53:25.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kh5000tvps6ly097fnr","content":"<h3 id=\"一、react生命周期\"><a href=\"#一、react生命周期\" class=\"headerlink\" title=\"一、react生命周期\"></a>一、react生命周期</h3><ul>\n<li>componentWillMount</li>\n<li>componentDidMount</li>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>componentDidUpdate</li>\n<li>componentUnmount<br>每个生命周期概念不是本文讲解重点，重点是生命周期在组件渲染时候容易造成的混淆</li>\n</ul>\n<h3 id=\"二、componentWillReceiveProps-和-componentWillUpdate-？？\"><a href=\"#二、componentWillReceiveProps-和-componentWillUpdate-？？\" class=\"headerlink\" title=\"二、componentWillReceiveProps 和 componentWillUpdate ？？\"></a>二、componentWillReceiveProps 和 componentWillUpdate ？？</h3><p><code>componentWillReceiveProps</code> ： 组件接收到一个新的props会被调用，在初始化render时不会调用<br><code>componentWillUpdate</code> : 组件接收到系的props<code>或state</code>时被调用，初始化不会被调用</p>\n<p>看起来好像一样啊，有什么区别呢？来看下面</p>\n<h4 id=\"1-来做测试\"><a href=\"#1-来做测试\" class=\"headerlink\" title=\"1.来做测试\"></a>1.来做测试</h4><p>先定义两个组件，App和Son，我们的目的就是看看上面提到的两个生命周期的不同，所以这一部分暂不讨论每个生命周期执行顺序，留在下一节讨论。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.state=&#123;</span><br><span class=\"line\">\t\t\tword:<span class=\"string\">'儿子'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentDidMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillReceiveProps(nextprops)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillReceiveProps'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tshouldComponentUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：shouldComponentUpdate'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUpdate(nextprops,nextstates)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentDidUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUnmount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillUnmount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleClick(word)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\t\tword:<span class=\"keyword\">this</span>.state.word ===<span class=\"string\">'儿子'</span> ? <span class=\"string\">'孙子'</span>:<span class=\"string\">'儿子'</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹render'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t&lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;App点我&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&lt;Son word=&#123;this.state.word&#125; /</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">class Son extends Component&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tconstructor()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tsuper()</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tthis.state=&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tword:''</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentWillMount()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentWillMount')</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tthis.setState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tword:this.props.word</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentDidMount()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentDidMount')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentWillReceiveProps(nextprops)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentWillReceiveProps')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tshouldComponentUpdate()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：shouldComponentUpdate')</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn true;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentWillUpdate(nextprops,nextstates)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentWillUpdate')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentDidUpdate()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentDidUpdate')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentWillUnmount()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentWillUnmount')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\thandleClick()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tthis.setState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tword:this.state.word ==='儿子' ? '孙子':'儿子'</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\trender()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子：render')</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn(</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&#123;this.state.word&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;button onClick=&#123;this.handleClick.bind(this)&#125;&gt;儿子按钮&lt;/</span>button&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>逻辑很简单，父组件和子组件都可以通过各自的按钮改变子组件文字的内容</p>\n<p>先点击 <code>儿子按钮</code> 按钮，也就是子组件Son里的按钮<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/1.png\" alt=\"执行结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">执行结果</div>\n            </figure><br>可以看到 <em>componentWillReceiveProps</em>  没有执行</p>\n<p>然后点击 <code>APP点我</code> 按钮：<br>点之前：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/2.png\" alt=\"点之前\" title=\"\">\n                </div>\n                <div class=\"image-caption\">点之前</div>\n            </figure></p>\n<p>点之后：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/3.png\" alt=\"点之后\" title=\"\">\n                </div>\n                <div class=\"image-caption\">点之后</div>\n            </figure></p>\n<p>可以看到子组件的文字并没有发生变化，执行了上图中的这些生命周期方法。</p>\n<p>所以可以得到结论：componentWillReceiveProps触发条件是props更新，而componentWillUpdate触发条件是props或者states更新，上面说的时候也着重标记了</p>\n<p>为了让父组件的按钮能更改子组件的内容，我需要在<em>componentWillReceiveProps</em>或<em>componentWillUpdate</em>里写上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\tword:nextprops.word</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>官网上说不能写在<em>componentWillUpdate</em>里，建议写在<em>componentWillReceiveProps</em>，我就不明白了，我非得写在<em>componentWillUpdate</em>里，看看执行结果<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/4.png\" alt=\"报错\" title=\"\">\n                </div>\n                <div class=\"image-caption\">报错</div>\n            </figure></p>\n<p>看 死循环了，因为上面提到<em>componentWillUpdate</em>触发条件是 states 变化 和 props变化，写在了这里就不停的setState  states的值，所以就不停的触发<em>componentWillUpdate</em>，因此像这种父组件更改子组件的内容应该写在 <em>componentWillReceiveProps</em> 里，来试试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/5.png\" alt=\"ojbk\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ojbk</div>\n            </figure><br>好，一切正常！</p>\n<p><strong> 总结：</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th style=\"text-align:center\">componentWillReceiveProps</th>\n<th style=\"text-align:center\">componentWillUpdate </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>触发条件</td>\n<td style=\"text-align:center\">props变化</td>\n<td style=\"text-align:center\">props或states变化</td>\n</tr>\n<tr>\n<td>注意事项</td>\n<td style=\"text-align:center\">setState的更新要写在componentWillReceiveProps里</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"三、生命周期执行顺序\"><a href=\"#三、生命周期执行顺序\" class=\"headerlink\" title=\"三、生命周期执行顺序\"></a>三、生命周期执行顺序</h3><p>还是上面的例子</p>\n<h4 id=\"1-初始化时父子组件的声明周期执行顺序\"><a href=\"#1-初始化时父子组件的声明周期执行顺序\" class=\"headerlink\" title=\"1.初始化时父子组件的声明周期执行顺序\"></a>1.初始化时父子组件的声明周期执行顺序</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/6.png\" alt=\"结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结果</div>\n            </figure>\n<h4 id=\"2-点击父组件的按钮时生命周期执行顺序\"><a href=\"#2-点击父组件的按钮时生命周期执行顺序\" class=\"headerlink\" title=\"2.点击父组件的按钮时生命周期执行顺序\"></a>2.点击父组件的按钮时生命周期执行顺序</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/7.png\" alt=\"结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结果</div>\n            </figure>\n<h4 id=\"3-点击子组件执行顺序\"><a href=\"#3-点击子组件执行顺序\" class=\"headerlink\" title=\"3.点击子组件执行顺序\"></a>3.点击子组件执行顺序</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/8.png\" alt=\"结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结果</div>\n            </figure>\n<h4 id=\"4-还有一种情况，点击子组件触发父组件内容的更改\"><a href=\"#4-还有一种情况，点击子组件触发父组件内容的更改\" class=\"headerlink\" title=\"4.还有一种情况，点击子组件触发父组件内容的更改\"></a>4.还有一种情况，点击子组件触发父组件内容的更改</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\tponentWillMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentWillMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentDidMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillReceiveProps(nextprops)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentWillReceiveProps'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tshouldComponentUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：shouldComponentUpdate'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUpdate(nextprops,nextstates)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentWillUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentDidUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUnmount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentWillUnmount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleClick()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> word=<span class=\"keyword\">this</span>.props.word === <span class=\"string\">'儿子'</span> ? <span class=\"string\">'孙子'</span>:<span class=\"string\">'儿子'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.props.click(word)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子：render'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t&lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;儿子按钮&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;/</span>div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.state=&#123;</span><br><span class=\"line\">\t\t\tword:<span class=\"string\">'儿子'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentDidMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillReceiveProps(nextprops)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillReceiveProps'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tshouldComponentUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：shouldComponentUpdate'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUpdate(nextprops,nextstates)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentDidUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUnmount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillUnmount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleClick(word)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\t\tword:word</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹render'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t&#123;<span class=\"keyword\">this</span>.state.word&#125;</span><br><span class=\"line\">\t\t\t\t&lt;Son word=&#123;<span class=\"keyword\">this</span>.state.word&#125; click=&#123;<span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>)&#125; /&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/9.png\" alt=\"结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结果</div>\n            </figure>\n<p><strong>上述的几种执行结果也很简单，看一看就会执行顺序就会变得清晰了</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、react生命周期\"><a href=\"#一、react生命周期\" class=\"headerlink\" title=\"一、react生命周期\"></a>一、react生命周期</h3><ul>\n<li>componentWillMount</li>\n<li>componentDidMount</li>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>componentDidUpdate</li>\n<li>componentUnmount<br>每个生命周期概念不是本文讲解重点，重点是生命周期在组件渲染时候容易造成的混淆</li>\n</ul>\n<h3 id=\"二、componentWillReceiveProps-和-componentWillUpdate-？？\"><a href=\"#二、componentWillReceiveProps-和-componentWillUpdate-？？\" class=\"headerlink\" title=\"二、componentWillReceiveProps 和 componentWillUpdate ？？\"></a>二、componentWillReceiveProps 和 componentWillUpdate ？？</h3><p><code>componentWillReceiveProps</code> ： 组件接收到一个新的props会被调用，在初始化render时不会调用<br><code>componentWillUpdate</code> : 组件接收到系的props<code>或state</code>时被调用，初始化不会被调用</p>\n<p>看起来好像一样啊，有什么区别呢？来看下面</p>\n<h4 id=\"1-来做测试\"><a href=\"#1-来做测试\" class=\"headerlink\" title=\"1.来做测试\"></a>1.来做测试</h4><p>先定义两个组件，App和Son，我们的目的就是看看上面提到的两个生命周期的不同，所以这一部分暂不讨论每个生命周期执行顺序，留在下一节讨论。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.state=&#123;</span><br><span class=\"line\">\t\t\tword:<span class=\"string\">'儿子'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentDidMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillReceiveProps(nextprops)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillReceiveProps'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tshouldComponentUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：shouldComponentUpdate'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUpdate(nextprops,nextstates)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentDidUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUnmount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillUnmount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleClick(word)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\t\tword:<span class=\"keyword\">this</span>.state.word ===<span class=\"string\">'儿子'</span> ? <span class=\"string\">'孙子'</span>:<span class=\"string\">'儿子'</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹render'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t&lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;App点我&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t&lt;Son word=&#123;this.state.word&#125; /</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">class Son extends Component&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tconstructor()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tsuper()</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tthis.state=&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tword:''</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentWillMount()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentWillMount')</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tthis.setState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tword:this.props.word</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentDidMount()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentDidMount')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentWillReceiveProps(nextprops)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentWillReceiveProps')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tshouldComponentUpdate()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：shouldComponentUpdate')</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn true;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentWillUpdate(nextprops,nextstates)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentWillUpdate')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentDidUpdate()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentDidUpdate')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tcomponentWillUnmount()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子生命周期：componentWillUnmount')</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\thandleClick()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tthis.setState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tword:this.state.word ==='儿子' ? '孙子':'儿子'</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\trender()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tconsole.log('儿子：render')</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn(</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&#123;this.state.word&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;button onClick=&#123;this.handleClick.bind(this)&#125;&gt;儿子按钮&lt;/</span>button&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>逻辑很简单，父组件和子组件都可以通过各自的按钮改变子组件文字的内容</p>\n<p>先点击 <code>儿子按钮</code> 按钮，也就是子组件Son里的按钮<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/1.png\" alt=\"执行结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">执行结果</div>\n            </figure><br>可以看到 <em>componentWillReceiveProps</em>  没有执行</p>\n<p>然后点击 <code>APP点我</code> 按钮：<br>点之前：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/2.png\" alt=\"点之前\" title=\"\">\n                </div>\n                <div class=\"image-caption\">点之前</div>\n            </figure></p>\n<p>点之后：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/3.png\" alt=\"点之后\" title=\"\">\n                </div>\n                <div class=\"image-caption\">点之后</div>\n            </figure></p>\n<p>可以看到子组件的文字并没有发生变化，执行了上图中的这些生命周期方法。</p>\n<p>所以可以得到结论：componentWillReceiveProps触发条件是props更新，而componentWillUpdate触发条件是props或者states更新，上面说的时候也着重标记了</p>\n<p>为了让父组件的按钮能更改子组件的内容，我需要在<em>componentWillReceiveProps</em>或<em>componentWillUpdate</em>里写上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\tword:nextprops.word</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>官网上说不能写在<em>componentWillUpdate</em>里，建议写在<em>componentWillReceiveProps</em>，我就不明白了，我非得写在<em>componentWillUpdate</em>里，看看执行结果<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/4.png\" alt=\"报错\" title=\"\">\n                </div>\n                <div class=\"image-caption\">报错</div>\n            </figure></p>\n<p>看 死循环了，因为上面提到<em>componentWillUpdate</em>触发条件是 states 变化 和 props变化，写在了这里就不停的setState  states的值，所以就不停的触发<em>componentWillUpdate</em>，因此像这种父组件更改子组件的内容应该写在 <em>componentWillReceiveProps</em> 里，来试试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/5.png\" alt=\"ojbk\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ojbk</div>\n            </figure><br>好，一切正常！</p>\n<p><strong> 总结：</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th style=\"text-align:center\">componentWillReceiveProps</th>\n<th style=\"text-align:center\">componentWillUpdate </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>触发条件</td>\n<td style=\"text-align:center\">props变化</td>\n<td style=\"text-align:center\">props或states变化</td>\n</tr>\n<tr>\n<td>注意事项</td>\n<td style=\"text-align:center\">setState的更新要写在componentWillReceiveProps里</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"三、生命周期执行顺序\"><a href=\"#三、生命周期执行顺序\" class=\"headerlink\" title=\"三、生命周期执行顺序\"></a>三、生命周期执行顺序</h3><p>还是上面的例子</p>\n<h4 id=\"1-初始化时父子组件的声明周期执行顺序\"><a href=\"#1-初始化时父子组件的声明周期执行顺序\" class=\"headerlink\" title=\"1.初始化时父子组件的声明周期执行顺序\"></a>1.初始化时父子组件的声明周期执行顺序</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/6.png\" alt=\"结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结果</div>\n            </figure>\n<h4 id=\"2-点击父组件的按钮时生命周期执行顺序\"><a href=\"#2-点击父组件的按钮时生命周期执行顺序\" class=\"headerlink\" title=\"2.点击父组件的按钮时生命周期执行顺序\"></a>2.点击父组件的按钮时生命周期执行顺序</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/7.png\" alt=\"结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结果</div>\n            </figure>\n<h4 id=\"3-点击子组件执行顺序\"><a href=\"#3-点击子组件执行顺序\" class=\"headerlink\" title=\"3.点击子组件执行顺序\"></a>3.点击子组件执行顺序</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/8.png\" alt=\"结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结果</div>\n            </figure>\n<h4 id=\"4-还有一种情况，点击子组件触发父组件内容的更改\"><a href=\"#4-还有一种情况，点击子组件触发父组件内容的更改\" class=\"headerlink\" title=\"4.还有一种情况，点击子组件触发父组件内容的更改\"></a>4.还有一种情况，点击子组件触发父组件内容的更改</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\tponentWillMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentWillMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentDidMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillReceiveProps(nextprops)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentWillReceiveProps'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tshouldComponentUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：shouldComponentUpdate'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUpdate(nextprops,nextstates)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentWillUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentDidUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUnmount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子生命周期：componentWillUnmount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleClick()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> word=<span class=\"keyword\">this</span>.props.word === <span class=\"string\">'儿子'</span> ? <span class=\"string\">'孙子'</span>:<span class=\"string\">'儿子'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.props.click(word)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'儿子：render'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t&lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;儿子按钮&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&lt;/</span>div&gt;</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.state=&#123;</span><br><span class=\"line\">\t\t\tword:<span class=\"string\">'儿子'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidMount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentDidMount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillReceiveProps(nextprops)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillReceiveProps'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tshouldComponentUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：shouldComponentUpdate'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUpdate(nextprops,nextstates)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentDidUpdate()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentDidUpdate'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcomponentWillUnmount()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹生命周期：componentWillUnmount'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleClick(word)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\t\tword:word</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'他爹render'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t&#123;<span class=\"keyword\">this</span>.state.word&#125;</span><br><span class=\"line\">\t\t\t\t&lt;Son word=&#123;<span class=\"keyword\">this</span>.state.word&#125; click=&#123;<span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>)&#125; /&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/react生命周期详解/9.png\" alt=\"结果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结果</div>\n            </figure>\n<p><strong>上述的几种执行结果也很简单，看一看就会执行顺序就会变得清晰了</strong></p>\n"},{"title":"select禁止更改值","date":"2017-11-30T02:31:59.000Z","_content":"### 一、效果介绍\nselect框选中了一个值后禁止更改select\n\n### 二、方法\n\n#### 1.css\n利用` disabled=\"true\" `来禁止选中\n`缺点`：这种方法虽然简单，但是它禁止了select框获得焦点，不能看到select的内容\n`优点`：简单\n\n#### 2.js\n``` javascript\n<select  name=\"selectname\" id=\"selectid\" onfocus=\"this.defaultIndex=this.selectedIndex;\" onchange=\"this.selectedIndex=this.defaultIndex;\">\n\t<option value=\"1\">dd</option>\n\t<option value=\"2\">mm</option>\n\t<option value=\"3\" selected=\"selected\">cc</option>\n\t<option value=\"4\">ff</option>\n</select>\n```\n1.获取焦点时，将当前的值 `selectedIndex` 赋值给一个自定义的属性 `defaultIndex` \n2.change时，将当前的值设置为 `defaultIndex`\n\n`优点`：select框依然可以选择，被下拉\n\n","source":"_posts/select禁止更改值.md","raw":"---\ntitle: select禁止更改值\ndate: 2017-11-30 10:31:59\ntags: css\n---\n### 一、效果介绍\nselect框选中了一个值后禁止更改select\n\n### 二、方法\n\n#### 1.css\n利用` disabled=\"true\" `来禁止选中\n`缺点`：这种方法虽然简单，但是它禁止了select框获得焦点，不能看到select的内容\n`优点`：简单\n\n#### 2.js\n``` javascript\n<select  name=\"selectname\" id=\"selectid\" onfocus=\"this.defaultIndex=this.selectedIndex;\" onchange=\"this.selectedIndex=this.defaultIndex;\">\n\t<option value=\"1\">dd</option>\n\t<option value=\"2\">mm</option>\n\t<option value=\"3\" selected=\"selected\">cc</option>\n\t<option value=\"4\">ff</option>\n</select>\n```\n1.获取焦点时，将当前的值 `selectedIndex` 赋值给一个自定义的属性 `defaultIndex` \n2.change时，将当前的值设置为 `defaultIndex`\n\n`优点`：select框依然可以选择，被下拉\n\n","slug":"select禁止更改值","published":1,"updated":"2018-09-28T02:53:25.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kh7000vvps6a70m4kc5","content":"<h3 id=\"一、效果介绍\"><a href=\"#一、效果介绍\" class=\"headerlink\" title=\"一、效果介绍\"></a>一、效果介绍</h3><p>select框选中了一个值后禁止更改select</p>\n<h3 id=\"二、方法\"><a href=\"#二、方法\" class=\"headerlink\" title=\"二、方法\"></a>二、方法</h3><h4 id=\"1-css\"><a href=\"#1-css\" class=\"headerlink\" title=\"1.css\"></a>1.css</h4><p>利用<code>disabled=&quot;true&quot;</code>来禁止选中<br><code>缺点</code>：这种方法虽然简单，但是它禁止了select框获得焦点，不能看到select的内容<br><code>优点</code>：简单</p>\n<h4 id=\"2-js\"><a href=\"#2-js\" class=\"headerlink\" title=\"2.js\"></a>2.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select  name=<span class=\"string\">\"selectname\"</span> id=<span class=\"string\">\"selectid\"</span> onfocus=<span class=\"string\">\"this.defaultIndex=this.selectedIndex;\"</span> onchange=<span class=\"string\">\"this.selectedIndex=this.defaultIndex;\"</span>&gt;</span><br><span class=\"line\">\t&lt;option value=<span class=\"string\">\"1\"</span>&gt;dd&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;option value=\"2\"&gt;mm&lt;/</span>option&gt;</span><br><span class=\"line\">\t&lt;option value=<span class=\"string\">\"3\"</span> selected=<span class=\"string\">\"selected\"</span>&gt;cc&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;option value=\"4\"&gt;ff&lt;/</span>option&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></span><br></pre></td></tr></table></figure>\n<p>1.获取焦点时，将当前的值 <code>selectedIndex</code> 赋值给一个自定义的属性 <code>defaultIndex</code><br>2.change时，将当前的值设置为 <code>defaultIndex</code></p>\n<p><code>优点</code>：select框依然可以选择，被下拉</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、效果介绍\"><a href=\"#一、效果介绍\" class=\"headerlink\" title=\"一、效果介绍\"></a>一、效果介绍</h3><p>select框选中了一个值后禁止更改select</p>\n<h3 id=\"二、方法\"><a href=\"#二、方法\" class=\"headerlink\" title=\"二、方法\"></a>二、方法</h3><h4 id=\"1-css\"><a href=\"#1-css\" class=\"headerlink\" title=\"1.css\"></a>1.css</h4><p>利用<code>disabled=&quot;true&quot;</code>来禁止选中<br><code>缺点</code>：这种方法虽然简单，但是它禁止了select框获得焦点，不能看到select的内容<br><code>优点</code>：简单</p>\n<h4 id=\"2-js\"><a href=\"#2-js\" class=\"headerlink\" title=\"2.js\"></a>2.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select  name=<span class=\"string\">\"selectname\"</span> id=<span class=\"string\">\"selectid\"</span> onfocus=<span class=\"string\">\"this.defaultIndex=this.selectedIndex;\"</span> onchange=<span class=\"string\">\"this.selectedIndex=this.defaultIndex;\"</span>&gt;</span><br><span class=\"line\">\t&lt;option value=<span class=\"string\">\"1\"</span>&gt;dd&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;option value=\"2\"&gt;mm&lt;/</span>option&gt;</span><br><span class=\"line\">\t&lt;option value=<span class=\"string\">\"3\"</span> selected=<span class=\"string\">\"selected\"</span>&gt;cc&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;option value=\"4\"&gt;ff&lt;/</span>option&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></span><br></pre></td></tr></table></figure>\n<p>1.获取焦点时，将当前的值 <code>selectedIndex</code> 赋值给一个自定义的属性 <code>defaultIndex</code><br>2.change时，将当前的值设置为 <code>defaultIndex</code></p>\n<p><code>优点</code>：select框依然可以选择，被下拉</p>\n"},{"title":"sublime中使用EditorConfig","date":"2018-01-19T02:22:50.000Z","_content":"## 一、作用\nEditorConfig是统一代码格式的解决方案，它可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格，比如多人合作的时候统一代码风格，避免一些潜在的问题，增加代码可读性\n\n## 二、使用方法\n### 1.编辑器插件\n有些编辑器已经集成了这个插件，所以不用再安装，而有些编辑器没有集成这个插件，需要安装\n\n下面这些编辑器不需要安装：\n![已经集成的编辑器](/images/sublime中使用editconfig/1.png)\n这些编辑器需要安装：\n![需要单独安装插件的编辑器](/images/sublime中使用editconfig/2.png)\n\nsublime里直接搜索 `EditorConfig` 安装即可\n![安装](/images/sublime中使用editconfig/3.png)\n\n### 2.配置文件说明\n\n在需要的地方配置 `.editorconfig`文件\n >` 注意1： ` 当打开一个文件时，EditorConfig插件会在打开文件的目录和其每一级父目录查找.editorconfig文件，直到有一个配置文件root=true。\n >什么意思呢？ \n >比如我的文件结构是这样的：\n >![文件目录](/images/sublime中使用editconfig/4.png) \n >在 ` b.js ` 里的代码，会先从同级目录 ——> 父级目录 这个路径进行查找（冒泡 ），如果遇到了 `.editorconfig` 里 `root=true` 则停止，因为 `b.js` 同级目录的 `.editorconfig` 里 `root=true` 所以 b.js 用的就是b.js上面这个文件配置的规则\n\n>----------------------\n>` 注意2 `：EditorConfig配置文件从上往下读取，并且路径最近的文件最后被读取。匹配的配置属性按照属性应用在代码上，所以最接近代码文件的属性优先级最高。\n>什么意思呢？\n>![.editconfig](/images/sublime中使用editconfig/5.png) \n>意思就是 我的 js文件会读取 注释2 (第十行)下面的配置，而python文件会读取上面 (注释1)的配置 \n\n### 3.文件格式详情\nEditorConfig文件使用INI格式，斜杠(/)作为路径分隔符，#或者;作为注释。注释应该单独占一行。\n\n### 4.支持的属性 \n注意：不是每种插件都支持所有的属性，具体可见[Wiki](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties)。\n\nindent_style：tab为hard-tabs，space为soft-tabs。\nindent_size：设置整数表示规定每级缩进的列数和soft-tabs的宽度（译注：空格数）。如果设定为tab，则会使用tab_width的值（如果已指定）。\ntab_width：设置整数用于指定替代tab的列数。默认值就是indent_size的值，一般无需指定。\nend_of_line：定义换行符，支持lf、cr和crlf。\ncharset：编码格式，支持latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用uft-8-bom。\ntrim_trailing_whitespace：设为true表示会除去换行行首的任意空白字符，false反之。\ninsert_final_newline：设为true表明使文件以一个空白行结尾，false反之。\nroot：表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。\n\n## 三、我遇到的问题\n\n看我的配置文件：\n![.editconfig](/images/sublime中使用editconfig/6.jpg) \n我设置了缩进方式为 `tab`,每级缩进 8 列，但是我设置好后，打开a.js文件后每级的缩进并没有变化，为此我还找了好久~╮(╯▽╰)╭，最后我发现，只要把a.js关闭，再打开就生效了~\n\n## 四、总结\nEditorConfig 可以说很好用了，很适合多人合作情景，但这个只是编辑器级别的格式统一，我会在后面说到代码级别的检测---ESLint，它可以通过我们配置很详细的配置文件，来规范我们的代码风格。","source":"_posts/sublime中使用editconfig.md","raw":"---\ntitle: sublime中使用EditorConfig\ndate: 2018-01-19 10:22:50\ntags: 'EditorConfig'\n---\n## 一、作用\nEditorConfig是统一代码格式的解决方案，它可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格，比如多人合作的时候统一代码风格，避免一些潜在的问题，增加代码可读性\n\n## 二、使用方法\n### 1.编辑器插件\n有些编辑器已经集成了这个插件，所以不用再安装，而有些编辑器没有集成这个插件，需要安装\n\n下面这些编辑器不需要安装：\n![已经集成的编辑器](/images/sublime中使用editconfig/1.png)\n这些编辑器需要安装：\n![需要单独安装插件的编辑器](/images/sublime中使用editconfig/2.png)\n\nsublime里直接搜索 `EditorConfig` 安装即可\n![安装](/images/sublime中使用editconfig/3.png)\n\n### 2.配置文件说明\n\n在需要的地方配置 `.editorconfig`文件\n >` 注意1： ` 当打开一个文件时，EditorConfig插件会在打开文件的目录和其每一级父目录查找.editorconfig文件，直到有一个配置文件root=true。\n >什么意思呢？ \n >比如我的文件结构是这样的：\n >![文件目录](/images/sublime中使用editconfig/4.png) \n >在 ` b.js ` 里的代码，会先从同级目录 ——> 父级目录 这个路径进行查找（冒泡 ），如果遇到了 `.editorconfig` 里 `root=true` 则停止，因为 `b.js` 同级目录的 `.editorconfig` 里 `root=true` 所以 b.js 用的就是b.js上面这个文件配置的规则\n\n>----------------------\n>` 注意2 `：EditorConfig配置文件从上往下读取，并且路径最近的文件最后被读取。匹配的配置属性按照属性应用在代码上，所以最接近代码文件的属性优先级最高。\n>什么意思呢？\n>![.editconfig](/images/sublime中使用editconfig/5.png) \n>意思就是 我的 js文件会读取 注释2 (第十行)下面的配置，而python文件会读取上面 (注释1)的配置 \n\n### 3.文件格式详情\nEditorConfig文件使用INI格式，斜杠(/)作为路径分隔符，#或者;作为注释。注释应该单独占一行。\n\n### 4.支持的属性 \n注意：不是每种插件都支持所有的属性，具体可见[Wiki](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties)。\n\nindent_style：tab为hard-tabs，space为soft-tabs。\nindent_size：设置整数表示规定每级缩进的列数和soft-tabs的宽度（译注：空格数）。如果设定为tab，则会使用tab_width的值（如果已指定）。\ntab_width：设置整数用于指定替代tab的列数。默认值就是indent_size的值，一般无需指定。\nend_of_line：定义换行符，支持lf、cr和crlf。\ncharset：编码格式，支持latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用uft-8-bom。\ntrim_trailing_whitespace：设为true表示会除去换行行首的任意空白字符，false反之。\ninsert_final_newline：设为true表明使文件以一个空白行结尾，false反之。\nroot：表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。\n\n## 三、我遇到的问题\n\n看我的配置文件：\n![.editconfig](/images/sublime中使用editconfig/6.jpg) \n我设置了缩进方式为 `tab`,每级缩进 8 列，但是我设置好后，打开a.js文件后每级的缩进并没有变化，为此我还找了好久~╮(╯▽╰)╭，最后我发现，只要把a.js关闭，再打开就生效了~\n\n## 四、总结\nEditorConfig 可以说很好用了，很适合多人合作情景，但这个只是编辑器级别的格式统一，我会在后面说到代码级别的检测---ESLint，它可以通过我们配置很详细的配置文件，来规范我们的代码风格。","slug":"sublime中使用editconfig","published":1,"updated":"2018-09-28T02:53:25.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8kh9000yvps67fjen9bw","content":"<h2 id=\"一、作用\"><a href=\"#一、作用\" class=\"headerlink\" title=\"一、作用\"></a>一、作用</h2><p>EditorConfig是统一代码格式的解决方案，它可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格，比如多人合作的时候统一代码风格，避免一些潜在的问题，增加代码可读性</p>\n<h2 id=\"二、使用方法\"><a href=\"#二、使用方法\" class=\"headerlink\" title=\"二、使用方法\"></a>二、使用方法</h2><h3 id=\"1-编辑器插件\"><a href=\"#1-编辑器插件\" class=\"headerlink\" title=\"1.编辑器插件\"></a>1.编辑器插件</h3><p>有些编辑器已经集成了这个插件，所以不用再安装，而有些编辑器没有集成这个插件，需要安装</p>\n<p>下面这些编辑器不需要安装：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/1.png\" alt=\"已经集成的编辑器\" title=\"\">\n                </div>\n                <div class=\"image-caption\">已经集成的编辑器</div>\n            </figure><br>这些编辑器需要安装：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/2.png\" alt=\"需要单独安装插件的编辑器\" title=\"\">\n                </div>\n                <div class=\"image-caption\">需要单独安装插件的编辑器</div>\n            </figure></p>\n<p>sublime里直接搜索 <code>EditorConfig</code> 安装即可<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/3.png\" alt=\"安装\" title=\"\">\n                </div>\n                <div class=\"image-caption\">安装</div>\n            </figure></p>\n<h3 id=\"2-配置文件说明\"><a href=\"#2-配置文件说明\" class=\"headerlink\" title=\"2.配置文件说明\"></a>2.配置文件说明</h3><p>在需要的地方配置 <code>.editorconfig</code>文件</p>\n<blockquote>\n<p><code>注意1：</code> 当打开一个文件时，EditorConfig插件会在打开文件的目录和其每一级父目录查找.editorconfig文件，直到有一个配置文件root=true。<br>什么意思呢？<br>比如我的文件结构是这样的：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/4.png\" alt=\"文件目录\" title=\"\">\n                </div>\n                <div class=\"image-caption\">文件目录</div>\n            </figure><br>在 <code>b.js</code> 里的代码，会先从同级目录 ——&gt; 父级目录 这个路径进行查找（冒泡 ），如果遇到了 <code>.editorconfig</code> 里 <code>root=true</code> 则停止，因为 <code>b.js</code> 同级目录的 <code>.editorconfig</code> 里 <code>root=true</code> 所以 b.js 用的就是b.js上面这个文件配置的规则</p>\n</blockquote>\n<blockquote>\n<hr>\n<p><code>注意2</code>：EditorConfig配置文件从上往下读取，并且路径最近的文件最后被读取。匹配的配置属性按照属性应用在代码上，所以最接近代码文件的属性优先级最高。<br>什么意思呢？<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/5.png\" alt=\".editconfig\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.editconfig</div>\n            </figure><br>意思就是 我的 js文件会读取 注释2 (第十行)下面的配置，而python文件会读取上面 (注释1)的配置 </p>\n</blockquote>\n<h3 id=\"3-文件格式详情\"><a href=\"#3-文件格式详情\" class=\"headerlink\" title=\"3.文件格式详情\"></a>3.文件格式详情</h3><p>EditorConfig文件使用INI格式，斜杠(/)作为路径分隔符，#或者;作为注释。注释应该单独占一行。</p>\n<h3 id=\"4-支持的属性\"><a href=\"#4-支持的属性\" class=\"headerlink\" title=\"4.支持的属性\"></a>4.支持的属性</h3><p>注意：不是每种插件都支持所有的属性，具体可见<a href=\"https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties\" target=\"_blank\" rel=\"noopener\">Wiki</a>。</p>\n<p>indent_style：tab为hard-tabs，space为soft-tabs。<br>indent_size：设置整数表示规定每级缩进的列数和soft-tabs的宽度（译注：空格数）。如果设定为tab，则会使用tab_width的值（如果已指定）。<br>tab_width：设置整数用于指定替代tab的列数。默认值就是indent_size的值，一般无需指定。<br>end_of_line：定义换行符，支持lf、cr和crlf。<br>charset：编码格式，支持latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用uft-8-bom。<br>trim_trailing_whitespace：设为true表示会除去换行行首的任意空白字符，false反之。<br>insert_final_newline：设为true表明使文件以一个空白行结尾，false反之。<br>root：表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。</p>\n<h2 id=\"三、我遇到的问题\"><a href=\"#三、我遇到的问题\" class=\"headerlink\" title=\"三、我遇到的问题\"></a>三、我遇到的问题</h2><p>看我的配置文件：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/6.jpg\" alt=\".editconfig\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.editconfig</div>\n            </figure><br>我设置了缩进方式为 <code>tab</code>,每级缩进 8 列，但是我设置好后，打开a.js文件后每级的缩进并没有变化，为此我还找了好久~╮(╯▽╰)╭，最后我发现，只要把a.js关闭，再打开就生效了~</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>EditorConfig 可以说很好用了，很适合多人合作情景，但这个只是编辑器级别的格式统一，我会在后面说到代码级别的检测—ESLint，它可以通过我们配置很详细的配置文件，来规范我们的代码风格。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、作用\"><a href=\"#一、作用\" class=\"headerlink\" title=\"一、作用\"></a>一、作用</h2><p>EditorConfig是统一代码格式的解决方案，它可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格，比如多人合作的时候统一代码风格，避免一些潜在的问题，增加代码可读性</p>\n<h2 id=\"二、使用方法\"><a href=\"#二、使用方法\" class=\"headerlink\" title=\"二、使用方法\"></a>二、使用方法</h2><h3 id=\"1-编辑器插件\"><a href=\"#1-编辑器插件\" class=\"headerlink\" title=\"1.编辑器插件\"></a>1.编辑器插件</h3><p>有些编辑器已经集成了这个插件，所以不用再安装，而有些编辑器没有集成这个插件，需要安装</p>\n<p>下面这些编辑器不需要安装：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/1.png\" alt=\"已经集成的编辑器\" title=\"\">\n                </div>\n                <div class=\"image-caption\">已经集成的编辑器</div>\n            </figure><br>这些编辑器需要安装：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/2.png\" alt=\"需要单独安装插件的编辑器\" title=\"\">\n                </div>\n                <div class=\"image-caption\">需要单独安装插件的编辑器</div>\n            </figure></p>\n<p>sublime里直接搜索 <code>EditorConfig</code> 安装即可<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/3.png\" alt=\"安装\" title=\"\">\n                </div>\n                <div class=\"image-caption\">安装</div>\n            </figure></p>\n<h3 id=\"2-配置文件说明\"><a href=\"#2-配置文件说明\" class=\"headerlink\" title=\"2.配置文件说明\"></a>2.配置文件说明</h3><p>在需要的地方配置 <code>.editorconfig</code>文件</p>\n<blockquote>\n<p><code>注意1：</code> 当打开一个文件时，EditorConfig插件会在打开文件的目录和其每一级父目录查找.editorconfig文件，直到有一个配置文件root=true。<br>什么意思呢？<br>比如我的文件结构是这样的：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/4.png\" alt=\"文件目录\" title=\"\">\n                </div>\n                <div class=\"image-caption\">文件目录</div>\n            </figure><br>在 <code>b.js</code> 里的代码，会先从同级目录 ——&gt; 父级目录 这个路径进行查找（冒泡 ），如果遇到了 <code>.editorconfig</code> 里 <code>root=true</code> 则停止，因为 <code>b.js</code> 同级目录的 <code>.editorconfig</code> 里 <code>root=true</code> 所以 b.js 用的就是b.js上面这个文件配置的规则</p>\n</blockquote>\n<blockquote>\n<hr>\n<p><code>注意2</code>：EditorConfig配置文件从上往下读取，并且路径最近的文件最后被读取。匹配的配置属性按照属性应用在代码上，所以最接近代码文件的属性优先级最高。<br>什么意思呢？<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/5.png\" alt=\".editconfig\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.editconfig</div>\n            </figure><br>意思就是 我的 js文件会读取 注释2 (第十行)下面的配置，而python文件会读取上面 (注释1)的配置 </p>\n</blockquote>\n<h3 id=\"3-文件格式详情\"><a href=\"#3-文件格式详情\" class=\"headerlink\" title=\"3.文件格式详情\"></a>3.文件格式详情</h3><p>EditorConfig文件使用INI格式，斜杠(/)作为路径分隔符，#或者;作为注释。注释应该单独占一行。</p>\n<h3 id=\"4-支持的属性\"><a href=\"#4-支持的属性\" class=\"headerlink\" title=\"4.支持的属性\"></a>4.支持的属性</h3><p>注意：不是每种插件都支持所有的属性，具体可见<a href=\"https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties\" target=\"_blank\" rel=\"noopener\">Wiki</a>。</p>\n<p>indent_style：tab为hard-tabs，space为soft-tabs。<br>indent_size：设置整数表示规定每级缩进的列数和soft-tabs的宽度（译注：空格数）。如果设定为tab，则会使用tab_width的值（如果已指定）。<br>tab_width：设置整数用于指定替代tab的列数。默认值就是indent_size的值，一般无需指定。<br>end_of_line：定义换行符，支持lf、cr和crlf。<br>charset：编码格式，支持latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用uft-8-bom。<br>trim_trailing_whitespace：设为true表示会除去换行行首的任意空白字符，false反之。<br>insert_final_newline：设为true表明使文件以一个空白行结尾，false反之。<br>root：表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。</p>\n<h2 id=\"三、我遇到的问题\"><a href=\"#三、我遇到的问题\" class=\"headerlink\" title=\"三、我遇到的问题\"></a>三、我遇到的问题</h2><p>看我的配置文件：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/sublime中使用editconfig/6.jpg\" alt=\".editconfig\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.editconfig</div>\n            </figure><br>我设置了缩进方式为 <code>tab</code>,每级缩进 8 列，但是我设置好后，打开a.js文件后每级的缩进并没有变化，为此我还找了好久~╮(╯▽╰)╭，最后我发现，只要把a.js关闭，再打开就生效了~</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>EditorConfig 可以说很好用了，很适合多人合作情景，但这个只是编辑器级别的格式统一，我会在后面说到代码级别的检测—ESLint，它可以通过我们配置很详细的配置文件，来规范我们的代码风格。</p>\n"},{"title":"vue自定义父子组件组件v-model的通信","date":"2018-09-25T02:38:15.000Z","_content":"\n### 一、前言\n前些天写一个checkbox的vue组件的时候想用v-model来进行状态的判断，但是想到这了，却不知道v-model怎么在组件里面实现，这篇文章记录v-model的实现以及v-model的扩展。具体效果可以参考`iview`的 `Checkbox组件和CheckboxGroup组件`\n\n### 二、分析 (功能描述)\n我想做两个组件 第一个叫 ** ButtonSelect ** 、** ButtonSelectGroup **\n1. `ButtonSelect` :  其实这个组件就是一个checkbox复选框，只不过样式上进行的修改，我想在这上面绑定v-model，通过v-model来告诉父级组件当前的复选框状态(true/false)，`ButtonSelect` 的效果同iview的 `Checkbox组件`\n![CheckBox组件效果](/images/vue自定义父子组件组件v-model的通信/checkbox.gif)\n\n2. `ButtonSelectGroup` : 当有多个 **ButtonSelect** 的时候，可以用 `ButtonSelectGroup`包裹`ButtonSelect`，然后通过 `ButtonSelectGroup` 上绑定 v-model ，来获得所有的选中项，格式是数组，效果同iview的 `CheckboxGroup`\n![CheckboxGroup组件效果](/images/vue自定义父子组件组件v-model的通信/CheckboxGroup.gif)\n\n### 三、关于v-model\nv-model 双向绑定是一个很好用的功能，对于不同的组件v-model返回值也不同,但是这里只说说 `checkbox复选框的v-model`\n1. 单个复选框，绑定到布尔值\n2. 多个复选框，绑定到同一个数组\n[官网描述](https://cn.vuejs.org/v2/guide/forms.html)\n\n> **这里一定要仔细观察，当多个复选框的时候它的v-model的值是一样的，只有这样才能返回数组，而数组每一项的值就是checkbox的value值**\n\n#### 1.自定义v-model（v-model传递）\n父组件===>子组件：默认名为value的prop\n子组件===>父组件：默认名为input的事件\n通过 **value** 和 **input** 来完成v-model的赋值和传递\n\n但是有时候我们不想用value的input进行传递，name可以用**model**选项自定义：\n``` javascript\nmodel: {\n    prop: 'checked',\n    event: 'change'\n},\n```\n这样就变成了 prop为change 和 checked事件来代替value和input了\n\n### 四、ButtonSelect的实现\n最顶级的组件ButtonSelectGroup、ButtonSelect的父组件，就叫他HelloWord组件\n``` vue \n<template>\n  <div>\n    <ButtonSelectGroup v-model=\"select\">\n        <ButtonSelect label='第一个' ></ButtonSelect>\n        <ButtonSelect label='第二个'></ButtonSelect>\n        <ButtonSelect label='第三个'></ButtonSelect>\n    </ButtonSelectGroup>\n    {{select}}\n  </div>\n</template>\n\n<script>\nimport  ButtonSelect from \"./ButtonSelect.vue\";\nimport ButtonSelectGroup from \"./ButtonSelectGroup.vue\";\nexport default {\n  name: 'HelloWorld',\n  components:{\n    'ButtonSelect':ButtonSelect,\n    'ButtonSelectGroup':ButtonSelectGroup\n  },\n  data(){\n    return{\n      select:[]\n    }\n  },\n\n}\n</script>\n```\n``` vue \n<style>\n@keyframes ani {\n    0% {\n    background-color: #52c41a;\n    -webkit-box-shadow: 0 0 5px #52c41a;\n    box-shadow: 0 0 5px #52c41a;\n    }\n    50% {\n        background-color: #73d13d;\n        -webkit-box-shadow: 0 0 10px #73d13d;\n        box-shadow: 0 0 10px #73d13d;\n    }\n    100% {\n        background-color: #95de64;\n        -webkit-box-shadow: 0 0 5px #95de64;\n        box-shadow: 0 0 5px #95de64;\n    }\n}\n.selectBut{\n    display: flex;\n    flex-wrap: nowrap;\n    margin: 5px;\n    border-radius: 5px ;\n    line-height: 30px;\n    height: 30px;\n    position: relative;\n}\n.selectBox{\n    display: inline-block;\n    overflow: hidden;\n}\n.con{\n    padding:0 5px;\n    box-shadow: 0 0 8px 0px  #88d6f7;\n    background: -webkit-linear-gradient(left,#5ec8ff,#4a9fd7);\n    background: -o-linear-gradient(left,#63e77d,#3e8aa6);\n    background: -moz-linear-gradient(left,#63e77d,#3e8aa6);\n    background: linear-gradient(left,#63e77d,#3e8aa6);\n}\n.check{\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 1;\n    cursor: pointer;\n    opacity: 0;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\ninput.check:checked+.light{\n    /* background: #19be6b; */\n    animation: ani 3s infinite alternate;\n}\n.num{\n    padding: 0 5px;\n    border-radius:0 5px 5px 0;\n    color: #fff;\n    font-weight: bold;\n    text-shadow: 0 -1px 1px #40a9ff;\n    /* box-shadow: 0 0 8px 0px  #88d6f7; */\n    background: -webkit-linear-gradient(left,#4a9fd7,#2d60a2);\n    background: -moz-linear-gradient(left,#3e8aa6,#2c5d9d);\n    background: -o-linear-gradient(left,#3e8aa6,#2c5d9d);\n    background: linear-gradient(left,#3e8aa6,#2c5d9d);\n}\n.lightbox{\n    position: relative;\n    width: 20px;\n    height: 100%;\n}\n.light{\n    transition:all .5;\n    background: #ccc;\n    height: 100%;\n    cursor: pointer;\n    border-radius: 5px 0 0 5px;\n}\n</style>\n<template>\n    <div class=\"selectBox\">\n            <div class=\"selectBut\">\n                <div class=\"lightbox\">\n                    <input \n                        type=\"checkbox\" \n                        class=\"check\" \n                        :checked=\"currentValue\"\n                        @change=\"change\"/>\n                    <div class=\"light\"></div>\n                </div>\n                <div class=\"con\">\n                    <slot name=\"con\">ssss</slot> \n                </div>\n                <div class=\"num\">\n                   <slot name=\"num\">aaa</slot> \n                </div>\n            </div>\n    </div>\n</template>\n<script>\nexport default {\n    name:'ButtonSelect',\n    data(){\n        return{\n            //根据v-model初始化当前组件状态\n            currentValue:this.value\n        }\n    },\n    props:{\n        // v-model获取\n        value:{\n            type:[Array,Boolean],\n            default:false\n        }\n    },\n    methods:{\n        change(event){\n            var value=event.target.checked;\n            // 赋值v-model\n            this.$emit('input',value)\n        }\n    }\n}\n</script>\n\n```\n关键点：\n>template的 input \n>script:props的value和data里currentValue（获得初始状态）\n>script: change里this.$emit('input')\n\n单个的复选框组件基本功能完成\n\n五、ButtonSelectGroup组件\n实际应用中`ButtonSelect`会有很多个，我需要获取每一个的选中状态或者值（参考上面的CheckBoxGroup组件）\n#### 1. 分析\n1. 让多个checkbox返回数组的原理是什么？ 上面提到了，是给每一个checkbox相同的model，所以就要在父组件（ButtonSelectGroup）里给所有子组件（ButtonSelect）相同的v-model\n2. 当所有的子组件其中有一个改变的时候，应该给父组件返回变化后的数组，父组件（上面提到了，是给每一个checkbox相同的model，所以就要在父组件（ButtonSelectGroup）里给所有子组件（ButtonSelect）设置相同的v-model）再将该数组通过input事件返回给\nButtonSelectGroup的调用者(ButtonSelectGroup的父组件)，完成v-model的传递\n3. 当ButtonSelectGroup的父组件给定一个初始v-model值的时候，需要把每一个ButtonSelect进行状态的变换\n\n#### 2. 实现\n``` vue\n<style>\n\n</style>\n<template>\n    <div>\n        <slot></slot>\n    </div>\n</template>\n<script>\n// 寻找子组件\nfunction findComponentsDownward (context, componentName) {\n    return context.$children.reduce((components, child) => {\n        if (child.$options.name === componentName) components.push(child);\n        const foundChilds = findComponentsDownward(child, componentName);\n        return components.concat(foundChilds);\n    }, []);\n}\nexport default {\n    name:'ButtonSelectGroup',\n    props:{\n        value:{\n            type:Array,\n            default(){\n                return []\n            }\n        }\n    },\n    data(){\n        return{\n            childrens:[],\n        }\n    },\n    mounted(){\n        this.updateModel()\n    },\n    methods:{\n        updateModel(){\n            this.childrens = findComponentsDownward(this, 'ButtonSelect');\n            if(this.childrens){\n                const { value }=this;\n                // 给子组件设置相同的model\n                this.childrens.forEach(child=>{\n                    child.model=value;\n                    child.group = true;\n                })\n            }\n        },\n        change(data){\n            // 通知上级组件的v-model\n            this.$emit('input',data);\n        }\n    },\n    watch: {\n        value () {\n            this.updateModel();\n        }\n    }\n}\n</script>\n```\n** 注意注意注意 **\n>这里有一个非常非常非常重要的点，就是这个watch里面这个value监听触发updateModel方法，你可以尝试去掉这个watch是什么结果。我就在这里卡了好久。来解释一下原因：\n>来一起想一下，子组件(ButtonSelect)的`model`是他爹(ButtonSelectGruop)给的，每次我点击了 `ButtonSelect`会通过`this.parent.change(this.model)` 来告诉父组件去更新使用的HelloWord里的 `select`，好了此时此刻我已经更新完了HelloWord里的 `v-model(select)`,但是注意子组件（ButtonSelect）的v-model是通过 父组件 （ButtonSelectGroup）赋值过来了，并不能直接更改，所以ButtonSelectGruop如果不加 watch的value监听的话，子组件的`v-model`永远是[]，所以可以在ButtonSelect change的时候打印一下，每次数组一定是一个值，所以要用过watch监听，每一次HelloWord的v-model变动，都要重新给ButtonSelect赋值一次，这样才能达到预期目的\n\n不加watch的样子：\n![不加watch](/images/vue自定义父子组件组件v-model的通信/notok.gif)\n\n加watch的样子：\n![加watch](/images/vue自定义父子组件组件v-model的通信/ok.gif)\n\n### 五、总结\n上面什么input事件、默认value什么的都还好理解，最最最重要的点就是上面说的watch来监听value，听我这么说可能云里雾里，需要自己动手实践一下，才能明白其中的意思","source":"_posts/vue自定义父子组件组件v-model的通信.md","raw":"---\ntitle: vue自定义父子组件组件v-model的通信\ndate: 2018-09-25 10:38:15\ntags: [Vue]\n---\n\n### 一、前言\n前些天写一个checkbox的vue组件的时候想用v-model来进行状态的判断，但是想到这了，却不知道v-model怎么在组件里面实现，这篇文章记录v-model的实现以及v-model的扩展。具体效果可以参考`iview`的 `Checkbox组件和CheckboxGroup组件`\n\n### 二、分析 (功能描述)\n我想做两个组件 第一个叫 ** ButtonSelect ** 、** ButtonSelectGroup **\n1. `ButtonSelect` :  其实这个组件就是一个checkbox复选框，只不过样式上进行的修改，我想在这上面绑定v-model，通过v-model来告诉父级组件当前的复选框状态(true/false)，`ButtonSelect` 的效果同iview的 `Checkbox组件`\n![CheckBox组件效果](/images/vue自定义父子组件组件v-model的通信/checkbox.gif)\n\n2. `ButtonSelectGroup` : 当有多个 **ButtonSelect** 的时候，可以用 `ButtonSelectGroup`包裹`ButtonSelect`，然后通过 `ButtonSelectGroup` 上绑定 v-model ，来获得所有的选中项，格式是数组，效果同iview的 `CheckboxGroup`\n![CheckboxGroup组件效果](/images/vue自定义父子组件组件v-model的通信/CheckboxGroup.gif)\n\n### 三、关于v-model\nv-model 双向绑定是一个很好用的功能，对于不同的组件v-model返回值也不同,但是这里只说说 `checkbox复选框的v-model`\n1. 单个复选框，绑定到布尔值\n2. 多个复选框，绑定到同一个数组\n[官网描述](https://cn.vuejs.org/v2/guide/forms.html)\n\n> **这里一定要仔细观察，当多个复选框的时候它的v-model的值是一样的，只有这样才能返回数组，而数组每一项的值就是checkbox的value值**\n\n#### 1.自定义v-model（v-model传递）\n父组件===>子组件：默认名为value的prop\n子组件===>父组件：默认名为input的事件\n通过 **value** 和 **input** 来完成v-model的赋值和传递\n\n但是有时候我们不想用value的input进行传递，name可以用**model**选项自定义：\n``` javascript\nmodel: {\n    prop: 'checked',\n    event: 'change'\n},\n```\n这样就变成了 prop为change 和 checked事件来代替value和input了\n\n### 四、ButtonSelect的实现\n最顶级的组件ButtonSelectGroup、ButtonSelect的父组件，就叫他HelloWord组件\n``` vue \n<template>\n  <div>\n    <ButtonSelectGroup v-model=\"select\">\n        <ButtonSelect label='第一个' ></ButtonSelect>\n        <ButtonSelect label='第二个'></ButtonSelect>\n        <ButtonSelect label='第三个'></ButtonSelect>\n    </ButtonSelectGroup>\n    {{select}}\n  </div>\n</template>\n\n<script>\nimport  ButtonSelect from \"./ButtonSelect.vue\";\nimport ButtonSelectGroup from \"./ButtonSelectGroup.vue\";\nexport default {\n  name: 'HelloWorld',\n  components:{\n    'ButtonSelect':ButtonSelect,\n    'ButtonSelectGroup':ButtonSelectGroup\n  },\n  data(){\n    return{\n      select:[]\n    }\n  },\n\n}\n</script>\n```\n``` vue \n<style>\n@keyframes ani {\n    0% {\n    background-color: #52c41a;\n    -webkit-box-shadow: 0 0 5px #52c41a;\n    box-shadow: 0 0 5px #52c41a;\n    }\n    50% {\n        background-color: #73d13d;\n        -webkit-box-shadow: 0 0 10px #73d13d;\n        box-shadow: 0 0 10px #73d13d;\n    }\n    100% {\n        background-color: #95de64;\n        -webkit-box-shadow: 0 0 5px #95de64;\n        box-shadow: 0 0 5px #95de64;\n    }\n}\n.selectBut{\n    display: flex;\n    flex-wrap: nowrap;\n    margin: 5px;\n    border-radius: 5px ;\n    line-height: 30px;\n    height: 30px;\n    position: relative;\n}\n.selectBox{\n    display: inline-block;\n    overflow: hidden;\n}\n.con{\n    padding:0 5px;\n    box-shadow: 0 0 8px 0px  #88d6f7;\n    background: -webkit-linear-gradient(left,#5ec8ff,#4a9fd7);\n    background: -o-linear-gradient(left,#63e77d,#3e8aa6);\n    background: -moz-linear-gradient(left,#63e77d,#3e8aa6);\n    background: linear-gradient(left,#63e77d,#3e8aa6);\n}\n.check{\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 1;\n    cursor: pointer;\n    opacity: 0;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\ninput.check:checked+.light{\n    /* background: #19be6b; */\n    animation: ani 3s infinite alternate;\n}\n.num{\n    padding: 0 5px;\n    border-radius:0 5px 5px 0;\n    color: #fff;\n    font-weight: bold;\n    text-shadow: 0 -1px 1px #40a9ff;\n    /* box-shadow: 0 0 8px 0px  #88d6f7; */\n    background: -webkit-linear-gradient(left,#4a9fd7,#2d60a2);\n    background: -moz-linear-gradient(left,#3e8aa6,#2c5d9d);\n    background: -o-linear-gradient(left,#3e8aa6,#2c5d9d);\n    background: linear-gradient(left,#3e8aa6,#2c5d9d);\n}\n.lightbox{\n    position: relative;\n    width: 20px;\n    height: 100%;\n}\n.light{\n    transition:all .5;\n    background: #ccc;\n    height: 100%;\n    cursor: pointer;\n    border-radius: 5px 0 0 5px;\n}\n</style>\n<template>\n    <div class=\"selectBox\">\n            <div class=\"selectBut\">\n                <div class=\"lightbox\">\n                    <input \n                        type=\"checkbox\" \n                        class=\"check\" \n                        :checked=\"currentValue\"\n                        @change=\"change\"/>\n                    <div class=\"light\"></div>\n                </div>\n                <div class=\"con\">\n                    <slot name=\"con\">ssss</slot> \n                </div>\n                <div class=\"num\">\n                   <slot name=\"num\">aaa</slot> \n                </div>\n            </div>\n    </div>\n</template>\n<script>\nexport default {\n    name:'ButtonSelect',\n    data(){\n        return{\n            //根据v-model初始化当前组件状态\n            currentValue:this.value\n        }\n    },\n    props:{\n        // v-model获取\n        value:{\n            type:[Array,Boolean],\n            default:false\n        }\n    },\n    methods:{\n        change(event){\n            var value=event.target.checked;\n            // 赋值v-model\n            this.$emit('input',value)\n        }\n    }\n}\n</script>\n\n```\n关键点：\n>template的 input \n>script:props的value和data里currentValue（获得初始状态）\n>script: change里this.$emit('input')\n\n单个的复选框组件基本功能完成\n\n五、ButtonSelectGroup组件\n实际应用中`ButtonSelect`会有很多个，我需要获取每一个的选中状态或者值（参考上面的CheckBoxGroup组件）\n#### 1. 分析\n1. 让多个checkbox返回数组的原理是什么？ 上面提到了，是给每一个checkbox相同的model，所以就要在父组件（ButtonSelectGroup）里给所有子组件（ButtonSelect）相同的v-model\n2. 当所有的子组件其中有一个改变的时候，应该给父组件返回变化后的数组，父组件（上面提到了，是给每一个checkbox相同的model，所以就要在父组件（ButtonSelectGroup）里给所有子组件（ButtonSelect）设置相同的v-model）再将该数组通过input事件返回给\nButtonSelectGroup的调用者(ButtonSelectGroup的父组件)，完成v-model的传递\n3. 当ButtonSelectGroup的父组件给定一个初始v-model值的时候，需要把每一个ButtonSelect进行状态的变换\n\n#### 2. 实现\n``` vue\n<style>\n\n</style>\n<template>\n    <div>\n        <slot></slot>\n    </div>\n</template>\n<script>\n// 寻找子组件\nfunction findComponentsDownward (context, componentName) {\n    return context.$children.reduce((components, child) => {\n        if (child.$options.name === componentName) components.push(child);\n        const foundChilds = findComponentsDownward(child, componentName);\n        return components.concat(foundChilds);\n    }, []);\n}\nexport default {\n    name:'ButtonSelectGroup',\n    props:{\n        value:{\n            type:Array,\n            default(){\n                return []\n            }\n        }\n    },\n    data(){\n        return{\n            childrens:[],\n        }\n    },\n    mounted(){\n        this.updateModel()\n    },\n    methods:{\n        updateModel(){\n            this.childrens = findComponentsDownward(this, 'ButtonSelect');\n            if(this.childrens){\n                const { value }=this;\n                // 给子组件设置相同的model\n                this.childrens.forEach(child=>{\n                    child.model=value;\n                    child.group = true;\n                })\n            }\n        },\n        change(data){\n            // 通知上级组件的v-model\n            this.$emit('input',data);\n        }\n    },\n    watch: {\n        value () {\n            this.updateModel();\n        }\n    }\n}\n</script>\n```\n** 注意注意注意 **\n>这里有一个非常非常非常重要的点，就是这个watch里面这个value监听触发updateModel方法，你可以尝试去掉这个watch是什么结果。我就在这里卡了好久。来解释一下原因：\n>来一起想一下，子组件(ButtonSelect)的`model`是他爹(ButtonSelectGruop)给的，每次我点击了 `ButtonSelect`会通过`this.parent.change(this.model)` 来告诉父组件去更新使用的HelloWord里的 `select`，好了此时此刻我已经更新完了HelloWord里的 `v-model(select)`,但是注意子组件（ButtonSelect）的v-model是通过 父组件 （ButtonSelectGroup）赋值过来了，并不能直接更改，所以ButtonSelectGruop如果不加 watch的value监听的话，子组件的`v-model`永远是[]，所以可以在ButtonSelect change的时候打印一下，每次数组一定是一个值，所以要用过watch监听，每一次HelloWord的v-model变动，都要重新给ButtonSelect赋值一次，这样才能达到预期目的\n\n不加watch的样子：\n![不加watch](/images/vue自定义父子组件组件v-model的通信/notok.gif)\n\n加watch的样子：\n![加watch](/images/vue自定义父子组件组件v-model的通信/ok.gif)\n\n### 五、总结\n上面什么input事件、默认value什么的都还好理解，最最最重要的点就是上面说的watch来监听value，听我这么说可能云里雾里，需要自己动手实践一下，才能明白其中的意思","slug":"vue自定义父子组件组件v-model的通信","published":1,"updated":"2018-09-28T02:53:25.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8khb000zvps62ifchq98","content":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>前些天写一个checkbox的vue组件的时候想用v-model来进行状态的判断，但是想到这了，却不知道v-model怎么在组件里面实现，这篇文章记录v-model的实现以及v-model的扩展。具体效果可以参考<code>iview</code>的 <code>Checkbox组件和CheckboxGroup组件</code></p>\n<h3 id=\"二、分析-功能描述\"><a href=\"#二、分析-功能描述\" class=\"headerlink\" title=\"二、分析 (功能描述)\"></a>二、分析 (功能描述)</h3><p>我想做两个组件 第一个叫 <strong> ButtonSelect </strong> 、<strong> ButtonSelectGroup </strong></p>\n<ol>\n<li><p><code>ButtonSelect</code> :  其实这个组件就是一个checkbox复选框，只不过样式上进行的修改，我想在这上面绑定v-model，通过v-model来告诉父级组件当前的复选框状态(true/false)，<code>ButtonSelect</code> 的效果同iview的 <code>Checkbox组件</code></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/vue自定义父子组件组件v-model的通信/checkbox.gif\" alt=\"CheckBox组件效果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CheckBox组件效果</div>\n            </figure>\n</li>\n<li><p><code>ButtonSelectGroup</code> : 当有多个 <strong>ButtonSelect</strong> 的时候，可以用 <code>ButtonSelectGroup</code>包裹<code>ButtonSelect</code>，然后通过 <code>ButtonSelectGroup</code> 上绑定 v-model ，来获得所有的选中项，格式是数组，效果同iview的 <code>CheckboxGroup</code></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/vue自定义父子组件组件v-model的通信/CheckboxGroup.gif\" alt=\"CheckboxGroup组件效果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CheckboxGroup组件效果</div>\n            </figure>\n</li>\n</ol>\n<h3 id=\"三、关于v-model\"><a href=\"#三、关于v-model\" class=\"headerlink\" title=\"三、关于v-model\"></a>三、关于v-model</h3><p>v-model 双向绑定是一个很好用的功能，对于不同的组件v-model返回值也不同,但是这里只说说 <code>checkbox复选框的v-model</code></p>\n<ol>\n<li>单个复选框，绑定到布尔值</li>\n<li>多个复选框，绑定到同一个数组<br><a href=\"https://cn.vuejs.org/v2/guide/forms.html\" target=\"_blank\" rel=\"noopener\">官网描述</a></li>\n</ol>\n<blockquote>\n<p><strong>这里一定要仔细观察，当多个复选框的时候它的v-model的值是一样的，只有这样才能返回数组，而数组每一项的值就是checkbox的value值</strong></p>\n</blockquote>\n<h4 id=\"1-自定义v-model（v-model传递）\"><a href=\"#1-自定义v-model（v-model传递）\" class=\"headerlink\" title=\"1.自定义v-model（v-model传递）\"></a>1.自定义v-model（v-model传递）</h4><p>父组件===&gt;子组件：默认名为value的prop<br>子组件===&gt;父组件：默认名为input的事件<br>通过 <strong>value</strong> 和 <strong>input</strong> 来完成v-model的赋值和传递</p>\n<p>但是有时候我们不想用value的input进行传递，name可以用<strong>model</strong>选项自定义：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model: &#123;</span><br><span class=\"line\">    prop: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\">    event: <span class=\"string\">'change'</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>这样就变成了 prop为change 和 checked事件来代替value和input了</p>\n<h3 id=\"四、ButtonSelect的实现\"><a href=\"#四、ButtonSelect的实现\" class=\"headerlink\" title=\"四、ButtonSelect的实现\"></a>四、ButtonSelect的实现</h3><p>最顶级的组件ButtonSelectGroup、ButtonSelect的父组件，就叫他HelloWord组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;ButtonSelectGroup v-model=&quot;select&quot;&gt;</span><br><span class=\"line\">        &lt;ButtonSelect label=&apos;第一个&apos; &gt;&lt;/ButtonSelect&gt;</span><br><span class=\"line\">        &lt;ButtonSelect label=&apos;第二个&apos;&gt;&lt;/ButtonSelect&gt;</span><br><span class=\"line\">        &lt;ButtonSelect label=&apos;第三个&apos;&gt;&lt;/ButtonSelect&gt;</span><br><span class=\"line\">    &lt;/ButtonSelectGroup&gt;</span><br><span class=\"line\">    &#123;&#123;select&#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import  ButtonSelect from &quot;./ButtonSelect.vue&quot;;</span><br><span class=\"line\">import ButtonSelectGroup from &quot;./ButtonSelectGroup.vue&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;HelloWorld&apos;,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    &apos;ButtonSelect&apos;:ButtonSelect,</span><br><span class=\"line\">    &apos;ButtonSelectGroup&apos;:ButtonSelectGroup</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return&#123;</span><br><span class=\"line\">      select:[]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">@keyframes ani &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">    background-color: #52c41a;</span><br><span class=\"line\">    -webkit-box-shadow: 0 0 5px #52c41a;</span><br><span class=\"line\">    box-shadow: 0 0 5px #52c41a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    50% &#123;</span><br><span class=\"line\">        background-color: #73d13d;</span><br><span class=\"line\">        -webkit-box-shadow: 0 0 10px #73d13d;</span><br><span class=\"line\">        box-shadow: 0 0 10px #73d13d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">        background-color: #95de64;</span><br><span class=\"line\">        -webkit-box-shadow: 0 0 5px #95de64;</span><br><span class=\"line\">        box-shadow: 0 0 5px #95de64;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.selectBut&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-wrap: nowrap;</span><br><span class=\"line\">    margin: 5px;</span><br><span class=\"line\">    border-radius: 5px ;</span><br><span class=\"line\">    line-height: 30px;</span><br><span class=\"line\">    height: 30px;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.selectBox&#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.con&#123;</span><br><span class=\"line\">    padding:0 5px;</span><br><span class=\"line\">    box-shadow: 0 0 8px 0px  #88d6f7;</span><br><span class=\"line\">    background: -webkit-linear-gradient(left,#5ec8ff,#4a9fd7);</span><br><span class=\"line\">    background: -o-linear-gradient(left,#63e77d,#3e8aa6);</span><br><span class=\"line\">    background: -moz-linear-gradient(left,#63e77d,#3e8aa6);</span><br><span class=\"line\">    background: linear-gradient(left,#63e77d,#3e8aa6);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.check&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    z-index: 1;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">input.check:checked+.light&#123;</span><br><span class=\"line\">    /* background: #19be6b; */</span><br><span class=\"line\">    animation: ani 3s infinite alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.num&#123;</span><br><span class=\"line\">    padding: 0 5px;</span><br><span class=\"line\">    border-radius:0 5px 5px 0;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    font-weight: bold;</span><br><span class=\"line\">    text-shadow: 0 -1px 1px #40a9ff;</span><br><span class=\"line\">    /* box-shadow: 0 0 8px 0px  #88d6f7; */</span><br><span class=\"line\">    background: -webkit-linear-gradient(left,#4a9fd7,#2d60a2);</span><br><span class=\"line\">    background: -moz-linear-gradient(left,#3e8aa6,#2c5d9d);</span><br><span class=\"line\">    background: -o-linear-gradient(left,#3e8aa6,#2c5d9d);</span><br><span class=\"line\">    background: linear-gradient(left,#3e8aa6,#2c5d9d);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.lightbox&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    width: 20px;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.light&#123;</span><br><span class=\"line\">    transition:all .5;</span><br><span class=\"line\">    background: #ccc;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    border-radius: 5px 0 0 5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;selectBox&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;selectBut&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;lightbox&quot;&gt;</span><br><span class=\"line\">                    &lt;input </span><br><span class=\"line\">                        type=&quot;checkbox&quot; </span><br><span class=\"line\">                        class=&quot;check&quot; </span><br><span class=\"line\">                        :checked=&quot;currentValue&quot;</span><br><span class=\"line\">                        @change=&quot;change&quot;/&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;light&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">                    &lt;slot name=&quot;con&quot;&gt;ssss&lt;/slot&gt; </span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;num&quot;&gt;</span><br><span class=\"line\">                   &lt;slot name=&quot;num&quot;&gt;aaa&lt;/slot&gt; </span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    name:&apos;ButtonSelect&apos;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            //根据v-model初始化当前组件状态</span><br><span class=\"line\">            currentValue:this.value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        // v-model获取</span><br><span class=\"line\">        value:&#123;</span><br><span class=\"line\">            type:[Array,Boolean],</span><br><span class=\"line\">            default:false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        change(event)&#123;</span><br><span class=\"line\">            var value=event.target.checked;</span><br><span class=\"line\">            // 赋值v-model</span><br><span class=\"line\">            this.$emit(&apos;input&apos;,value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>关键点：</p>\n<blockquote>\n<p>template的 input<br>script:props的value和data里currentValue（获得初始状态）<br>script: change里this.$emit(‘input’)</p>\n</blockquote>\n<p>单个的复选框组件基本功能完成</p>\n<p>五、ButtonSelectGroup组件<br>实际应用中<code>ButtonSelect</code>会有很多个，我需要获取每一个的选中状态或者值（参考上面的CheckBoxGroup组件）</p>\n<h4 id=\"1-分析\"><a href=\"#1-分析\" class=\"headerlink\" title=\"1. 分析\"></a>1. 分析</h4><ol>\n<li>让多个checkbox返回数组的原理是什么？ 上面提到了，是给每一个checkbox相同的model，所以就要在父组件（ButtonSelectGroup）里给所有子组件（ButtonSelect）相同的v-model</li>\n<li>当所有的子组件其中有一个改变的时候，应该给父组件返回变化后的数组，父组件（上面提到了，是给每一个checkbox相同的model，所以就要在父组件（ButtonSelectGroup）里给所有子组件（ButtonSelect）设置相同的v-model）再将该数组通过input事件返回给<br>ButtonSelectGroup的调用者(ButtonSelectGroup的父组件)，完成v-model的传递</li>\n<li>当ButtonSelectGroup的父组件给定一个初始v-model值的时候，需要把每一个ButtonSelect进行状态的变换</li>\n</ol>\n<h4 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2. 实现\"></a>2. 实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">// 寻找子组件</span><br><span class=\"line\">function findComponentsDownward (context, componentName) &#123;</span><br><span class=\"line\">    return context.$children.reduce((components, child) =&gt; &#123;</span><br><span class=\"line\">        if (child.$options.name === componentName) components.push(child);</span><br><span class=\"line\">        const foundChilds = findComponentsDownward(child, componentName);</span><br><span class=\"line\">        return components.concat(foundChilds);</span><br><span class=\"line\">    &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    name:&apos;ButtonSelectGroup&apos;,</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        value:&#123;</span><br><span class=\"line\">            type:Array,</span><br><span class=\"line\">            default()&#123;</span><br><span class=\"line\">                return []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            childrens:[],</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">        this.updateModel()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        updateModel()&#123;</span><br><span class=\"line\">            this.childrens = findComponentsDownward(this, &apos;ButtonSelect&apos;);</span><br><span class=\"line\">            if(this.childrens)&#123;</span><br><span class=\"line\">                const &#123; value &#125;=this;</span><br><span class=\"line\">                // 给子组件设置相同的model</span><br><span class=\"line\">                this.childrens.forEach(child=&gt;&#123;</span><br><span class=\"line\">                    child.model=value;</span><br><span class=\"line\">                    child.group = true;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        change(data)&#123;</span><br><span class=\"line\">            // 通知上级组件的v-model</span><br><span class=\"line\">            this.$emit(&apos;input&apos;,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">        value () &#123;</span><br><span class=\"line\">            this.updateModel();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong> 注意注意注意 </strong></p>\n<blockquote>\n<p>这里有一个非常非常非常重要的点，就是这个watch里面这个value监听触发updateModel方法，你可以尝试去掉这个watch是什么结果。我就在这里卡了好久。来解释一下原因：<br>来一起想一下，子组件(ButtonSelect)的<code>model</code>是他爹(ButtonSelectGruop)给的，每次我点击了 <code>ButtonSelect</code>会通过<code>this.parent.change(this.model)</code> 来告诉父组件去更新使用的HelloWord里的 <code>select</code>，好了此时此刻我已经更新完了HelloWord里的 <code>v-model(select)</code>,但是注意子组件（ButtonSelect）的v-model是通过 父组件 （ButtonSelectGroup）赋值过来了，并不能直接更改，所以ButtonSelectGruop如果不加 watch的value监听的话，子组件的<code>v-model</code>永远是[]，所以可以在ButtonSelect change的时候打印一下，每次数组一定是一个值，所以要用过watch监听，每一次HelloWord的v-model变动，都要重新给ButtonSelect赋值一次，这样才能达到预期目的</p>\n</blockquote>\n<p>不加watch的样子：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/vue自定义父子组件组件v-model的通信/notok.gif\" alt=\"不加watch\" title=\"\">\n                </div>\n                <div class=\"image-caption\">不加watch</div>\n            </figure></p>\n<p>加watch的样子：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/vue自定义父子组件组件v-model的通信/ok.gif\" alt=\"加watch\" title=\"\">\n                </div>\n                <div class=\"image-caption\">加watch</div>\n            </figure></p>\n<h3 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h3><p>上面什么input事件、默认value什么的都还好理解，最最最重要的点就是上面说的watch来监听value，听我这么说可能云里雾里，需要自己动手实践一下，才能明白其中的意思</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>前些天写一个checkbox的vue组件的时候想用v-model来进行状态的判断，但是想到这了，却不知道v-model怎么在组件里面实现，这篇文章记录v-model的实现以及v-model的扩展。具体效果可以参考<code>iview</code>的 <code>Checkbox组件和CheckboxGroup组件</code></p>\n<h3 id=\"二、分析-功能描述\"><a href=\"#二、分析-功能描述\" class=\"headerlink\" title=\"二、分析 (功能描述)\"></a>二、分析 (功能描述)</h3><p>我想做两个组件 第一个叫 <strong> ButtonSelect </strong> 、<strong> ButtonSelectGroup </strong></p>\n<ol>\n<li><p><code>ButtonSelect</code> :  其实这个组件就是一个checkbox复选框，只不过样式上进行的修改，我想在这上面绑定v-model，通过v-model来告诉父级组件当前的复选框状态(true/false)，<code>ButtonSelect</code> 的效果同iview的 <code>Checkbox组件</code></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/vue自定义父子组件组件v-model的通信/checkbox.gif\" alt=\"CheckBox组件效果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CheckBox组件效果</div>\n            </figure>\n</li>\n<li><p><code>ButtonSelectGroup</code> : 当有多个 <strong>ButtonSelect</strong> 的时候，可以用 <code>ButtonSelectGroup</code>包裹<code>ButtonSelect</code>，然后通过 <code>ButtonSelectGroup</code> 上绑定 v-model ，来获得所有的选中项，格式是数组，效果同iview的 <code>CheckboxGroup</code></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/vue自定义父子组件组件v-model的通信/CheckboxGroup.gif\" alt=\"CheckboxGroup组件效果\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CheckboxGroup组件效果</div>\n            </figure>\n</li>\n</ol>\n<h3 id=\"三、关于v-model\"><a href=\"#三、关于v-model\" class=\"headerlink\" title=\"三、关于v-model\"></a>三、关于v-model</h3><p>v-model 双向绑定是一个很好用的功能，对于不同的组件v-model返回值也不同,但是这里只说说 <code>checkbox复选框的v-model</code></p>\n<ol>\n<li>单个复选框，绑定到布尔值</li>\n<li>多个复选框，绑定到同一个数组<br><a href=\"https://cn.vuejs.org/v2/guide/forms.html\" target=\"_blank\" rel=\"noopener\">官网描述</a></li>\n</ol>\n<blockquote>\n<p><strong>这里一定要仔细观察，当多个复选框的时候它的v-model的值是一样的，只有这样才能返回数组，而数组每一项的值就是checkbox的value值</strong></p>\n</blockquote>\n<h4 id=\"1-自定义v-model（v-model传递）\"><a href=\"#1-自定义v-model（v-model传递）\" class=\"headerlink\" title=\"1.自定义v-model（v-model传递）\"></a>1.自定义v-model（v-model传递）</h4><p>父组件===&gt;子组件：默认名为value的prop<br>子组件===&gt;父组件：默认名为input的事件<br>通过 <strong>value</strong> 和 <strong>input</strong> 来完成v-model的赋值和传递</p>\n<p>但是有时候我们不想用value的input进行传递，name可以用<strong>model</strong>选项自定义：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model: &#123;</span><br><span class=\"line\">    prop: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\">    event: <span class=\"string\">'change'</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>这样就变成了 prop为change 和 checked事件来代替value和input了</p>\n<h3 id=\"四、ButtonSelect的实现\"><a href=\"#四、ButtonSelect的实现\" class=\"headerlink\" title=\"四、ButtonSelect的实现\"></a>四、ButtonSelect的实现</h3><p>最顶级的组件ButtonSelectGroup、ButtonSelect的父组件，就叫他HelloWord组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;ButtonSelectGroup v-model=&quot;select&quot;&gt;</span><br><span class=\"line\">        &lt;ButtonSelect label=&apos;第一个&apos; &gt;&lt;/ButtonSelect&gt;</span><br><span class=\"line\">        &lt;ButtonSelect label=&apos;第二个&apos;&gt;&lt;/ButtonSelect&gt;</span><br><span class=\"line\">        &lt;ButtonSelect label=&apos;第三个&apos;&gt;&lt;/ButtonSelect&gt;</span><br><span class=\"line\">    &lt;/ButtonSelectGroup&gt;</span><br><span class=\"line\">    &#123;&#123;select&#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import  ButtonSelect from &quot;./ButtonSelect.vue&quot;;</span><br><span class=\"line\">import ButtonSelectGroup from &quot;./ButtonSelectGroup.vue&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;HelloWorld&apos;,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    &apos;ButtonSelect&apos;:ButtonSelect,</span><br><span class=\"line\">    &apos;ButtonSelectGroup&apos;:ButtonSelectGroup</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return&#123;</span><br><span class=\"line\">      select:[]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">@keyframes ani &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">    background-color: #52c41a;</span><br><span class=\"line\">    -webkit-box-shadow: 0 0 5px #52c41a;</span><br><span class=\"line\">    box-shadow: 0 0 5px #52c41a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    50% &#123;</span><br><span class=\"line\">        background-color: #73d13d;</span><br><span class=\"line\">        -webkit-box-shadow: 0 0 10px #73d13d;</span><br><span class=\"line\">        box-shadow: 0 0 10px #73d13d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">        background-color: #95de64;</span><br><span class=\"line\">        -webkit-box-shadow: 0 0 5px #95de64;</span><br><span class=\"line\">        box-shadow: 0 0 5px #95de64;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.selectBut&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-wrap: nowrap;</span><br><span class=\"line\">    margin: 5px;</span><br><span class=\"line\">    border-radius: 5px ;</span><br><span class=\"line\">    line-height: 30px;</span><br><span class=\"line\">    height: 30px;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.selectBox&#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.con&#123;</span><br><span class=\"line\">    padding:0 5px;</span><br><span class=\"line\">    box-shadow: 0 0 8px 0px  #88d6f7;</span><br><span class=\"line\">    background: -webkit-linear-gradient(left,#5ec8ff,#4a9fd7);</span><br><span class=\"line\">    background: -o-linear-gradient(left,#63e77d,#3e8aa6);</span><br><span class=\"line\">    background: -moz-linear-gradient(left,#63e77d,#3e8aa6);</span><br><span class=\"line\">    background: linear-gradient(left,#63e77d,#3e8aa6);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.check&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    z-index: 1;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">input.check:checked+.light&#123;</span><br><span class=\"line\">    /* background: #19be6b; */</span><br><span class=\"line\">    animation: ani 3s infinite alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.num&#123;</span><br><span class=\"line\">    padding: 0 5px;</span><br><span class=\"line\">    border-radius:0 5px 5px 0;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    font-weight: bold;</span><br><span class=\"line\">    text-shadow: 0 -1px 1px #40a9ff;</span><br><span class=\"line\">    /* box-shadow: 0 0 8px 0px  #88d6f7; */</span><br><span class=\"line\">    background: -webkit-linear-gradient(left,#4a9fd7,#2d60a2);</span><br><span class=\"line\">    background: -moz-linear-gradient(left,#3e8aa6,#2c5d9d);</span><br><span class=\"line\">    background: -o-linear-gradient(left,#3e8aa6,#2c5d9d);</span><br><span class=\"line\">    background: linear-gradient(left,#3e8aa6,#2c5d9d);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.lightbox&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    width: 20px;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.light&#123;</span><br><span class=\"line\">    transition:all .5;</span><br><span class=\"line\">    background: #ccc;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">    border-radius: 5px 0 0 5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;selectBox&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;selectBut&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;lightbox&quot;&gt;</span><br><span class=\"line\">                    &lt;input </span><br><span class=\"line\">                        type=&quot;checkbox&quot; </span><br><span class=\"line\">                        class=&quot;check&quot; </span><br><span class=\"line\">                        :checked=&quot;currentValue&quot;</span><br><span class=\"line\">                        @change=&quot;change&quot;/&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;light&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">                    &lt;slot name=&quot;con&quot;&gt;ssss&lt;/slot&gt; </span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;num&quot;&gt;</span><br><span class=\"line\">                   &lt;slot name=&quot;num&quot;&gt;aaa&lt;/slot&gt; </span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    name:&apos;ButtonSelect&apos;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            //根据v-model初始化当前组件状态</span><br><span class=\"line\">            currentValue:this.value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        // v-model获取</span><br><span class=\"line\">        value:&#123;</span><br><span class=\"line\">            type:[Array,Boolean],</span><br><span class=\"line\">            default:false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        change(event)&#123;</span><br><span class=\"line\">            var value=event.target.checked;</span><br><span class=\"line\">            // 赋值v-model</span><br><span class=\"line\">            this.$emit(&apos;input&apos;,value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>关键点：</p>\n<blockquote>\n<p>template的 input<br>script:props的value和data里currentValue（获得初始状态）<br>script: change里this.$emit(‘input’)</p>\n</blockquote>\n<p>单个的复选框组件基本功能完成</p>\n<p>五、ButtonSelectGroup组件<br>实际应用中<code>ButtonSelect</code>会有很多个，我需要获取每一个的选中状态或者值（参考上面的CheckBoxGroup组件）</p>\n<h4 id=\"1-分析\"><a href=\"#1-分析\" class=\"headerlink\" title=\"1. 分析\"></a>1. 分析</h4><ol>\n<li>让多个checkbox返回数组的原理是什么？ 上面提到了，是给每一个checkbox相同的model，所以就要在父组件（ButtonSelectGroup）里给所有子组件（ButtonSelect）相同的v-model</li>\n<li>当所有的子组件其中有一个改变的时候，应该给父组件返回变化后的数组，父组件（上面提到了，是给每一个checkbox相同的model，所以就要在父组件（ButtonSelectGroup）里给所有子组件（ButtonSelect）设置相同的v-model）再将该数组通过input事件返回给<br>ButtonSelectGroup的调用者(ButtonSelectGroup的父组件)，完成v-model的传递</li>\n<li>当ButtonSelectGroup的父组件给定一个初始v-model值的时候，需要把每一个ButtonSelect进行状态的变换</li>\n</ol>\n<h4 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2. 实现\"></a>2. 实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">// 寻找子组件</span><br><span class=\"line\">function findComponentsDownward (context, componentName) &#123;</span><br><span class=\"line\">    return context.$children.reduce((components, child) =&gt; &#123;</span><br><span class=\"line\">        if (child.$options.name === componentName) components.push(child);</span><br><span class=\"line\">        const foundChilds = findComponentsDownward(child, componentName);</span><br><span class=\"line\">        return components.concat(foundChilds);</span><br><span class=\"line\">    &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    name:&apos;ButtonSelectGroup&apos;,</span><br><span class=\"line\">    props:&#123;</span><br><span class=\"line\">        value:&#123;</span><br><span class=\"line\">            type:Array,</span><br><span class=\"line\">            default()&#123;</span><br><span class=\"line\">                return []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            childrens:[],</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">        this.updateModel()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        updateModel()&#123;</span><br><span class=\"line\">            this.childrens = findComponentsDownward(this, &apos;ButtonSelect&apos;);</span><br><span class=\"line\">            if(this.childrens)&#123;</span><br><span class=\"line\">                const &#123; value &#125;=this;</span><br><span class=\"line\">                // 给子组件设置相同的model</span><br><span class=\"line\">                this.childrens.forEach(child=&gt;&#123;</span><br><span class=\"line\">                    child.model=value;</span><br><span class=\"line\">                    child.group = true;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        change(data)&#123;</span><br><span class=\"line\">            // 通知上级组件的v-model</span><br><span class=\"line\">            this.$emit(&apos;input&apos;,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">        value () &#123;</span><br><span class=\"line\">            this.updateModel();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong> 注意注意注意 </strong></p>\n<blockquote>\n<p>这里有一个非常非常非常重要的点，就是这个watch里面这个value监听触发updateModel方法，你可以尝试去掉这个watch是什么结果。我就在这里卡了好久。来解释一下原因：<br>来一起想一下，子组件(ButtonSelect)的<code>model</code>是他爹(ButtonSelectGruop)给的，每次我点击了 <code>ButtonSelect</code>会通过<code>this.parent.change(this.model)</code> 来告诉父组件去更新使用的HelloWord里的 <code>select</code>，好了此时此刻我已经更新完了HelloWord里的 <code>v-model(select)</code>,但是注意子组件（ButtonSelect）的v-model是通过 父组件 （ButtonSelectGroup）赋值过来了，并不能直接更改，所以ButtonSelectGruop如果不加 watch的value监听的话，子组件的<code>v-model</code>永远是[]，所以可以在ButtonSelect change的时候打印一下，每次数组一定是一个值，所以要用过watch监听，每一次HelloWord的v-model变动，都要重新给ButtonSelect赋值一次，这样才能达到预期目的</p>\n</blockquote>\n<p>不加watch的样子：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/vue自定义父子组件组件v-model的通信/notok.gif\" alt=\"不加watch\" title=\"\">\n                </div>\n                <div class=\"image-caption\">不加watch</div>\n            </figure></p>\n<p>加watch的样子：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/vue自定义父子组件组件v-model的通信/ok.gif\" alt=\"加watch\" title=\"\">\n                </div>\n                <div class=\"image-caption\">加watch</div>\n            </figure></p>\n<h3 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h3><p>上面什么input事件、默认value什么的都还好理解，最最最重要的点就是上面说的watch来监听value，听我这么说可能云里雾里，需要自己动手实践一下，才能明白其中的意思</p>\n"},{"title":"webpack4.0中的mode和.babelrc的env.development配置项目","date":"2018-04-12T06:29:57.000Z","_content":"\n### 一、前言\n之前写过怎么在webpack中使用react-hot-loader做热更新功能，不得不说是真的非常麻烦，今天发现了更好用的办法来记录一下\n#### 1.这篇文章讲的什么？\n1.更简单的配置 **热更新**的方法\n2.webpack4.0的**mode配置项**有啥用？\n3.babelrc中的**env.development**是干啥的？\n\n### 二、热更新\n`注意，本部分着重讲解的是热更新，至于上面提到的2和3放在下个部分`\nwebpack.config.js的代码：\n``` javascript\nconst webpack=require('webpack')\nconst opn=require('opn')\nconst merge=require('webpack-merge')\nconst path=require('path')\nconst baseWebpackConfig=require('./webpack.base.config')\nconst webpackFile=require('./webpack.file.config')\nconst htmlWebpackPlugin=require('html-webpack-plugin')\n\nlet config=merge(baseWebpackConfig,{\n\tmode:'development',\n\toutput:{\n\t\tpath:path.join(webpackFile.devDirectory),\n\t\tfilename:'js[name].[hash].js',\n\t\tpublicPath:''\n\t},\n\tplugins:[\n\t\t/*热更新*/\n\t\tnew webpack.HotModuleReplacementPlugin(),\n\t\tnew htmlWebpackPlugin({\n\t\t\ttemplate:path.join(__dirname,'../template/index.html')\n\t\t})\n\t],\n\tmodule:{\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(js|jsx)$/,\n\t\t\t\tuse:'babel-loader',\n\t\t\t\tinclude:[\n\t\t\t\t\tpath.join(__dirname,'../client')\n\t\t\t\t],\n\t\t\t\texclude:path.join(__dirname,'../node_modules')\n\t\t\t}\n\t\t]\n\t},\n\tdevServer:{\n\t\thost:'0.0.0.0',\n\t\tport:'8888',\n\t\thot:true,\n\t\toverlay:{\n\t\t\terrors:true\n\t\t},\n\t\tcontentBase:path.join(__dirname,webpackFile.devDirectory),\n\t\thistoryApiFallback: true,\n\t\tproxy:[\n\t\t\t{\n\t\t\t\tcontext:['/api'],\n\t\t\t\ttarget:'localhost:8888',\n\t\t\t\tsecure: false\n\t\t\t}\n\t\t],\n\t\t/*打开浏览器*/\n\t\tafter(){\n\t\t\topn('http://localhost:'+this.port)\n\t\t}\n\t}\n})\nmodule.exports=config;\n\n```\n*.babelrc*\n\n\n``` javascript\n{\n\t\"presets\":['react','env'],\n\t\"env\":{\n\t\t/*开发环境下执行*/\n\t\t\"development\":{\n\t\t\t\"presets\":[\"react-hmre\"]\n\t\t}\n\t}\t\n}\n```\n\npackage.json文件的启动命令\n``` javascript\n\"dev\": \"webpack-dev-server --config build/webpack.dev.config.js\"\n```\n\n现在配置热替换仅需三个步骤\n1. webpack中`devServer.hot=true`\n2. webpack中plugins添加`new webpack.HotModuleReplacementPlugin()`\n3. '.babelrc'文件中使用 `react-hmre` （npm i babel-presets-react-hmre）预设\n\n\n\n配置完成是不是很简单？看看执行结果\n\n![hmr](/images/webpack4-0中的mode和-babelrc的env-development配置项目/1.gif)\n\n### 三、webpack4.0的mode配置项有啥用？\nmode配置项会告诉webpack使用相应的内置优化\n\nwebpack运行时还会根据mode设置一个全局变量process.env.NODE_ENV,这里的process.env.NODE_ENV不是node中的环境变量,而是webpack.DefinePlugin中定义的全局变量,允许你根据不同的环境执行不同的代码.\n\n参数：\n\n选项 | 描述\n- | :-: |\ndevelopment | Provides process.env.NODE_ENV with value development. Enables NamedChunksPlugin and NamedModulesPlugin.\nproduction | Provides process.env.NODE_ENV with value production. Enables FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin and UglifyJsPlugin.\n\n从网上找到了更详细的优化说明\n列出了针对这两种情况做的对应优化\n**development**\n``` javascript\n//调试\ndevtool:eval\n//缓存模块, 避免在未更改时重建它们。\ncache:true\n//缓存已解决的依赖项, 避免重新解析它们。\nmodule.unsafeCache:true\n//在 bundle 中引入「所包含模块信息」的相关注释\noutput.pathinfo:true\n//在可能的情况下确定每个模块的导出,被用于其他优化或代码生成。\noptimization.providedExports:true\n//找到chunk中共享的模块,取出来生成单独的chunk\noptimization.splitChunks:true\n//为 webpack 运行时代码创建单独的chunk\noptimization.runtimeChunk:true\n//编译错误时不写入到输出\noptimization.noEmitOnErrors:true\n//给模块有意义的名称代替ids\noptimization.namedModules:true\n//给模chunk有意义的名称代替ids\noptimization.namedChunks:true\n```\n**production**\n``` javascript\n//性能相关配置\nperformance:{hints:\"error\"....}\n//某些chunk的子chunk已一种方式被确定和标记,这些子chunks在加载更大的块时不必加载\noptimization.flagIncludedChunks:true\n//给经常使用的ids更短的值\noptimization.occurrenceOrder:true\n//确定每个模块下被使用的导出\noptimization.usedExports:true\n//识别package.json or rules sideEffects 标志\noptimization.sideEffects:true\n//尝试查找模块图中可以安全连接到单个模块中的段。- -\noptimization.concatenateModules:true\n//使用uglify-js压缩代码\noptimization.minimize:true\n\n```\n\n例如:\n\n``` javascript\nif(process.env.NODE_ENV === 'development'){\n    //开发环境 do something\n}else{\n    //生产环境 do something\n}\n```\n最终将编译成\n\n``` javascript\nif(true){\n   //开发环境 do something\n}else{\n   //生产环境 do something\n}\n```\n生产环境下,uglify打包代码时会自动删除不可达代码,也就是说生产环境压缩后最终的代码为:\n``` javascript\n//生产环境 do something\n```\n\n### 四、babelrc中的env.development是干啥的？\nenv选项可以针对特定环境进行设置。此env值会从**process.env.BABEL_ENV**中获取；如果该值不存在，会使用**process.env.NODE_ENV**；二者都不存在，使用默认值”development”。\n\n启动命令设置`process.env.BABEL_ENV`\n``` javascript\n\"dev\": \"cross-env BABEL_ENV=development webpack-dev-server --config build/webpack.dev.config.js\"\n```\n``` javascript\n{\n\t\"presets\":['react','env'],\n\t\"env\":{\n\t\t/*开发环境下执行*/\n\t\t\"development\":{\n\t\t\t\"presets\":[\"react-hmre\"]\n\t\t}\n\t}\t\n}\n```\n这样就会执行\"development\"下配置的内容","source":"_posts/webpack4-0中的mode和-babelrc的env-development配置项目.md","raw":"---\ntitle: webpack4.0中的mode和.babelrc的env.development配置项目\ndate: 2018-04-12 14:29:57\ntags: webpack\n---\n\n### 一、前言\n之前写过怎么在webpack中使用react-hot-loader做热更新功能，不得不说是真的非常麻烦，今天发现了更好用的办法来记录一下\n#### 1.这篇文章讲的什么？\n1.更简单的配置 **热更新**的方法\n2.webpack4.0的**mode配置项**有啥用？\n3.babelrc中的**env.development**是干啥的？\n\n### 二、热更新\n`注意，本部分着重讲解的是热更新，至于上面提到的2和3放在下个部分`\nwebpack.config.js的代码：\n``` javascript\nconst webpack=require('webpack')\nconst opn=require('opn')\nconst merge=require('webpack-merge')\nconst path=require('path')\nconst baseWebpackConfig=require('./webpack.base.config')\nconst webpackFile=require('./webpack.file.config')\nconst htmlWebpackPlugin=require('html-webpack-plugin')\n\nlet config=merge(baseWebpackConfig,{\n\tmode:'development',\n\toutput:{\n\t\tpath:path.join(webpackFile.devDirectory),\n\t\tfilename:'js[name].[hash].js',\n\t\tpublicPath:''\n\t},\n\tplugins:[\n\t\t/*热更新*/\n\t\tnew webpack.HotModuleReplacementPlugin(),\n\t\tnew htmlWebpackPlugin({\n\t\t\ttemplate:path.join(__dirname,'../template/index.html')\n\t\t})\n\t],\n\tmodule:{\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(js|jsx)$/,\n\t\t\t\tuse:'babel-loader',\n\t\t\t\tinclude:[\n\t\t\t\t\tpath.join(__dirname,'../client')\n\t\t\t\t],\n\t\t\t\texclude:path.join(__dirname,'../node_modules')\n\t\t\t}\n\t\t]\n\t},\n\tdevServer:{\n\t\thost:'0.0.0.0',\n\t\tport:'8888',\n\t\thot:true,\n\t\toverlay:{\n\t\t\terrors:true\n\t\t},\n\t\tcontentBase:path.join(__dirname,webpackFile.devDirectory),\n\t\thistoryApiFallback: true,\n\t\tproxy:[\n\t\t\t{\n\t\t\t\tcontext:['/api'],\n\t\t\t\ttarget:'localhost:8888',\n\t\t\t\tsecure: false\n\t\t\t}\n\t\t],\n\t\t/*打开浏览器*/\n\t\tafter(){\n\t\t\topn('http://localhost:'+this.port)\n\t\t}\n\t}\n})\nmodule.exports=config;\n\n```\n*.babelrc*\n\n\n``` javascript\n{\n\t\"presets\":['react','env'],\n\t\"env\":{\n\t\t/*开发环境下执行*/\n\t\t\"development\":{\n\t\t\t\"presets\":[\"react-hmre\"]\n\t\t}\n\t}\t\n}\n```\n\npackage.json文件的启动命令\n``` javascript\n\"dev\": \"webpack-dev-server --config build/webpack.dev.config.js\"\n```\n\n现在配置热替换仅需三个步骤\n1. webpack中`devServer.hot=true`\n2. webpack中plugins添加`new webpack.HotModuleReplacementPlugin()`\n3. '.babelrc'文件中使用 `react-hmre` （npm i babel-presets-react-hmre）预设\n\n\n\n配置完成是不是很简单？看看执行结果\n\n![hmr](/images/webpack4-0中的mode和-babelrc的env-development配置项目/1.gif)\n\n### 三、webpack4.0的mode配置项有啥用？\nmode配置项会告诉webpack使用相应的内置优化\n\nwebpack运行时还会根据mode设置一个全局变量process.env.NODE_ENV,这里的process.env.NODE_ENV不是node中的环境变量,而是webpack.DefinePlugin中定义的全局变量,允许你根据不同的环境执行不同的代码.\n\n参数：\n\n选项 | 描述\n- | :-: |\ndevelopment | Provides process.env.NODE_ENV with value development. Enables NamedChunksPlugin and NamedModulesPlugin.\nproduction | Provides process.env.NODE_ENV with value production. Enables FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin and UglifyJsPlugin.\n\n从网上找到了更详细的优化说明\n列出了针对这两种情况做的对应优化\n**development**\n``` javascript\n//调试\ndevtool:eval\n//缓存模块, 避免在未更改时重建它们。\ncache:true\n//缓存已解决的依赖项, 避免重新解析它们。\nmodule.unsafeCache:true\n//在 bundle 中引入「所包含模块信息」的相关注释\noutput.pathinfo:true\n//在可能的情况下确定每个模块的导出,被用于其他优化或代码生成。\noptimization.providedExports:true\n//找到chunk中共享的模块,取出来生成单独的chunk\noptimization.splitChunks:true\n//为 webpack 运行时代码创建单独的chunk\noptimization.runtimeChunk:true\n//编译错误时不写入到输出\noptimization.noEmitOnErrors:true\n//给模块有意义的名称代替ids\noptimization.namedModules:true\n//给模chunk有意义的名称代替ids\noptimization.namedChunks:true\n```\n**production**\n``` javascript\n//性能相关配置\nperformance:{hints:\"error\"....}\n//某些chunk的子chunk已一种方式被确定和标记,这些子chunks在加载更大的块时不必加载\noptimization.flagIncludedChunks:true\n//给经常使用的ids更短的值\noptimization.occurrenceOrder:true\n//确定每个模块下被使用的导出\noptimization.usedExports:true\n//识别package.json or rules sideEffects 标志\noptimization.sideEffects:true\n//尝试查找模块图中可以安全连接到单个模块中的段。- -\noptimization.concatenateModules:true\n//使用uglify-js压缩代码\noptimization.minimize:true\n\n```\n\n例如:\n\n``` javascript\nif(process.env.NODE_ENV === 'development'){\n    //开发环境 do something\n}else{\n    //生产环境 do something\n}\n```\n最终将编译成\n\n``` javascript\nif(true){\n   //开发环境 do something\n}else{\n   //生产环境 do something\n}\n```\n生产环境下,uglify打包代码时会自动删除不可达代码,也就是说生产环境压缩后最终的代码为:\n``` javascript\n//生产环境 do something\n```\n\n### 四、babelrc中的env.development是干啥的？\nenv选项可以针对特定环境进行设置。此env值会从**process.env.BABEL_ENV**中获取；如果该值不存在，会使用**process.env.NODE_ENV**；二者都不存在，使用默认值”development”。\n\n启动命令设置`process.env.BABEL_ENV`\n``` javascript\n\"dev\": \"cross-env BABEL_ENV=development webpack-dev-server --config build/webpack.dev.config.js\"\n```\n``` javascript\n{\n\t\"presets\":['react','env'],\n\t\"env\":{\n\t\t/*开发环境下执行*/\n\t\t\"development\":{\n\t\t\t\"presets\":[\"react-hmre\"]\n\t\t}\n\t}\t\n}\n```\n这样就会执行\"development\"下配置的内容","slug":"webpack4-0中的mode和-babelrc的env-development配置项目","published":1,"updated":"2018-09-28T02:53:25.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8khe0011vps6obw7nr08","content":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>之前写过怎么在webpack中使用react-hot-loader做热更新功能，不得不说是真的非常麻烦，今天发现了更好用的办法来记录一下</p>\n<h4 id=\"1-这篇文章讲的什么？\"><a href=\"#1-这篇文章讲的什么？\" class=\"headerlink\" title=\"1.这篇文章讲的什么？\"></a>1.这篇文章讲的什么？</h4><p>1.更简单的配置 <strong>热更新</strong>的方法<br>2.webpack4.0的<strong>mode配置项</strong>有啥用？<br>3.babelrc中的<strong>env.development</strong>是干啥的？</p>\n<h3 id=\"二、热更新\"><a href=\"#二、热更新\" class=\"headerlink\" title=\"二、热更新\"></a>二、热更新</h3><p><code>注意，本部分着重讲解的是热更新，至于上面提到的2和3放在下个部分</code><br>webpack.config.js的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack=<span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> opn=<span class=\"built_in\">require</span>(<span class=\"string\">'opn'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge=<span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig=<span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackFile=<span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.file.config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlWebpackPlugin=<span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> config=merge(baseWebpackConfig,&#123;</span><br><span class=\"line\">\tmode:<span class=\"string\">'development'</span>,</span><br><span class=\"line\">\toutput:&#123;</span><br><span class=\"line\">\t\tpath:path.join(webpackFile.devDirectory),</span><br><span class=\"line\">\t\tfilename:<span class=\"string\">'js[name].[hash].js'</span>,</span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">''</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"comment\">/*热更新*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttemplate:path.join(__dirname,<span class=\"string\">'../template/index.html'</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">\t\t\t\tinclude:[</span><br><span class=\"line\">\t\t\t\t\tpath.join(__dirname,<span class=\"string\">'../client'</span>)</span><br><span class=\"line\">\t\t\t\t],</span><br><span class=\"line\">\t\t\t\texclude:path.join(__dirname,<span class=\"string\">'../node_modules'</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tdevServer:&#123;</span><br><span class=\"line\">\t\thost:<span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">\t\tport:<span class=\"string\">'8888'</span>,</span><br><span class=\"line\">\t\thot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\toverlay:&#123;</span><br><span class=\"line\">\t\t\terrors:<span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tcontentBase:path.join(__dirname,webpackFile.devDirectory),</span><br><span class=\"line\">\t\thistoryApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tproxy:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcontext:[<span class=\"string\">'/api'</span>],</span><br><span class=\"line\">\t\t\t\ttarget:<span class=\"string\">'localhost:8888'</span>,</span><br><span class=\"line\">\t\t\t\tsecure: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">/*打开浏览器*/</span></span><br><span class=\"line\">\t\tafter()&#123;</span><br><span class=\"line\">\t\t\topn(<span class=\"string\">'http://localhost:'</span>+<span class=\"keyword\">this</span>.port)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=config;</span><br></pre></td></tr></table></figure></p>\n<p><em>.babelrc</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"presets\"</span>:[<span class=\"string\">'react'</span>,<span class=\"string\">'env'</span>],</span><br><span class=\"line\">\t<span class=\"string\">\"env\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*开发环境下执行*/</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"development\"</span>:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"react-hmre\"</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>package.json文件的启动命令<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --config build/webpack.dev.config.js\"</span></span><br></pre></td></tr></table></figure></p>\n<p>现在配置热替换仅需三个步骤</p>\n<ol>\n<li>webpack中<code>devServer.hot=true</code></li>\n<li>webpack中plugins添加<code>new webpack.HotModuleReplacementPlugin()</code></li>\n<li>‘.babelrc’文件中使用 <code>react-hmre</code> （npm i babel-presets-react-hmre）预设</li>\n</ol>\n<p>配置完成是不是很简单？看看执行结果</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack4-0中的mode和-babelrc的env-development配置项目/1.gif\" alt=\"hmr\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hmr</div>\n            </figure>\n<h3 id=\"三、webpack4-0的mode配置项有啥用？\"><a href=\"#三、webpack4-0的mode配置项有啥用？\" class=\"headerlink\" title=\"三、webpack4.0的mode配置项有啥用？\"></a>三、webpack4.0的mode配置项有啥用？</h3><p>mode配置项会告诉webpack使用相应的内置优化</p>\n<p>webpack运行时还会根据mode设置一个全局变量process.env.NODE_ENV,这里的process.env.NODE_ENV不是node中的环境变量,而是webpack.DefinePlugin中定义的全局变量,允许你根据不同的环境执行不同的代码.</p>\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>development</td>\n<td style=\"text-align:center\">Provides process.env.NODE_ENV with value development. Enables NamedChunksPlugin and NamedModulesPlugin.</td>\n</tr>\n<tr>\n<td>production</td>\n<td style=\"text-align:center\">Provides process.env.NODE_ENV with value production. Enables FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin and UglifyJsPlugin.</td>\n</tr>\n</tbody>\n</table>\n<p>从网上找到了更详细的优化说明<br>列出了针对这两种情况做的对应优化<br><strong>development</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调试</span></span><br><span class=\"line\">devtool:<span class=\"built_in\">eval</span></span><br><span class=\"line\"><span class=\"comment\">//缓存模块, 避免在未更改时重建它们。</span></span><br><span class=\"line\">cache:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//缓存已解决的依赖项, 避免重新解析它们。</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.unsafeCache:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//在 bundle 中引入「所包含模块信息」的相关注释</span></span><br><span class=\"line\">output.pathinfo:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//在可能的情况下确定每个模块的导出,被用于其他优化或代码生成。</span></span><br><span class=\"line\">optimization.providedExports:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//找到chunk中共享的模块,取出来生成单独的chunk</span></span><br><span class=\"line\">optimization.splitChunks:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//为 webpack 运行时代码创建单独的chunk</span></span><br><span class=\"line\">optimization.runtimeChunk:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//编译错误时不写入到输出</span></span><br><span class=\"line\">optimization.noEmitOnErrors:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//给模块有意义的名称代替ids</span></span><br><span class=\"line\">optimization.namedModules:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//给模chunk有意义的名称代替ids</span></span><br><span class=\"line\">optimization.namedChunks:<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>production</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//性能相关配置</span></span><br><span class=\"line\">performance:&#123;<span class=\"attr\">hints</span>:<span class=\"string\">\"error\"</span>....&#125;</span><br><span class=\"line\"><span class=\"comment\">//某些chunk的子chunk已一种方式被确定和标记,这些子chunks在加载更大的块时不必加载</span></span><br><span class=\"line\">optimization.flagIncludedChunks:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//给经常使用的ids更短的值</span></span><br><span class=\"line\">optimization.occurrenceOrder:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//确定每个模块下被使用的导出</span></span><br><span class=\"line\">optimization.usedExports:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//识别package.json or rules sideEffects 标志</span></span><br><span class=\"line\">optimization.sideEffects:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//尝试查找模块图中可以安全连接到单个模块中的段。- -</span></span><br><span class=\"line\">optimization.concatenateModules:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//使用uglify-js压缩代码</span></span><br><span class=\"line\">optimization.minimize:<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(process.env.NODE_ENV === <span class=\"string\">'development'</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//开发环境 do something</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//生产环境 do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终将编译成</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//开发环境 do something</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//生产环境 do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生产环境下,uglify打包代码时会自动删除不可达代码,也就是说生产环境压缩后最终的代码为:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生产环境 do something</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、babelrc中的env-development是干啥的？\"><a href=\"#四、babelrc中的env-development是干啥的？\" class=\"headerlink\" title=\"四、babelrc中的env.development是干啥的？\"></a>四、babelrc中的env.development是干啥的？</h3><p>env选项可以针对特定环境进行设置。此env值会从<strong>process.env.BABEL_ENV</strong>中获取；如果该值不存在，会使用<strong>process.env.NODE_ENV</strong>；二者都不存在，使用默认值”development”。</p>\n<p>启动命令设置<code>process.env.BABEL_ENV</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dev\"</span>: <span class=\"string\">\"cross-env BABEL_ENV=development webpack-dev-server --config build/webpack.dev.config.js\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"presets\"</span>:[<span class=\"string\">'react'</span>,<span class=\"string\">'env'</span>],</span><br><span class=\"line\">\t<span class=\"string\">\"env\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*开发环境下执行*/</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"development\"</span>:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"react-hmre\"</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就会执行”development”下配置的内容</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>之前写过怎么在webpack中使用react-hot-loader做热更新功能，不得不说是真的非常麻烦，今天发现了更好用的办法来记录一下</p>\n<h4 id=\"1-这篇文章讲的什么？\"><a href=\"#1-这篇文章讲的什么？\" class=\"headerlink\" title=\"1.这篇文章讲的什么？\"></a>1.这篇文章讲的什么？</h4><p>1.更简单的配置 <strong>热更新</strong>的方法<br>2.webpack4.0的<strong>mode配置项</strong>有啥用？<br>3.babelrc中的<strong>env.development</strong>是干啥的？</p>\n<h3 id=\"二、热更新\"><a href=\"#二、热更新\" class=\"headerlink\" title=\"二、热更新\"></a>二、热更新</h3><p><code>注意，本部分着重讲解的是热更新，至于上面提到的2和3放在下个部分</code><br>webpack.config.js的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack=<span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> opn=<span class=\"built_in\">require</span>(<span class=\"string\">'opn'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge=<span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig=<span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackFile=<span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.file.config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlWebpackPlugin=<span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> config=merge(baseWebpackConfig,&#123;</span><br><span class=\"line\">\tmode:<span class=\"string\">'development'</span>,</span><br><span class=\"line\">\toutput:&#123;</span><br><span class=\"line\">\t\tpath:path.join(webpackFile.devDirectory),</span><br><span class=\"line\">\t\tfilename:<span class=\"string\">'js[name].[hash].js'</span>,</span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">''</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"comment\">/*热更新*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttemplate:path.join(__dirname,<span class=\"string\">'../template/index.html'</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">\t\t\t\tinclude:[</span><br><span class=\"line\">\t\t\t\t\tpath.join(__dirname,<span class=\"string\">'../client'</span>)</span><br><span class=\"line\">\t\t\t\t],</span><br><span class=\"line\">\t\t\t\texclude:path.join(__dirname,<span class=\"string\">'../node_modules'</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tdevServer:&#123;</span><br><span class=\"line\">\t\thost:<span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">\t\tport:<span class=\"string\">'8888'</span>,</span><br><span class=\"line\">\t\thot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\toverlay:&#123;</span><br><span class=\"line\">\t\t\terrors:<span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tcontentBase:path.join(__dirname,webpackFile.devDirectory),</span><br><span class=\"line\">\t\thistoryApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tproxy:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcontext:[<span class=\"string\">'/api'</span>],</span><br><span class=\"line\">\t\t\t\ttarget:<span class=\"string\">'localhost:8888'</span>,</span><br><span class=\"line\">\t\t\t\tsecure: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">/*打开浏览器*/</span></span><br><span class=\"line\">\t\tafter()&#123;</span><br><span class=\"line\">\t\t\topn(<span class=\"string\">'http://localhost:'</span>+<span class=\"keyword\">this</span>.port)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=config;</span><br></pre></td></tr></table></figure></p>\n<p><em>.babelrc</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"presets\"</span>:[<span class=\"string\">'react'</span>,<span class=\"string\">'env'</span>],</span><br><span class=\"line\">\t<span class=\"string\">\"env\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*开发环境下执行*/</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"development\"</span>:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"react-hmre\"</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>package.json文件的启动命令<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --config build/webpack.dev.config.js\"</span></span><br></pre></td></tr></table></figure></p>\n<p>现在配置热替换仅需三个步骤</p>\n<ol>\n<li>webpack中<code>devServer.hot=true</code></li>\n<li>webpack中plugins添加<code>new webpack.HotModuleReplacementPlugin()</code></li>\n<li>‘.babelrc’文件中使用 <code>react-hmre</code> （npm i babel-presets-react-hmre）预设</li>\n</ol>\n<p>配置完成是不是很简单？看看执行结果</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack4-0中的mode和-babelrc的env-development配置项目/1.gif\" alt=\"hmr\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hmr</div>\n            </figure>\n<h3 id=\"三、webpack4-0的mode配置项有啥用？\"><a href=\"#三、webpack4-0的mode配置项有啥用？\" class=\"headerlink\" title=\"三、webpack4.0的mode配置项有啥用？\"></a>三、webpack4.0的mode配置项有啥用？</h3><p>mode配置项会告诉webpack使用相应的内置优化</p>\n<p>webpack运行时还会根据mode设置一个全局变量process.env.NODE_ENV,这里的process.env.NODE_ENV不是node中的环境变量,而是webpack.DefinePlugin中定义的全局变量,允许你根据不同的环境执行不同的代码.</p>\n<p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>development</td>\n<td style=\"text-align:center\">Provides process.env.NODE_ENV with value development. Enables NamedChunksPlugin and NamedModulesPlugin.</td>\n</tr>\n<tr>\n<td>production</td>\n<td style=\"text-align:center\">Provides process.env.NODE_ENV with value production. Enables FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin and UglifyJsPlugin.</td>\n</tr>\n</tbody>\n</table>\n<p>从网上找到了更详细的优化说明<br>列出了针对这两种情况做的对应优化<br><strong>development</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调试</span></span><br><span class=\"line\">devtool:<span class=\"built_in\">eval</span></span><br><span class=\"line\"><span class=\"comment\">//缓存模块, 避免在未更改时重建它们。</span></span><br><span class=\"line\">cache:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//缓存已解决的依赖项, 避免重新解析它们。</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.unsafeCache:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//在 bundle 中引入「所包含模块信息」的相关注释</span></span><br><span class=\"line\">output.pathinfo:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//在可能的情况下确定每个模块的导出,被用于其他优化或代码生成。</span></span><br><span class=\"line\">optimization.providedExports:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//找到chunk中共享的模块,取出来生成单独的chunk</span></span><br><span class=\"line\">optimization.splitChunks:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//为 webpack 运行时代码创建单独的chunk</span></span><br><span class=\"line\">optimization.runtimeChunk:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//编译错误时不写入到输出</span></span><br><span class=\"line\">optimization.noEmitOnErrors:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//给模块有意义的名称代替ids</span></span><br><span class=\"line\">optimization.namedModules:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//给模chunk有意义的名称代替ids</span></span><br><span class=\"line\">optimization.namedChunks:<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>production</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//性能相关配置</span></span><br><span class=\"line\">performance:&#123;<span class=\"attr\">hints</span>:<span class=\"string\">\"error\"</span>....&#125;</span><br><span class=\"line\"><span class=\"comment\">//某些chunk的子chunk已一种方式被确定和标记,这些子chunks在加载更大的块时不必加载</span></span><br><span class=\"line\">optimization.flagIncludedChunks:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//给经常使用的ids更短的值</span></span><br><span class=\"line\">optimization.occurrenceOrder:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//确定每个模块下被使用的导出</span></span><br><span class=\"line\">optimization.usedExports:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//识别package.json or rules sideEffects 标志</span></span><br><span class=\"line\">optimization.sideEffects:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//尝试查找模块图中可以安全连接到单个模块中的段。- -</span></span><br><span class=\"line\">optimization.concatenateModules:<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">//使用uglify-js压缩代码</span></span><br><span class=\"line\">optimization.minimize:<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(process.env.NODE_ENV === <span class=\"string\">'development'</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//开发环境 do something</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//生产环境 do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终将编译成</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//开发环境 do something</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//生产环境 do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生产环境下,uglify打包代码时会自动删除不可达代码,也就是说生产环境压缩后最终的代码为:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生产环境 do something</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、babelrc中的env-development是干啥的？\"><a href=\"#四、babelrc中的env-development是干啥的？\" class=\"headerlink\" title=\"四、babelrc中的env.development是干啥的？\"></a>四、babelrc中的env.development是干啥的？</h3><p>env选项可以针对特定环境进行设置。此env值会从<strong>process.env.BABEL_ENV</strong>中获取；如果该值不存在，会使用<strong>process.env.NODE_ENV</strong>；二者都不存在，使用默认值”development”。</p>\n<p>启动命令设置<code>process.env.BABEL_ENV</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dev\"</span>: <span class=\"string\">\"cross-env BABEL_ENV=development webpack-dev-server --config build/webpack.dev.config.js\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"presets\"</span>:[<span class=\"string\">'react'</span>,<span class=\"string\">'env'</span>],</span><br><span class=\"line\">\t<span class=\"string\">\"env\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*开发环境下执行*/</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"development\"</span>:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"react-hmre\"</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就会执行”development”下配置的内容</p>\n"},{"title":"webpack热更新(HMR)","date":"2018-01-02T07:40:44.000Z","_content":"### 一、HMR介绍\n在我们开发react应用的时候，在配置了webpack-dev-server的前提下每一次的组件内容修改都需要手动的刷新浏览器，为了解决这个问题，所以有了热更新这个概念，网上的文章弄得我一头雾水，在我配置成功后，自己来记录一下热更新的配置\n\n时隔三个月今天发现了配置更简单的热替换的方法，[点我查看](https://ymbo.github.io/2018/04/12/webpack4-0%E4%B8%AD%E7%9A%84mode%E5%92%8C-babelrc%E7%9A%84env-development%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9B%AE/)\n\n### 二、配置\n#### 1.从零开始--项目初始化\n首先创建一个基本的react的项目，然后命令行运行 `npm init` 生成 package.json 文件。\n\n新建 `build`,`client` 文件夹，分别用来存放 webpack 配置（webpack.config.js文件）和 react 组件。\n当前目录结构：\n![目录结构](/images/webpack热更新-HMR/4.png)\n\n#### 2.基本的webpack配置\n为了自动产出html文件，安装 `html-webpack-plugin` \n\n为了解析 `react` 组件和对`es6`的解析，安装 `babel-loader babel-core babel-preset-es2015  babel-preset-es2015-loose babel-preset-react` 模块，并在根目录新建文件 `.babelrc` 文件 `babel` 的配置文件\n![.babelrc](/images/webpack热更新-HMR/1.png)\n\n此时 `package.json` 文件的包\n![package.json](/images/webpack热更新-HMR/2.png)\n\n添加 `webpack-devserver` 配置，此时 `webpack-config.js` 配置如下\n\n``` javascript \nconst path=require('path');\nconst HtmlWebpackPlugin=require('html-webpack-plugin');\n\nmodule.exports={\n\tentry: {\n\t\tapp:path.join(__dirname,'../client/app.js')\n\t},\n\toutput:{\n\t\tfilename:'[name].[hash].js',\n\t\tpath:path.join(__dirname,'../dist'),\n\t\tpublicPath:'/public/'\n\t},\n\tmodule:{\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(jsx|js)$/,\n\t\t\t\tloader:'babel-loader',\n\t\t\t\texclude:path.join(__dirname,'../node_modules')\n\t\t\t}\n\t\t]\n\t},\n\tplugins:[\n\t\tnew HtmlWebpackPlugin()\n\t],\n\tdevServer:{\n\t\t/*代表本机 也可以通过ip或者localhost这种方式，但是用后面的两种方式的话，局域网内是访问不到本机的，所以用了0.0.0.0*/\n\t\thost:'0.0.0.0',\n\t\tport:'8888',\n\t\tcontentBase:path.join(__dirname,'../dist'),\n\t\t/*显示错误信息*/\n\t\toverlay:{\n\t\t\terrors:true\n\t\t},\n\t\t/*因为上面的publicPath:'/public/'，所以访问的所有路径都要加上public*/\n\t\tpublicPath:'/public/',\n\t\thistoryApiFallback:{\n\t\t\t/*如果页面404则返回下面配置的页面*/\n\t\t\tindex:'/public/index.html'\n\t\t}\n\t}\n}\n```\n此时启动webpack-dev-server后，运行成功\n![package.json](/images/webpack热更新-HMR/3.png)\n\n----------------------------\n\n`友情提示：`：\n1. 如果在执行命令的过程中报错 'cannot find ...' 这类的错误，首先检查是否少装了包，如果没有少装，则删除 node_module文件夹，重新安装下。\n2. 如果运行 webpack-dev-server 启动服务器的时候，网页的 js 文件显示404，首先检查是否本地已经有了一个编译好的 dist 文件夹，因为webpack-dev-server会优先读取本地文件，配置的时候我们添加了 /pubilc/ 所以是读取不道德，这时，删除本地 dist文件夹即可。（这个相当相当的坑）\n3. 在入口文件中，我这样写 `document.body` 是不可取的，正确的做法是 获取Id的形式。\n\n----------------------------\n\n`知识点！( 敲黑板 )`：path.join 和 path.resolve 区别\n>path.join：拼接地址（会正确使用当前系统的路径分隔符，Unix系统是/，Windows系统是\\）\n>比如：path.join（‘m’,’/b’） 或者 path.join（‘m’,’b’）  返回m/b这个路径\n>path.resolve：将参数转换为绝对路径\n>比如 path.resolve(‘m’) ;如果当前命令窗口是在c盘打开的，那么返回C:\\m(总是返回一个绝对路径)\n>对比：两种方法都可以获得当前目录的绝对路径（通过__dirname），因为path.join可以适应unix和windows，所以join可能好一些\n\n### 三、重头戏-配置HMR\n这里说是简单，但我觉得对于初次使用还是比较繁琐，整理一下，分为下面几个步骤(与顺序无关)\n1. 安装 `react-hot-loader`\n2. 配置 `babelrc` 文件\n3. 配置 `入口文件app.js` \n4. 配置 `webpack.config.js`\n\n#### 2.配置 .babelrc 文件\n![.babelrc](/images/webpack热更新-HMR/5.png)\n\n#### 3. 配置 `入口文件app.js` \n\n![入口文件app.js](/images/webpack热更新-HMR/6.png)\n\n#### 4. 配置 `webpack.config.js`\n\n改动部分标记为 ` //add`\n\n``` javascript \nconst path=require('path');\nconst HtmlWebpackPlugin=require('html-webpack-plugin');\nconst webpack=require('webpack');\t\t//add\n\nmodule.exports={\n\tentry: {\n\t\tapp:[\t\t\t\t\t\t\n\t\t\t'react-hot-loader/patch',\t\t\t//add\n\t\t\tpath.join(__dirname,'../client/app.js')\n\t\t]\n\t},\n\toutput:{\n\t\tfilename:'[name].[hash].js',\n\t\tpath:path.join(__dirname,'../dist'),\n\t\tpublicPath:'/public/'\n\t},\n\tmodule:{\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(jsx|js)$/,\n\t\t\t\tloader:'babel-loader',\n\t\t\t\texclude:path.join(__dirname,'../node_modules')\n\t\t\t}\n\t\t]\n\t},\n\tplugins:[\n\t\tnew HtmlWebpackPlugin(),\n\t\tnew webpack.HotModuleReplacementPlugin() \t//add\n\t],\n\tdevServer:{\n\t\t/*代表本机 也可以通过ip或者localhost这种方式，但是用后面的两种方式的话，局域网内是访问不到本机的，所以用了0.0.0.0*/\n\t\thost:'0.0.0.0',\n\t\tport:'8888',\n\t\tcontentBase:path.join(__dirname,'../dist'),\n\t\t/*热加载*/\t//add\n\t\thot:true,\t//add\n\t\t/*显示错误信息*/\n\t\toverlay:{\n\t\t\terrors:true\n\t\t},\n\t\t/*因为上面的publicPath:'/public/'，所以访问的所有路径都要加上public*/\n\t\tpublicPath:'/public/',\n\t\thistoryApiFallback:{\n\t\t\t/*如果页面404则返回下面配置的页面*/\n\t\t\tindex:'/public/index.html'\n\t\t}\n\t}\n}\n```\n[react-hot-loader参考](https://www.npmjs.com/package/react-hot-loader)\n\n好了，该做的做完了，打开浏览器测试，发现更改App.jsx文件后浏览器竟然特么没有变化,这就很气人，我也按照你官网上写的做了，现在出不来？好吧，看下面的解决办法\n\n### 四、解决上面的问题\napp.js这个入口文件中，更改为：\n\n![更改为](/images/webpack热更新-HMR/7.png)\n\n如果有了更改，那么 重新用 require 的方式获取一下这个组件，然后进行渲染\n\n![成功啦！](/images/webpack热更新-HMR/8.gif)\n\n是不是有了疑问，为啥用 `require` 的方式引入呢？因为这种形式的文件引入import的方式引入不了\n\n### 五、总结\n本来一个挺好的功能，分别写在了 webpack官网和 react-hot-loader 官网，这还不算啥，最后还运行不了，多坑，好了就记录到这里了,如果有问题或者补充欢迎回复","source":"_posts/webpack热更新-HMR.md","raw":"---\ntitle: webpack热更新(HMR)\ndate: 2018-01-02 15:40:44\ntags: [webpack,react,HMR]\n---\n### 一、HMR介绍\n在我们开发react应用的时候，在配置了webpack-dev-server的前提下每一次的组件内容修改都需要手动的刷新浏览器，为了解决这个问题，所以有了热更新这个概念，网上的文章弄得我一头雾水，在我配置成功后，自己来记录一下热更新的配置\n\n时隔三个月今天发现了配置更简单的热替换的方法，[点我查看](https://ymbo.github.io/2018/04/12/webpack4-0%E4%B8%AD%E7%9A%84mode%E5%92%8C-babelrc%E7%9A%84env-development%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9B%AE/)\n\n### 二、配置\n#### 1.从零开始--项目初始化\n首先创建一个基本的react的项目，然后命令行运行 `npm init` 生成 package.json 文件。\n\n新建 `build`,`client` 文件夹，分别用来存放 webpack 配置（webpack.config.js文件）和 react 组件。\n当前目录结构：\n![目录结构](/images/webpack热更新-HMR/4.png)\n\n#### 2.基本的webpack配置\n为了自动产出html文件，安装 `html-webpack-plugin` \n\n为了解析 `react` 组件和对`es6`的解析，安装 `babel-loader babel-core babel-preset-es2015  babel-preset-es2015-loose babel-preset-react` 模块，并在根目录新建文件 `.babelrc` 文件 `babel` 的配置文件\n![.babelrc](/images/webpack热更新-HMR/1.png)\n\n此时 `package.json` 文件的包\n![package.json](/images/webpack热更新-HMR/2.png)\n\n添加 `webpack-devserver` 配置，此时 `webpack-config.js` 配置如下\n\n``` javascript \nconst path=require('path');\nconst HtmlWebpackPlugin=require('html-webpack-plugin');\n\nmodule.exports={\n\tentry: {\n\t\tapp:path.join(__dirname,'../client/app.js')\n\t},\n\toutput:{\n\t\tfilename:'[name].[hash].js',\n\t\tpath:path.join(__dirname,'../dist'),\n\t\tpublicPath:'/public/'\n\t},\n\tmodule:{\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(jsx|js)$/,\n\t\t\t\tloader:'babel-loader',\n\t\t\t\texclude:path.join(__dirname,'../node_modules')\n\t\t\t}\n\t\t]\n\t},\n\tplugins:[\n\t\tnew HtmlWebpackPlugin()\n\t],\n\tdevServer:{\n\t\t/*代表本机 也可以通过ip或者localhost这种方式，但是用后面的两种方式的话，局域网内是访问不到本机的，所以用了0.0.0.0*/\n\t\thost:'0.0.0.0',\n\t\tport:'8888',\n\t\tcontentBase:path.join(__dirname,'../dist'),\n\t\t/*显示错误信息*/\n\t\toverlay:{\n\t\t\terrors:true\n\t\t},\n\t\t/*因为上面的publicPath:'/public/'，所以访问的所有路径都要加上public*/\n\t\tpublicPath:'/public/',\n\t\thistoryApiFallback:{\n\t\t\t/*如果页面404则返回下面配置的页面*/\n\t\t\tindex:'/public/index.html'\n\t\t}\n\t}\n}\n```\n此时启动webpack-dev-server后，运行成功\n![package.json](/images/webpack热更新-HMR/3.png)\n\n----------------------------\n\n`友情提示：`：\n1. 如果在执行命令的过程中报错 'cannot find ...' 这类的错误，首先检查是否少装了包，如果没有少装，则删除 node_module文件夹，重新安装下。\n2. 如果运行 webpack-dev-server 启动服务器的时候，网页的 js 文件显示404，首先检查是否本地已经有了一个编译好的 dist 文件夹，因为webpack-dev-server会优先读取本地文件，配置的时候我们添加了 /pubilc/ 所以是读取不道德，这时，删除本地 dist文件夹即可。（这个相当相当的坑）\n3. 在入口文件中，我这样写 `document.body` 是不可取的，正确的做法是 获取Id的形式。\n\n----------------------------\n\n`知识点！( 敲黑板 )`：path.join 和 path.resolve 区别\n>path.join：拼接地址（会正确使用当前系统的路径分隔符，Unix系统是/，Windows系统是\\）\n>比如：path.join（‘m’,’/b’） 或者 path.join（‘m’,’b’）  返回m/b这个路径\n>path.resolve：将参数转换为绝对路径\n>比如 path.resolve(‘m’) ;如果当前命令窗口是在c盘打开的，那么返回C:\\m(总是返回一个绝对路径)\n>对比：两种方法都可以获得当前目录的绝对路径（通过__dirname），因为path.join可以适应unix和windows，所以join可能好一些\n\n### 三、重头戏-配置HMR\n这里说是简单，但我觉得对于初次使用还是比较繁琐，整理一下，分为下面几个步骤(与顺序无关)\n1. 安装 `react-hot-loader`\n2. 配置 `babelrc` 文件\n3. 配置 `入口文件app.js` \n4. 配置 `webpack.config.js`\n\n#### 2.配置 .babelrc 文件\n![.babelrc](/images/webpack热更新-HMR/5.png)\n\n#### 3. 配置 `入口文件app.js` \n\n![入口文件app.js](/images/webpack热更新-HMR/6.png)\n\n#### 4. 配置 `webpack.config.js`\n\n改动部分标记为 ` //add`\n\n``` javascript \nconst path=require('path');\nconst HtmlWebpackPlugin=require('html-webpack-plugin');\nconst webpack=require('webpack');\t\t//add\n\nmodule.exports={\n\tentry: {\n\t\tapp:[\t\t\t\t\t\t\n\t\t\t'react-hot-loader/patch',\t\t\t//add\n\t\t\tpath.join(__dirname,'../client/app.js')\n\t\t]\n\t},\n\toutput:{\n\t\tfilename:'[name].[hash].js',\n\t\tpath:path.join(__dirname,'../dist'),\n\t\tpublicPath:'/public/'\n\t},\n\tmodule:{\n\t\trules:[\n\t\t\t{\n\t\t\t\ttest:/\\.(jsx|js)$/,\n\t\t\t\tloader:'babel-loader',\n\t\t\t\texclude:path.join(__dirname,'../node_modules')\n\t\t\t}\n\t\t]\n\t},\n\tplugins:[\n\t\tnew HtmlWebpackPlugin(),\n\t\tnew webpack.HotModuleReplacementPlugin() \t//add\n\t],\n\tdevServer:{\n\t\t/*代表本机 也可以通过ip或者localhost这种方式，但是用后面的两种方式的话，局域网内是访问不到本机的，所以用了0.0.0.0*/\n\t\thost:'0.0.0.0',\n\t\tport:'8888',\n\t\tcontentBase:path.join(__dirname,'../dist'),\n\t\t/*热加载*/\t//add\n\t\thot:true,\t//add\n\t\t/*显示错误信息*/\n\t\toverlay:{\n\t\t\terrors:true\n\t\t},\n\t\t/*因为上面的publicPath:'/public/'，所以访问的所有路径都要加上public*/\n\t\tpublicPath:'/public/',\n\t\thistoryApiFallback:{\n\t\t\t/*如果页面404则返回下面配置的页面*/\n\t\t\tindex:'/public/index.html'\n\t\t}\n\t}\n}\n```\n[react-hot-loader参考](https://www.npmjs.com/package/react-hot-loader)\n\n好了，该做的做完了，打开浏览器测试，发现更改App.jsx文件后浏览器竟然特么没有变化,这就很气人，我也按照你官网上写的做了，现在出不来？好吧，看下面的解决办法\n\n### 四、解决上面的问题\napp.js这个入口文件中，更改为：\n\n![更改为](/images/webpack热更新-HMR/7.png)\n\n如果有了更改，那么 重新用 require 的方式获取一下这个组件，然后进行渲染\n\n![成功啦！](/images/webpack热更新-HMR/8.gif)\n\n是不是有了疑问，为啥用 `require` 的方式引入呢？因为这种形式的文件引入import的方式引入不了\n\n### 五、总结\n本来一个挺好的功能，分别写在了 webpack官网和 react-hot-loader 官网，这还不算啥，最后还运行不了，多坑，好了就记录到这里了,如果有问题或者补充欢迎回复","slug":"webpack热更新-HMR","published":1,"updated":"2018-09-28T02:53:25.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8khh0013vps6e5plcqtc","content":"<h3 id=\"一、HMR介绍\"><a href=\"#一、HMR介绍\" class=\"headerlink\" title=\"一、HMR介绍\"></a>一、HMR介绍</h3><p>在我们开发react应用的时候，在配置了webpack-dev-server的前提下每一次的组件内容修改都需要手动的刷新浏览器，为了解决这个问题，所以有了热更新这个概念，网上的文章弄得我一头雾水，在我配置成功后，自己来记录一下热更新的配置</p>\n<p>时隔三个月今天发现了配置更简单的热替换的方法，<a href=\"https://ymbo.github.io/2018/04/12/webpack4-0%E4%B8%AD%E7%9A%84mode%E5%92%8C-babelrc%E7%9A%84env-development%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9B%AE/\" target=\"_blank\" rel=\"noopener\">点我查看</a></p>\n<h3 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h3><h4 id=\"1-从零开始–项目初始化\"><a href=\"#1-从零开始–项目初始化\" class=\"headerlink\" title=\"1.从零开始–项目初始化\"></a>1.从零开始–项目初始化</h4><p>首先创建一个基本的react的项目，然后命令行运行 <code>npm init</code> 生成 package.json 文件。</p>\n<p>新建 <code>build</code>,<code>client</code> 文件夹，分别用来存放 webpack 配置（webpack.config.js文件）和 react 组件。<br>当前目录结构：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/4.png\" alt=\"目录结构\" title=\"\">\n                </div>\n                <div class=\"image-caption\">目录结构</div>\n            </figure></p>\n<h4 id=\"2-基本的webpack配置\"><a href=\"#2-基本的webpack配置\" class=\"headerlink\" title=\"2.基本的webpack配置\"></a>2.基本的webpack配置</h4><p>为了自动产出html文件，安装 <code>html-webpack-plugin</code> </p>\n<p>为了解析 <code>react</code> 组件和对<code>es6</code>的解析，安装 <code>babel-loader babel-core babel-preset-es2015  babel-preset-es2015-loose babel-preset-react</code> 模块，并在根目录新建文件 <code>.babelrc</code> 文件 <code>babel</code> 的配置文件<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/1.png\" alt=\".babelrc\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.babelrc</div>\n            </figure></p>\n<p>此时 <code>package.json</code> 文件的包<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/2.png\" alt=\"package.json\" title=\"\">\n                </div>\n                <div class=\"image-caption\">package.json</div>\n            </figure></p>\n<p>添加 <code>webpack-devserver</code> 配置，此时 <code>webpack-config.js</code> 配置如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin=<span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp:path.join(__dirname,<span class=\"string\">'../client/app.js'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\toutput:&#123;</span><br><span class=\"line\">\t\tfilename:<span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">\t\tpath:path.join(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">'/public/'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(jsx|js)$/</span>,</span><br><span class=\"line\">\t\t\t\tloader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">\t\t\t\texclude:path.join(__dirname,<span class=\"string\">'../node_modules'</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin()</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\tdevServer:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*代表本机 也可以通过ip或者localhost这种方式，但是用后面的两种方式的话，局域网内是访问不到本机的，所以用了0.0.0.0*/</span></span><br><span class=\"line\">\t\thost:<span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">\t\tport:<span class=\"string\">'8888'</span>,</span><br><span class=\"line\">\t\tcontentBase:path.join(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">\t\t<span class=\"comment\">/*显示错误信息*/</span></span><br><span class=\"line\">\t\toverlay:&#123;</span><br><span class=\"line\">\t\t\terrors:<span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*因为上面的publicPath:'/public/'，所以访问的所有路径都要加上public*/</span></span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">'/public/'</span>,</span><br><span class=\"line\">\t\thistoryApiFallback:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*如果页面404则返回下面配置的页面*/</span></span><br><span class=\"line\">\t\t\tindex:<span class=\"string\">'/public/index.html'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时启动webpack-dev-server后，运行成功<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/3.png\" alt=\"package.json\" title=\"\">\n                </div>\n                <div class=\"image-caption\">package.json</div>\n            </figure></p>\n<hr>\n<p><code>友情提示：</code>：</p>\n<ol>\n<li>如果在执行命令的过程中报错 ‘cannot find …’ 这类的错误，首先检查是否少装了包，如果没有少装，则删除 node_module文件夹，重新安装下。</li>\n<li>如果运行 webpack-dev-server 启动服务器的时候，网页的 js 文件显示404，首先检查是否本地已经有了一个编译好的 dist 文件夹，因为webpack-dev-server会优先读取本地文件，配置的时候我们添加了 /pubilc/ 所以是读取不道德，这时，删除本地 dist文件夹即可。（这个相当相当的坑）</li>\n<li>在入口文件中，我这样写 <code>document.body</code> 是不可取的，正确的做法是 获取Id的形式。</li>\n</ol>\n<hr>\n<p><code>知识点！( 敲黑板 )</code>：path.join 和 path.resolve 区别</p>\n<blockquote>\n<p>path.join：拼接地址（会正确使用当前系统的路径分隔符，Unix系统是/，Windows系统是\\）<br>比如：path.join（‘m’,’/b’） 或者 path.join（‘m’,’b’）  返回m/b这个路径<br>path.resolve：将参数转换为绝对路径<br>比如 path.resolve(‘m’) ;如果当前命令窗口是在c盘打开的，那么返回C:\\m(总是返回一个绝对路径)<br>对比：两种方法都可以获得当前目录的绝对路径（通过__dirname），因为path.join可以适应unix和windows，所以join可能好一些</p>\n</blockquote>\n<h3 id=\"三、重头戏-配置HMR\"><a href=\"#三、重头戏-配置HMR\" class=\"headerlink\" title=\"三、重头戏-配置HMR\"></a>三、重头戏-配置HMR</h3><p>这里说是简单，但我觉得对于初次使用还是比较繁琐，整理一下，分为下面几个步骤(与顺序无关)</p>\n<ol>\n<li>安装 <code>react-hot-loader</code></li>\n<li>配置 <code>babelrc</code> 文件</li>\n<li>配置 <code>入口文件app.js</code> </li>\n<li>配置 <code>webpack.config.js</code></li>\n</ol>\n<h4 id=\"2-配置-babelrc-文件\"><a href=\"#2-配置-babelrc-文件\" class=\"headerlink\" title=\"2.配置 .babelrc 文件\"></a>2.配置 .babelrc 文件</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/5.png\" alt=\".babelrc\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.babelrc</div>\n            </figure>\n<h4 id=\"3-配置-入口文件app-js\"><a href=\"#3-配置-入口文件app-js\" class=\"headerlink\" title=\"3. 配置 入口文件app.js\"></a>3. 配置 <code>入口文件app.js</code></h4><p><img src=\"/images/webpack热更新-HMR/6.png\" alt=\"入口文件app.js\"></p>\n<h4 id=\"4-配置-webpack-config-js\"><a href=\"#4-配置-webpack-config-js\" class=\"headerlink\" title=\"4. 配置 webpack.config.js\"></a>4. 配置 <code>webpack.config.js</code></h4><p>改动部分标记为 <code>//add</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin=<span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack=<span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);\t\t<span class=\"comment\">//add</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp:[\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"string\">'react-hot-loader/patch'</span>,\t\t\t<span class=\"comment\">//add</span></span><br><span class=\"line\">\t\t\tpath.join(__dirname,<span class=\"string\">'../client/app.js'</span>)</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\toutput:&#123;</span><br><span class=\"line\">\t\tfilename:<span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">\t\tpath:path.join(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">'/public/'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(jsx|js)$/</span>,</span><br><span class=\"line\">\t\t\t\tloader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">\t\t\t\texclude:path.join(__dirname,<span class=\"string\">'../node_modules'</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(),</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin() \t<span class=\"comment\">//add</span></span><br><span class=\"line\">\t],</span><br><span class=\"line\">\tdevServer:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*代表本机 也可以通过ip或者localhost这种方式，但是用后面的两种方式的话，局域网内是访问不到本机的，所以用了0.0.0.0*/</span></span><br><span class=\"line\">\t\thost:<span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">\t\tport:<span class=\"string\">'8888'</span>,</span><br><span class=\"line\">\t\tcontentBase:path.join(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">\t\t<span class=\"comment\">/*热加载*/</span>\t<span class=\"comment\">//add</span></span><br><span class=\"line\">\t\thot:<span class=\"literal\">true</span>,\t<span class=\"comment\">//add</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*显示错误信息*/</span></span><br><span class=\"line\">\t\toverlay:&#123;</span><br><span class=\"line\">\t\t\terrors:<span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*因为上面的publicPath:'/public/'，所以访问的所有路径都要加上public*/</span></span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">'/public/'</span>,</span><br><span class=\"line\">\t\thistoryApiFallback:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*如果页面404则返回下面配置的页面*/</span></span><br><span class=\"line\">\t\t\tindex:<span class=\"string\">'/public/index.html'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.npmjs.com/package/react-hot-loader\" target=\"_blank\" rel=\"noopener\">react-hot-loader参考</a></p>\n<p>好了，该做的做完了，打开浏览器测试，发现更改App.jsx文件后浏览器竟然特么没有变化,这就很气人，我也按照你官网上写的做了，现在出不来？好吧，看下面的解决办法</p>\n<h3 id=\"四、解决上面的问题\"><a href=\"#四、解决上面的问题\" class=\"headerlink\" title=\"四、解决上面的问题\"></a>四、解决上面的问题</h3><p>app.js这个入口文件中，更改为：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/7.png\" alt=\"更改为\" title=\"\">\n                </div>\n                <div class=\"image-caption\">更改为</div>\n            </figure>\n<p>如果有了更改，那么 重新用 require 的方式获取一下这个组件，然后进行渲染</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/8.gif\" alt=\"成功啦！\" title=\"\">\n                </div>\n                <div class=\"image-caption\">成功啦！</div>\n            </figure>\n<p>是不是有了疑问，为啥用 <code>require</code> 的方式引入呢？因为这种形式的文件引入import的方式引入不了</p>\n<h3 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h3><p>本来一个挺好的功能，分别写在了 webpack官网和 react-hot-loader 官网，这还不算啥，最后还运行不了，多坑，好了就记录到这里了,如果有问题或者补充欢迎回复</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、HMR介绍\"><a href=\"#一、HMR介绍\" class=\"headerlink\" title=\"一、HMR介绍\"></a>一、HMR介绍</h3><p>在我们开发react应用的时候，在配置了webpack-dev-server的前提下每一次的组件内容修改都需要手动的刷新浏览器，为了解决这个问题，所以有了热更新这个概念，网上的文章弄得我一头雾水，在我配置成功后，自己来记录一下热更新的配置</p>\n<p>时隔三个月今天发现了配置更简单的热替换的方法，<a href=\"https://ymbo.github.io/2018/04/12/webpack4-0%E4%B8%AD%E7%9A%84mode%E5%92%8C-babelrc%E7%9A%84env-development%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9B%AE/\" target=\"_blank\" rel=\"noopener\">点我查看</a></p>\n<h3 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h3><h4 id=\"1-从零开始–项目初始化\"><a href=\"#1-从零开始–项目初始化\" class=\"headerlink\" title=\"1.从零开始–项目初始化\"></a>1.从零开始–项目初始化</h4><p>首先创建一个基本的react的项目，然后命令行运行 <code>npm init</code> 生成 package.json 文件。</p>\n<p>新建 <code>build</code>,<code>client</code> 文件夹，分别用来存放 webpack 配置（webpack.config.js文件）和 react 组件。<br>当前目录结构：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/4.png\" alt=\"目录结构\" title=\"\">\n                </div>\n                <div class=\"image-caption\">目录结构</div>\n            </figure></p>\n<h4 id=\"2-基本的webpack配置\"><a href=\"#2-基本的webpack配置\" class=\"headerlink\" title=\"2.基本的webpack配置\"></a>2.基本的webpack配置</h4><p>为了自动产出html文件，安装 <code>html-webpack-plugin</code> </p>\n<p>为了解析 <code>react</code> 组件和对<code>es6</code>的解析，安装 <code>babel-loader babel-core babel-preset-es2015  babel-preset-es2015-loose babel-preset-react</code> 模块，并在根目录新建文件 <code>.babelrc</code> 文件 <code>babel</code> 的配置文件<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/1.png\" alt=\".babelrc\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.babelrc</div>\n            </figure></p>\n<p>此时 <code>package.json</code> 文件的包<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/2.png\" alt=\"package.json\" title=\"\">\n                </div>\n                <div class=\"image-caption\">package.json</div>\n            </figure></p>\n<p>添加 <code>webpack-devserver</code> 配置，此时 <code>webpack-config.js</code> 配置如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin=<span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp:path.join(__dirname,<span class=\"string\">'../client/app.js'</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\toutput:&#123;</span><br><span class=\"line\">\t\tfilename:<span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">\t\tpath:path.join(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">'/public/'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(jsx|js)$/</span>,</span><br><span class=\"line\">\t\t\t\tloader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">\t\t\t\texclude:path.join(__dirname,<span class=\"string\">'../node_modules'</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin()</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\tdevServer:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*代表本机 也可以通过ip或者localhost这种方式，但是用后面的两种方式的话，局域网内是访问不到本机的，所以用了0.0.0.0*/</span></span><br><span class=\"line\">\t\thost:<span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">\t\tport:<span class=\"string\">'8888'</span>,</span><br><span class=\"line\">\t\tcontentBase:path.join(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">\t\t<span class=\"comment\">/*显示错误信息*/</span></span><br><span class=\"line\">\t\toverlay:&#123;</span><br><span class=\"line\">\t\t\terrors:<span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*因为上面的publicPath:'/public/'，所以访问的所有路径都要加上public*/</span></span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">'/public/'</span>,</span><br><span class=\"line\">\t\thistoryApiFallback:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*如果页面404则返回下面配置的页面*/</span></span><br><span class=\"line\">\t\t\tindex:<span class=\"string\">'/public/index.html'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时启动webpack-dev-server后，运行成功<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/3.png\" alt=\"package.json\" title=\"\">\n                </div>\n                <div class=\"image-caption\">package.json</div>\n            </figure></p>\n<hr>\n<p><code>友情提示：</code>：</p>\n<ol>\n<li>如果在执行命令的过程中报错 ‘cannot find …’ 这类的错误，首先检查是否少装了包，如果没有少装，则删除 node_module文件夹，重新安装下。</li>\n<li>如果运行 webpack-dev-server 启动服务器的时候，网页的 js 文件显示404，首先检查是否本地已经有了一个编译好的 dist 文件夹，因为webpack-dev-server会优先读取本地文件，配置的时候我们添加了 /pubilc/ 所以是读取不道德，这时，删除本地 dist文件夹即可。（这个相当相当的坑）</li>\n<li>在入口文件中，我这样写 <code>document.body</code> 是不可取的，正确的做法是 获取Id的形式。</li>\n</ol>\n<hr>\n<p><code>知识点！( 敲黑板 )</code>：path.join 和 path.resolve 区别</p>\n<blockquote>\n<p>path.join：拼接地址（会正确使用当前系统的路径分隔符，Unix系统是/，Windows系统是\\）<br>比如：path.join（‘m’,’/b’） 或者 path.join（‘m’,’b’）  返回m/b这个路径<br>path.resolve：将参数转换为绝对路径<br>比如 path.resolve(‘m’) ;如果当前命令窗口是在c盘打开的，那么返回C:\\m(总是返回一个绝对路径)<br>对比：两种方法都可以获得当前目录的绝对路径（通过__dirname），因为path.join可以适应unix和windows，所以join可能好一些</p>\n</blockquote>\n<h3 id=\"三、重头戏-配置HMR\"><a href=\"#三、重头戏-配置HMR\" class=\"headerlink\" title=\"三、重头戏-配置HMR\"></a>三、重头戏-配置HMR</h3><p>这里说是简单，但我觉得对于初次使用还是比较繁琐，整理一下，分为下面几个步骤(与顺序无关)</p>\n<ol>\n<li>安装 <code>react-hot-loader</code></li>\n<li>配置 <code>babelrc</code> 文件</li>\n<li>配置 <code>入口文件app.js</code> </li>\n<li>配置 <code>webpack.config.js</code></li>\n</ol>\n<h4 id=\"2-配置-babelrc-文件\"><a href=\"#2-配置-babelrc-文件\" class=\"headerlink\" title=\"2.配置 .babelrc 文件\"></a>2.配置 .babelrc 文件</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/5.png\" alt=\".babelrc\" title=\"\">\n                </div>\n                <div class=\"image-caption\">.babelrc</div>\n            </figure>\n<h4 id=\"3-配置-入口文件app-js\"><a href=\"#3-配置-入口文件app-js\" class=\"headerlink\" title=\"3. 配置 入口文件app.js\"></a>3. 配置 <code>入口文件app.js</code></h4><p><img src=\"/images/webpack热更新-HMR/6.png\" alt=\"入口文件app.js\"></p>\n<h4 id=\"4-配置-webpack-config-js\"><a href=\"#4-配置-webpack-config-js\" class=\"headerlink\" title=\"4. 配置 webpack.config.js\"></a>4. 配置 <code>webpack.config.js</code></h4><p>改动部分标记为 <code>//add</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin=<span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack=<span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);\t\t<span class=\"comment\">//add</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp:[\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"string\">'react-hot-loader/patch'</span>,\t\t\t<span class=\"comment\">//add</span></span><br><span class=\"line\">\t\t\tpath.join(__dirname,<span class=\"string\">'../client/app.js'</span>)</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\toutput:&#123;</span><br><span class=\"line\">\t\tfilename:<span class=\"string\">'[name].[hash].js'</span>,</span><br><span class=\"line\">\t\tpath:path.join(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">'/public/'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">\t\trules:[</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest:<span class=\"regexp\">/\\.(jsx|js)$/</span>,</span><br><span class=\"line\">\t\t\t\tloader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">\t\t\t\texclude:path.join(__dirname,<span class=\"string\">'../node_modules'</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins:[</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(),</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin() \t<span class=\"comment\">//add</span></span><br><span class=\"line\">\t],</span><br><span class=\"line\">\tdevServer:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*代表本机 也可以通过ip或者localhost这种方式，但是用后面的两种方式的话，局域网内是访问不到本机的，所以用了0.0.0.0*/</span></span><br><span class=\"line\">\t\thost:<span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">\t\tport:<span class=\"string\">'8888'</span>,</span><br><span class=\"line\">\t\tcontentBase:path.join(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">\t\t<span class=\"comment\">/*热加载*/</span>\t<span class=\"comment\">//add</span></span><br><span class=\"line\">\t\thot:<span class=\"literal\">true</span>,\t<span class=\"comment\">//add</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*显示错误信息*/</span></span><br><span class=\"line\">\t\toverlay:&#123;</span><br><span class=\"line\">\t\t\terrors:<span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">/*因为上面的publicPath:'/public/'，所以访问的所有路径都要加上public*/</span></span><br><span class=\"line\">\t\tpublicPath:<span class=\"string\">'/public/'</span>,</span><br><span class=\"line\">\t\thistoryApiFallback:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*如果页面404则返回下面配置的页面*/</span></span><br><span class=\"line\">\t\t\tindex:<span class=\"string\">'/public/index.html'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.npmjs.com/package/react-hot-loader\" target=\"_blank\" rel=\"noopener\">react-hot-loader参考</a></p>\n<p>好了，该做的做完了，打开浏览器测试，发现更改App.jsx文件后浏览器竟然特么没有变化,这就很气人，我也按照你官网上写的做了，现在出不来？好吧，看下面的解决办法</p>\n<h3 id=\"四、解决上面的问题\"><a href=\"#四、解决上面的问题\" class=\"headerlink\" title=\"四、解决上面的问题\"></a>四、解决上面的问题</h3><p>app.js这个入口文件中，更改为：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/7.png\" alt=\"更改为\" title=\"\">\n                </div>\n                <div class=\"image-caption\">更改为</div>\n            </figure>\n<p>如果有了更改，那么 重新用 require 的方式获取一下这个组件，然后进行渲染</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack热更新-HMR/8.gif\" alt=\"成功啦！\" title=\"\">\n                </div>\n                <div class=\"image-caption\">成功啦！</div>\n            </figure>\n<p>是不是有了疑问，为啥用 <code>require</code> 的方式引入呢？因为这种形式的文件引入import的方式引入不了</p>\n<h3 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h3><p>本来一个挺好的功能，分别写在了 webpack官网和 react-hot-loader 官网，这还不算啥，最后还运行不了，多坑，好了就记录到这里了,如果有问题或者补充欢迎回复</p>\n"},{"title":"webpack配置代码分割","date":"2018-05-21T10:05:27.000Z","_content":"\n## 一、前言\nwebpack 4.0 使用 `optimization.splitChunks.cacheGroups` 配置项来进行包的拆分，其实默认情况下，webpack是会自动帮我们分割的，但是有时候我们可能也需要自定义配置，下面来说下我对这个配置项的理解，如有错误，烦请指出\n\n## 二、配置项说明\n1. ** cacheGroups**                           \n    * 用这个配置项来自定义生成的文件\n2. ** test **                                              \n    * 限制范围，可以是正则，匹配文件夹或文件\n3. ** name**                                            \n    * 生成的文件名\n4. ** priority**                                         \n    * 优先级，当有chunks满足多个分组条件的时候，优先选择优先级高的\n5. ** minSize**                                        \n    * 分出来的包最小尺寸必须大于此值，默认30000B\n6. ** minChunks**                                   \n    * 表示分离前被引用次数,默认为1\n7. ** maxInitialRequests**                       \n    * 最大初始化加载次数，一个入口文件可以并行加载的最大文件数量，默认1\n8. ** maxAsyncRequests**                      \n    * 最大按需加载次数，最大异步加载次数，默认1\n9. ** enforce: true**                                \n    * 优先处理，这一项好像和priority有些重叠了\n10. ** reuseExistingChunk:true**            \n    * 表示可以使用已经存在的块，即如果满足条件的块已经存在就是用己有的的，不再创建一个新的块\n11. ** chunks 值为\"initial\", \"async\"（默认） 或 \"all\"** \n    * initial 入口chunk，对于异步导入的文件不处理\n    * async 异步chunk，只对异步导入的文件处理\n    * all 全部chunk\n    \n12.\n``` javascript\nruntimeChunk: {\n    name: 'manifest'\n        /* 管理被分出来的包，runtime 指的是 webpack 的运行环境(具体作用就是模块解析, 加载) 和 模块信息清单，\n                    模块信息清单在每次有模块变更(hash 变更)时都会变更 */\n},\ncacheGroups:{//设置缓存chunks\n    priority: 0,//缓存组优先级\n    //当需要优先匹配缓存组的规则时，priority需要设置为正数，当需要优先匹配默认设置时，缓存组需设置为负数，0为两者分割线\n    default:{//设置缓存组默认配置，可通过default:false禁用默认缓存组，\n    //然后就可以自定义缓存组，将初始化加载时被重复引用的模块进行拆分\n        minChunks:2,//引用两次\n        priority:-20,//缓存组优先级为-20\n        reuseExistingChunk:true,//表示可以使用已经存在的块，即如果满足条件的块已经存在就是用己有的的，不再创建一个新的块\n    }，\n    [key]:{//自定义缓存组，可以根据需求，自由创建\n        chunks:'initial',\n        test: /vue/,//正则规则验证，如符合就提取chunk放入当前缓存组，值可以是function、boolean、string、RegExp，默认为空\n        enforce: true//优先处理\n    }\n}\n```\n\n## 三、疑难配置项\n** maxInitialRequests** :\n这个配置项我一直很不理解，网上的很多资源都是千篇一律，有用的基本没有，后来我发现了这篇文章  [关于webpack模块拆分规则](https://www.cnblogs.com/wmhuang/p/8967639.html)  让我有对这个配置项有了点浅显的了解\n\n现在说说我的理解，举个小例子：\n这是一个多页应用，index.js和shop.js是入口文件\n我的目录结构：\n![目录结构](/images/webpack配置代码分割/1.jpeg)；\n\n这是webpack分割代码\n``` javascript\nruntimeChunk: {\n    name: 'manifest'\n},\nsplitChunks: {\n    cacheGroups: {\n        //项目公共组件\n        common: {\n            chunks: 'initial', \n            name: 'common',\n            minChunks: 2, \n            maxInitialRequests: 3, //最大初始化加载次数，一个入口文件可以并行加载的最大文件数量，默认1\n            minSize: 0 //表示在分离前的最小模块大小，默认为0，最小为30000\n        },\n        //第三方组件\n        vendor: {\n            test: /node_modules/,\n            chunks: \"initial\",\n            name: \"vendor\",\n            priority: 10,\n            enforce: true\n        }\n    }\n}\n```\n现在先别急着看分包结果，先来分析一下：\n其中除了React、ReactDOM是第三方包以外剩下的都是自定义组件\n\n**index.js(入口文件)**：React、ReactDom、index.jsx(index目录下)\n**shop.js(入口文件)**：React、ReactDom、index.jsx(shop目录下)\n**index.jsx(shop目录下)**：React、Header.jsx、A.jsx、B.jsx、shop.css\n**index.jsx(index目录下)**：React、A.jsx、index.css\n**A.jsx**：React、Common.css\n**B.jsx**：React、b.css、common.css\n那么画出的依赖图就是这个样子：\n![目录结构](/images/webpack配置代码分割/2.png)\n\n这里来自 `node_modules` 的包肯定是被打包到 `vender` 里了，不用管这个，主要是看 `common` 这个包的信息\n\n暂且忽略掉**maxInitialRequests**这个配置（当然代码里是不能忽略的因为有默认值，想象这一项不起作用就行了），如果按照使用次数超过2次，大小超过0的包，打包到一起，那么结果是这样的：\n> Common（chunks）：A.jsx、Common.css\n> vender（chunks）：第三方\n> shop.js（chunks）：Header.jsx、B.jsx、b.css、shop.css\n> index.js（chunks）：index.css\n\n那么此时的maxInitialRequests（初始加载次数）是：\n`shop页入口`：shop.js、vender、Common     **一共三次**\n\n`index页入口`：index.js、vender(chunks)、Common   **一共三次**\n\n-----------------------\n\n如果此时我限制了 **maxInitialRequests：2** 为2的话，那么结果是这样的\n> vender（chunks）：第三方\n> shop.js（chunks）：Header.jsx、B.jsx、b.css、shop.css、A.jsx、Common.css\n> index.js（chunks）：index.css、A.jsx、Common.css\n\n`shop页入口`：shop.js、vender **一共两次**\n\n`index页入口`：index.js、vender**一共两次**\n看截图：\n![maxInitialRequests：2的情况](/images/webpack配置代码分割/3.jpeg)\n\n![maxInitialRequests：3或大于三的情况](/images/webpack配置代码分割/4.jpeg)\n\n\n可以看到以上的分析是正确的\n\n## 四、总结\n不过话说会来，如果每次配置wepback的这一项都按这么分析，那得累死，可以这么分析，每次页面初始加载我想让它的并发请求不超过自己的预期就可以了","source":"_posts/webpack配置代码分割.md","raw":"---\ntitle: webpack配置代码分割\ndate: 2018-05-21 18:05:27\ntags: webpack\n---\n\n## 一、前言\nwebpack 4.0 使用 `optimization.splitChunks.cacheGroups` 配置项来进行包的拆分，其实默认情况下，webpack是会自动帮我们分割的，但是有时候我们可能也需要自定义配置，下面来说下我对这个配置项的理解，如有错误，烦请指出\n\n## 二、配置项说明\n1. ** cacheGroups**                           \n    * 用这个配置项来自定义生成的文件\n2. ** test **                                              \n    * 限制范围，可以是正则，匹配文件夹或文件\n3. ** name**                                            \n    * 生成的文件名\n4. ** priority**                                         \n    * 优先级，当有chunks满足多个分组条件的时候，优先选择优先级高的\n5. ** minSize**                                        \n    * 分出来的包最小尺寸必须大于此值，默认30000B\n6. ** minChunks**                                   \n    * 表示分离前被引用次数,默认为1\n7. ** maxInitialRequests**                       \n    * 最大初始化加载次数，一个入口文件可以并行加载的最大文件数量，默认1\n8. ** maxAsyncRequests**                      \n    * 最大按需加载次数，最大异步加载次数，默认1\n9. ** enforce: true**                                \n    * 优先处理，这一项好像和priority有些重叠了\n10. ** reuseExistingChunk:true**            \n    * 表示可以使用已经存在的块，即如果满足条件的块已经存在就是用己有的的，不再创建一个新的块\n11. ** chunks 值为\"initial\", \"async\"（默认） 或 \"all\"** \n    * initial 入口chunk，对于异步导入的文件不处理\n    * async 异步chunk，只对异步导入的文件处理\n    * all 全部chunk\n    \n12.\n``` javascript\nruntimeChunk: {\n    name: 'manifest'\n        /* 管理被分出来的包，runtime 指的是 webpack 的运行环境(具体作用就是模块解析, 加载) 和 模块信息清单，\n                    模块信息清单在每次有模块变更(hash 变更)时都会变更 */\n},\ncacheGroups:{//设置缓存chunks\n    priority: 0,//缓存组优先级\n    //当需要优先匹配缓存组的规则时，priority需要设置为正数，当需要优先匹配默认设置时，缓存组需设置为负数，0为两者分割线\n    default:{//设置缓存组默认配置，可通过default:false禁用默认缓存组，\n    //然后就可以自定义缓存组，将初始化加载时被重复引用的模块进行拆分\n        minChunks:2,//引用两次\n        priority:-20,//缓存组优先级为-20\n        reuseExistingChunk:true,//表示可以使用已经存在的块，即如果满足条件的块已经存在就是用己有的的，不再创建一个新的块\n    }，\n    [key]:{//自定义缓存组，可以根据需求，自由创建\n        chunks:'initial',\n        test: /vue/,//正则规则验证，如符合就提取chunk放入当前缓存组，值可以是function、boolean、string、RegExp，默认为空\n        enforce: true//优先处理\n    }\n}\n```\n\n## 三、疑难配置项\n** maxInitialRequests** :\n这个配置项我一直很不理解，网上的很多资源都是千篇一律，有用的基本没有，后来我发现了这篇文章  [关于webpack模块拆分规则](https://www.cnblogs.com/wmhuang/p/8967639.html)  让我有对这个配置项有了点浅显的了解\n\n现在说说我的理解，举个小例子：\n这是一个多页应用，index.js和shop.js是入口文件\n我的目录结构：\n![目录结构](/images/webpack配置代码分割/1.jpeg)；\n\n这是webpack分割代码\n``` javascript\nruntimeChunk: {\n    name: 'manifest'\n},\nsplitChunks: {\n    cacheGroups: {\n        //项目公共组件\n        common: {\n            chunks: 'initial', \n            name: 'common',\n            minChunks: 2, \n            maxInitialRequests: 3, //最大初始化加载次数，一个入口文件可以并行加载的最大文件数量，默认1\n            minSize: 0 //表示在分离前的最小模块大小，默认为0，最小为30000\n        },\n        //第三方组件\n        vendor: {\n            test: /node_modules/,\n            chunks: \"initial\",\n            name: \"vendor\",\n            priority: 10,\n            enforce: true\n        }\n    }\n}\n```\n现在先别急着看分包结果，先来分析一下：\n其中除了React、ReactDOM是第三方包以外剩下的都是自定义组件\n\n**index.js(入口文件)**：React、ReactDom、index.jsx(index目录下)\n**shop.js(入口文件)**：React、ReactDom、index.jsx(shop目录下)\n**index.jsx(shop目录下)**：React、Header.jsx、A.jsx、B.jsx、shop.css\n**index.jsx(index目录下)**：React、A.jsx、index.css\n**A.jsx**：React、Common.css\n**B.jsx**：React、b.css、common.css\n那么画出的依赖图就是这个样子：\n![目录结构](/images/webpack配置代码分割/2.png)\n\n这里来自 `node_modules` 的包肯定是被打包到 `vender` 里了，不用管这个，主要是看 `common` 这个包的信息\n\n暂且忽略掉**maxInitialRequests**这个配置（当然代码里是不能忽略的因为有默认值，想象这一项不起作用就行了），如果按照使用次数超过2次，大小超过0的包，打包到一起，那么结果是这样的：\n> Common（chunks）：A.jsx、Common.css\n> vender（chunks）：第三方\n> shop.js（chunks）：Header.jsx、B.jsx、b.css、shop.css\n> index.js（chunks）：index.css\n\n那么此时的maxInitialRequests（初始加载次数）是：\n`shop页入口`：shop.js、vender、Common     **一共三次**\n\n`index页入口`：index.js、vender(chunks)、Common   **一共三次**\n\n-----------------------\n\n如果此时我限制了 **maxInitialRequests：2** 为2的话，那么结果是这样的\n> vender（chunks）：第三方\n> shop.js（chunks）：Header.jsx、B.jsx、b.css、shop.css、A.jsx、Common.css\n> index.js（chunks）：index.css、A.jsx、Common.css\n\n`shop页入口`：shop.js、vender **一共两次**\n\n`index页入口`：index.js、vender**一共两次**\n看截图：\n![maxInitialRequests：2的情况](/images/webpack配置代码分割/3.jpeg)\n\n![maxInitialRequests：3或大于三的情况](/images/webpack配置代码分割/4.jpeg)\n\n\n可以看到以上的分析是正确的\n\n## 四、总结\n不过话说会来，如果每次配置wepback的这一项都按这么分析，那得累死，可以这么分析，每次页面初始加载我想让它的并发请求不超过自己的预期就可以了","slug":"webpack配置代码分割","published":1,"updated":"2018-09-28T02:53:25.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8khi0016vps6d1ky8mpf","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>webpack 4.0 使用 <code>optimization.splitChunks.cacheGroups</code> 配置项来进行包的拆分，其实默认情况下，webpack是会自动帮我们分割的，但是有时候我们可能也需要自定义配置，下面来说下我对这个配置项的理解，如有错误，烦请指出</p>\n<h2 id=\"二、配置项说明\"><a href=\"#二、配置项说明\" class=\"headerlink\" title=\"二、配置项说明\"></a>二、配置项说明</h2><ol>\n<li><strong> cacheGroups</strong>                           <ul>\n<li>用这个配置项来自定义生成的文件</li>\n</ul>\n</li>\n<li><strong> test </strong>                                              <ul>\n<li>限制范围，可以是正则，匹配文件夹或文件</li>\n</ul>\n</li>\n<li><strong> name</strong>                                            <ul>\n<li>生成的文件名</li>\n</ul>\n</li>\n<li><strong> priority</strong>                                         <ul>\n<li>优先级，当有chunks满足多个分组条件的时候，优先选择优先级高的</li>\n</ul>\n</li>\n<li><strong> minSize</strong>                                        <ul>\n<li>分出来的包最小尺寸必须大于此值，默认30000B</li>\n</ul>\n</li>\n<li><strong> minChunks</strong>                                   <ul>\n<li>表示分离前被引用次数,默认为1</li>\n</ul>\n</li>\n<li><strong> maxInitialRequests</strong>                       <ul>\n<li>最大初始化加载次数，一个入口文件可以并行加载的最大文件数量，默认1</li>\n</ul>\n</li>\n<li><strong> maxAsyncRequests</strong>                      <ul>\n<li>最大按需加载次数，最大异步加载次数，默认1</li>\n</ul>\n</li>\n<li><strong> enforce: true</strong>                                <ul>\n<li>优先处理，这一项好像和priority有些重叠了</li>\n</ul>\n</li>\n<li><strong> reuseExistingChunk:true</strong>            <ul>\n<li>表示可以使用已经存在的块，即如果满足条件的块已经存在就是用己有的的，不再创建一个新的块</li>\n</ul>\n</li>\n<li><strong> chunks 值为”initial”, “async”（默认） 或 “all”</strong> <ul>\n<li>initial 入口chunk，对于异步导入的文件不处理</li>\n<li>async 异步chunk，只对异步导入的文件处理</li>\n<li>all 全部chunk</li>\n</ul>\n</li>\n</ol>\n<p>12.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtimeChunk: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'manifest'</span></span><br><span class=\"line\">        <span class=\"comment\">/* 管理被分出来的包，runtime 指的是 webpack 的运行环境(具体作用就是模块解析, 加载) 和 模块信息清单，</span></span><br><span class=\"line\"><span class=\"comment\">                    模块信息清单在每次有模块变更(hash 变更)时都会变更 */</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">cacheGroups:&#123;<span class=\"comment\">//设置缓存chunks</span></span><br><span class=\"line\">    priority: <span class=\"number\">0</span>,<span class=\"comment\">//缓存组优先级</span></span><br><span class=\"line\">    <span class=\"comment\">//当需要优先匹配缓存组的规则时，priority需要设置为正数，当需要优先匹配默认设置时，缓存组需设置为负数，0为两者分割线</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:&#123;<span class=\"comment\">//设置缓存组默认配置，可通过default:false禁用默认缓存组，</span></span><br><span class=\"line\">    <span class=\"comment\">//然后就可以自定义缓存组，将初始化加载时被重复引用的模块进行拆分</span></span><br><span class=\"line\">        minChunks:<span class=\"number\">2</span>,<span class=\"comment\">//引用两次</span></span><br><span class=\"line\">        priority:<span class=\"number\">-20</span>,<span class=\"comment\">//缓存组优先级为-20</span></span><br><span class=\"line\">        reuseExistingChunk:<span class=\"literal\">true</span>,<span class=\"comment\">//表示可以使用已经存在的块，即如果满足条件的块已经存在就是用己有的的，不再创建一个新的块</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    [key]:&#123;<span class=\"comment\">//自定义缓存组，可以根据需求，自由创建</span></span><br><span class=\"line\">        chunks:<span class=\"string\">'initial'</span>,</span><br><span class=\"line\">        test: <span class=\"regexp\">/vue/</span>,<span class=\"comment\">//正则规则验证，如符合就提取chunk放入当前缓存组，值可以是function、boolean、string、RegExp，默认为空</span></span><br><span class=\"line\">        enforce: <span class=\"literal\">true</span><span class=\"comment\">//优先处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、疑难配置项\"><a href=\"#三、疑难配置项\" class=\"headerlink\" title=\"三、疑难配置项\"></a>三、疑难配置项</h2><p><strong> maxInitialRequests</strong> :<br>这个配置项我一直很不理解，网上的很多资源都是千篇一律，有用的基本没有，后来我发现了这篇文章  <a href=\"https://www.cnblogs.com/wmhuang/p/8967639.html\" target=\"_blank\" rel=\"noopener\">关于webpack模块拆分规则</a>  让我有对这个配置项有了点浅显的了解</p>\n<p>现在说说我的理解，举个小例子：<br>这是一个多页应用，index.js和shop.js是入口文件<br>我的目录结构：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack配置代码分割/1.jpeg\" alt=\"目录结构\" title=\"\">\n                </div>\n                <div class=\"image-caption\">目录结构</div>\n            </figure>；</p>\n<p>这是webpack分割代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtimeChunk: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'manifest'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">splitChunks: &#123;</span><br><span class=\"line\">    cacheGroups: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//项目公共组件</span></span><br><span class=\"line\">        common: &#123;</span><br><span class=\"line\">            chunks: <span class=\"string\">'initial'</span>, </span><br><span class=\"line\">            name: <span class=\"string\">'common'</span>,</span><br><span class=\"line\">            minChunks: <span class=\"number\">2</span>, </span><br><span class=\"line\">            maxInitialRequests: <span class=\"number\">3</span>, <span class=\"comment\">//最大初始化加载次数，一个入口文件可以并行加载的最大文件数量，默认1</span></span><br><span class=\"line\">            minSize: <span class=\"number\">0</span> <span class=\"comment\">//表示在分离前的最小模块大小，默认为0，最小为30000</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//第三方组件</span></span><br><span class=\"line\">        vendor: &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            chunks: <span class=\"string\">\"initial\"</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"vendor\"</span>,</span><br><span class=\"line\">            priority: <span class=\"number\">10</span>,</span><br><span class=\"line\">            enforce: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在先别急着看分包结果，先来分析一下：<br>其中除了React、ReactDOM是第三方包以外剩下的都是自定义组件</p>\n<p><strong>index.js(入口文件)</strong>：React、ReactDom、index.jsx(index目录下)<br><strong>shop.js(入口文件)</strong>：React、ReactDom、index.jsx(shop目录下)<br><strong>index.jsx(shop目录下)</strong>：React、Header.jsx、A.jsx、B.jsx、shop.css<br><strong>index.jsx(index目录下)</strong>：React、A.jsx、index.css<br><strong>A.jsx</strong>：React、Common.css<br><strong>B.jsx</strong>：React、b.css、common.css<br>那么画出的依赖图就是这个样子：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack配置代码分割/2.png\" alt=\"目录结构\" title=\"\">\n                </div>\n                <div class=\"image-caption\">目录结构</div>\n            </figure></p>\n<p>这里来自 <code>node_modules</code> 的包肯定是被打包到 <code>vender</code> 里了，不用管这个，主要是看 <code>common</code> 这个包的信息</p>\n<p>暂且忽略掉<strong>maxInitialRequests</strong>这个配置（当然代码里是不能忽略的因为有默认值，想象这一项不起作用就行了），如果按照使用次数超过2次，大小超过0的包，打包到一起，那么结果是这样的：</p>\n<blockquote>\n<p>Common（chunks）：A.jsx、Common.css<br>vender（chunks）：第三方<br>shop.js（chunks）：Header.jsx、B.jsx、b.css、shop.css<br>index.js（chunks）：index.css</p>\n</blockquote>\n<p>那么此时的maxInitialRequests（初始加载次数）是：<br><code>shop页入口</code>：shop.js、vender、Common     <strong>一共三次</strong></p>\n<p><code>index页入口</code>：index.js、vender(chunks)、Common   <strong>一共三次</strong></p>\n<hr>\n<p>如果此时我限制了 <strong>maxInitialRequests：2</strong> 为2的话，那么结果是这样的</p>\n<blockquote>\n<p>vender（chunks）：第三方<br>shop.js（chunks）：Header.jsx、B.jsx、b.css、shop.css、A.jsx、Common.css<br>index.js（chunks）：index.css、A.jsx、Common.css</p>\n</blockquote>\n<p><code>shop页入口</code>：shop.js、vender <strong>一共两次</strong></p>\n<p><code>index页入口</code>：index.js、vender<strong>一共两次</strong><br>看截图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack配置代码分割/3.jpeg\" alt=\"maxInitialRequests：2的情况\" title=\"\">\n                </div>\n                <div class=\"image-caption\">maxInitialRequests：2的情况</div>\n            </figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack配置代码分割/4.jpeg\" alt=\"maxInitialRequests：3或大于三的情况\" title=\"\">\n                </div>\n                <div class=\"image-caption\">maxInitialRequests：3或大于三的情况</div>\n            </figure>\n<p>可以看到以上的分析是正确的</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>不过话说会来，如果每次配置wepback的这一项都按这么分析，那得累死，可以这么分析，每次页面初始加载我想让它的并发请求不超过自己的预期就可以了</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>webpack 4.0 使用 <code>optimization.splitChunks.cacheGroups</code> 配置项来进行包的拆分，其实默认情况下，webpack是会自动帮我们分割的，但是有时候我们可能也需要自定义配置，下面来说下我对这个配置项的理解，如有错误，烦请指出</p>\n<h2 id=\"二、配置项说明\"><a href=\"#二、配置项说明\" class=\"headerlink\" title=\"二、配置项说明\"></a>二、配置项说明</h2><ol>\n<li><strong> cacheGroups</strong>                           <ul>\n<li>用这个配置项来自定义生成的文件</li>\n</ul>\n</li>\n<li><strong> test </strong>                                              <ul>\n<li>限制范围，可以是正则，匹配文件夹或文件</li>\n</ul>\n</li>\n<li><strong> name</strong>                                            <ul>\n<li>生成的文件名</li>\n</ul>\n</li>\n<li><strong> priority</strong>                                         <ul>\n<li>优先级，当有chunks满足多个分组条件的时候，优先选择优先级高的</li>\n</ul>\n</li>\n<li><strong> minSize</strong>                                        <ul>\n<li>分出来的包最小尺寸必须大于此值，默认30000B</li>\n</ul>\n</li>\n<li><strong> minChunks</strong>                                   <ul>\n<li>表示分离前被引用次数,默认为1</li>\n</ul>\n</li>\n<li><strong> maxInitialRequests</strong>                       <ul>\n<li>最大初始化加载次数，一个入口文件可以并行加载的最大文件数量，默认1</li>\n</ul>\n</li>\n<li><strong> maxAsyncRequests</strong>                      <ul>\n<li>最大按需加载次数，最大异步加载次数，默认1</li>\n</ul>\n</li>\n<li><strong> enforce: true</strong>                                <ul>\n<li>优先处理，这一项好像和priority有些重叠了</li>\n</ul>\n</li>\n<li><strong> reuseExistingChunk:true</strong>            <ul>\n<li>表示可以使用已经存在的块，即如果满足条件的块已经存在就是用己有的的，不再创建一个新的块</li>\n</ul>\n</li>\n<li><strong> chunks 值为”initial”, “async”（默认） 或 “all”</strong> <ul>\n<li>initial 入口chunk，对于异步导入的文件不处理</li>\n<li>async 异步chunk，只对异步导入的文件处理</li>\n<li>all 全部chunk</li>\n</ul>\n</li>\n</ol>\n<p>12.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtimeChunk: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'manifest'</span></span><br><span class=\"line\">        <span class=\"comment\">/* 管理被分出来的包，runtime 指的是 webpack 的运行环境(具体作用就是模块解析, 加载) 和 模块信息清单，</span></span><br><span class=\"line\"><span class=\"comment\">                    模块信息清单在每次有模块变更(hash 变更)时都会变更 */</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">cacheGroups:&#123;<span class=\"comment\">//设置缓存chunks</span></span><br><span class=\"line\">    priority: <span class=\"number\">0</span>,<span class=\"comment\">//缓存组优先级</span></span><br><span class=\"line\">    <span class=\"comment\">//当需要优先匹配缓存组的规则时，priority需要设置为正数，当需要优先匹配默认设置时，缓存组需设置为负数，0为两者分割线</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:&#123;<span class=\"comment\">//设置缓存组默认配置，可通过default:false禁用默认缓存组，</span></span><br><span class=\"line\">    <span class=\"comment\">//然后就可以自定义缓存组，将初始化加载时被重复引用的模块进行拆分</span></span><br><span class=\"line\">        minChunks:<span class=\"number\">2</span>,<span class=\"comment\">//引用两次</span></span><br><span class=\"line\">        priority:<span class=\"number\">-20</span>,<span class=\"comment\">//缓存组优先级为-20</span></span><br><span class=\"line\">        reuseExistingChunk:<span class=\"literal\">true</span>,<span class=\"comment\">//表示可以使用已经存在的块，即如果满足条件的块已经存在就是用己有的的，不再创建一个新的块</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    [key]:&#123;<span class=\"comment\">//自定义缓存组，可以根据需求，自由创建</span></span><br><span class=\"line\">        chunks:<span class=\"string\">'initial'</span>,</span><br><span class=\"line\">        test: <span class=\"regexp\">/vue/</span>,<span class=\"comment\">//正则规则验证，如符合就提取chunk放入当前缓存组，值可以是function、boolean、string、RegExp，默认为空</span></span><br><span class=\"line\">        enforce: <span class=\"literal\">true</span><span class=\"comment\">//优先处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、疑难配置项\"><a href=\"#三、疑难配置项\" class=\"headerlink\" title=\"三、疑难配置项\"></a>三、疑难配置项</h2><p><strong> maxInitialRequests</strong> :<br>这个配置项我一直很不理解，网上的很多资源都是千篇一律，有用的基本没有，后来我发现了这篇文章  <a href=\"https://www.cnblogs.com/wmhuang/p/8967639.html\" target=\"_blank\" rel=\"noopener\">关于webpack模块拆分规则</a>  让我有对这个配置项有了点浅显的了解</p>\n<p>现在说说我的理解，举个小例子：<br>这是一个多页应用，index.js和shop.js是入口文件<br>我的目录结构：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack配置代码分割/1.jpeg\" alt=\"目录结构\" title=\"\">\n                </div>\n                <div class=\"image-caption\">目录结构</div>\n            </figure>；</p>\n<p>这是webpack分割代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtimeChunk: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'manifest'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">splitChunks: &#123;</span><br><span class=\"line\">    cacheGroups: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//项目公共组件</span></span><br><span class=\"line\">        common: &#123;</span><br><span class=\"line\">            chunks: <span class=\"string\">'initial'</span>, </span><br><span class=\"line\">            name: <span class=\"string\">'common'</span>,</span><br><span class=\"line\">            minChunks: <span class=\"number\">2</span>, </span><br><span class=\"line\">            maxInitialRequests: <span class=\"number\">3</span>, <span class=\"comment\">//最大初始化加载次数，一个入口文件可以并行加载的最大文件数量，默认1</span></span><br><span class=\"line\">            minSize: <span class=\"number\">0</span> <span class=\"comment\">//表示在分离前的最小模块大小，默认为0，最小为30000</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//第三方组件</span></span><br><span class=\"line\">        vendor: &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">            chunks: <span class=\"string\">\"initial\"</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"vendor\"</span>,</span><br><span class=\"line\">            priority: <span class=\"number\">10</span>,</span><br><span class=\"line\">            enforce: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在先别急着看分包结果，先来分析一下：<br>其中除了React、ReactDOM是第三方包以外剩下的都是自定义组件</p>\n<p><strong>index.js(入口文件)</strong>：React、ReactDom、index.jsx(index目录下)<br><strong>shop.js(入口文件)</strong>：React、ReactDom、index.jsx(shop目录下)<br><strong>index.jsx(shop目录下)</strong>：React、Header.jsx、A.jsx、B.jsx、shop.css<br><strong>index.jsx(index目录下)</strong>：React、A.jsx、index.css<br><strong>A.jsx</strong>：React、Common.css<br><strong>B.jsx</strong>：React、b.css、common.css<br>那么画出的依赖图就是这个样子：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack配置代码分割/2.png\" alt=\"目录结构\" title=\"\">\n                </div>\n                <div class=\"image-caption\">目录结构</div>\n            </figure></p>\n<p>这里来自 <code>node_modules</code> 的包肯定是被打包到 <code>vender</code> 里了，不用管这个，主要是看 <code>common</code> 这个包的信息</p>\n<p>暂且忽略掉<strong>maxInitialRequests</strong>这个配置（当然代码里是不能忽略的因为有默认值，想象这一项不起作用就行了），如果按照使用次数超过2次，大小超过0的包，打包到一起，那么结果是这样的：</p>\n<blockquote>\n<p>Common（chunks）：A.jsx、Common.css<br>vender（chunks）：第三方<br>shop.js（chunks）：Header.jsx、B.jsx、b.css、shop.css<br>index.js（chunks）：index.css</p>\n</blockquote>\n<p>那么此时的maxInitialRequests（初始加载次数）是：<br><code>shop页入口</code>：shop.js、vender、Common     <strong>一共三次</strong></p>\n<p><code>index页入口</code>：index.js、vender(chunks)、Common   <strong>一共三次</strong></p>\n<hr>\n<p>如果此时我限制了 <strong>maxInitialRequests：2</strong> 为2的话，那么结果是这样的</p>\n<blockquote>\n<p>vender（chunks）：第三方<br>shop.js（chunks）：Header.jsx、B.jsx、b.css、shop.css、A.jsx、Common.css<br>index.js（chunks）：index.css、A.jsx、Common.css</p>\n</blockquote>\n<p><code>shop页入口</code>：shop.js、vender <strong>一共两次</strong></p>\n<p><code>index页入口</code>：index.js、vender<strong>一共两次</strong><br>看截图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack配置代码分割/3.jpeg\" alt=\"maxInitialRequests：2的情况\" title=\"\">\n                </div>\n                <div class=\"image-caption\">maxInitialRequests：2的情况</div>\n            </figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/webpack配置代码分割/4.jpeg\" alt=\"maxInitialRequests：3或大于三的情况\" title=\"\">\n                </div>\n                <div class=\"image-caption\">maxInitialRequests：3或大于三的情况</div>\n            </figure>\n<p>可以看到以上的分析是正确的</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>不过话说会来，如果每次配置wepback的这一项都按这么分析，那得累死，可以这么分析，每次页面初始加载我想让它的并发请求不超过自己的预期就可以了</p>\n"},{"title":"受控组件和非受控组件","date":"2018-02-07T02:48:32.000Z","_content":"## 一、前言\n在HTML中，表单元素例如 `input` , `textarea` , ` select ` 通常是根据用户的输入来维护它们自己的状态。\n在React中，可变状态通常保存在 `state` 中，只能用 `setState()` 来进行更新操作\n\n## 二、定义解释\n\n正如上面所说，表单元素的数据可以由自身DOM元素来管理，也可以由React组件来管理\n\n### 1.controlled_Component ( 受控组件 )\n将表单状态保存在React组件中（state），呈现表单的React组件也会控制用户输入后所发生的情况。表单元素数据托管到React组件中的这种方式叫做  `受控组件`\n\nReact能控制\n\n### 2.uncontrolled_Component ( 非受控组件 )\n与受控组件相反，表单数据由dom元素自身管理的组件叫 `非受控组件`\n\nReact不能控制\n\n## 三、栗子\n\n### 1.controlled_Component ( 受控组件 )\n\n``` javascript\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\tname:'姓名',\n\t\t\ttext:'请输入'\n\t\t}\n\t}\n\thandleName(e){\n\t\tthis.setState({\n\t\t\tname:e.target.value\n\t\t})\n\t}\n\thandleText(e){\n\t\tthis.setState({\n\t\t\ttext:e.target.value\n\t\t})\n\t}\n\trender(){\n\t\treturn(\n\t\t\t<form method='get' action=\"/\">\n\t\t\t\t<input type=\"text\" name='name' value={this.state.name} onChange={this.handleName.bind(this)}/>\n\t\t\t\t<textarea name=\"text\" value={this.state.text} onChange={this.handleText.bind(this)}></textarea>\n\t\t\t\t<input type=\"submit\"/>\n\t\t\t</form>\n\t\t)\n\t}\n}\n```\n可以看到 input 和 textarea的value值全都交给了React组件来管理。\n\n>`注意 : `\n>这种情况下每个表单元素必须要有 `onChange` 事件，这样用户每次操作对应的元素，对应元素数据才能得到改变\n\n### 2.uncontrolled_Component ( 非受控组件 )\n\n``` javascript\n/*uncontrolled Component*/\nclass App extends Component {\n\trender(){\n\t\treturn(\n\t\t\t<form method='get' action=\"/\">\n\t\t\t\t<input type=\"text\" name='name' defaultValue='姓名'/>\n\t\t\t\t<textarea name=\"text\" defaultValue='想法'></textarea>\n\t\t\t\t<input type=\"submit\"/>\n\t\t\t</form>\n\t\t)\n\t}\n}\n```\n可以看到 input 和 textarea的value值全都是由自身DOM元素来管理的。\n\n>`注意 : `\n>非受控组件这功中，通常你需要指定表单元素的初始值，但不控制后续的更新，这种情况需要指定 ` defaultValue ` 属性，而不是 value属性\n>如果你不想让他有初始值，也可以不用写 `defaultValue`\n\n## 三、两者优缺点？\n\nname | 优点 | 缺点 \n- | :-: | :-:\n非受控组件 | 简练、操作数据的方式更简洁 |  表单验证 、选择性开启或者关闭按钮 等功能不能处理\n受控组件 | 相比之下略显繁琐 |  表单验证 、选择性开启或者关闭按钮 等功能能轻松处理\n\n所以通常情况下受控组件更能满足我们需求","source":"_posts/受控组件和非受控组件.md","raw":"---\ntitle: 受控组件和非受控组件\ndate: 2018-02-07 10:48:32\ntags: react\n---\n## 一、前言\n在HTML中，表单元素例如 `input` , `textarea` , ` select ` 通常是根据用户的输入来维护它们自己的状态。\n在React中，可变状态通常保存在 `state` 中，只能用 `setState()` 来进行更新操作\n\n## 二、定义解释\n\n正如上面所说，表单元素的数据可以由自身DOM元素来管理，也可以由React组件来管理\n\n### 1.controlled_Component ( 受控组件 )\n将表单状态保存在React组件中（state），呈现表单的React组件也会控制用户输入后所发生的情况。表单元素数据托管到React组件中的这种方式叫做  `受控组件`\n\nReact能控制\n\n### 2.uncontrolled_Component ( 非受控组件 )\n与受控组件相反，表单数据由dom元素自身管理的组件叫 `非受控组件`\n\nReact不能控制\n\n## 三、栗子\n\n### 1.controlled_Component ( 受控组件 )\n\n``` javascript\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\tname:'姓名',\n\t\t\ttext:'请输入'\n\t\t}\n\t}\n\thandleName(e){\n\t\tthis.setState({\n\t\t\tname:e.target.value\n\t\t})\n\t}\n\thandleText(e){\n\t\tthis.setState({\n\t\t\ttext:e.target.value\n\t\t})\n\t}\n\trender(){\n\t\treturn(\n\t\t\t<form method='get' action=\"/\">\n\t\t\t\t<input type=\"text\" name='name' value={this.state.name} onChange={this.handleName.bind(this)}/>\n\t\t\t\t<textarea name=\"text\" value={this.state.text} onChange={this.handleText.bind(this)}></textarea>\n\t\t\t\t<input type=\"submit\"/>\n\t\t\t</form>\n\t\t)\n\t}\n}\n```\n可以看到 input 和 textarea的value值全都交给了React组件来管理。\n\n>`注意 : `\n>这种情况下每个表单元素必须要有 `onChange` 事件，这样用户每次操作对应的元素，对应元素数据才能得到改变\n\n### 2.uncontrolled_Component ( 非受控组件 )\n\n``` javascript\n/*uncontrolled Component*/\nclass App extends Component {\n\trender(){\n\t\treturn(\n\t\t\t<form method='get' action=\"/\">\n\t\t\t\t<input type=\"text\" name='name' defaultValue='姓名'/>\n\t\t\t\t<textarea name=\"text\" defaultValue='想法'></textarea>\n\t\t\t\t<input type=\"submit\"/>\n\t\t\t</form>\n\t\t)\n\t}\n}\n```\n可以看到 input 和 textarea的value值全都是由自身DOM元素来管理的。\n\n>`注意 : `\n>非受控组件这功中，通常你需要指定表单元素的初始值，但不控制后续的更新，这种情况需要指定 ` defaultValue ` 属性，而不是 value属性\n>如果你不想让他有初始值，也可以不用写 `defaultValue`\n\n## 三、两者优缺点？\n\nname | 优点 | 缺点 \n- | :-: | :-:\n非受控组件 | 简练、操作数据的方式更简洁 |  表单验证 、选择性开启或者关闭按钮 等功能不能处理\n受控组件 | 相比之下略显繁琐 |  表单验证 、选择性开启或者关闭按钮 等功能能轻松处理\n\n所以通常情况下受控组件更能满足我们需求","slug":"受控组件和非受控组件","published":1,"updated":"2018-09-28T02:53:25.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8khv0018vps6r6m133zm","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>在HTML中，表单元素例如 <code>input</code> , <code>textarea</code> , <code>select</code> 通常是根据用户的输入来维护它们自己的状态。<br>在React中，可变状态通常保存在 <code>state</code> 中，只能用 <code>setState()</code> 来进行更新操作</p>\n<h2 id=\"二、定义解释\"><a href=\"#二、定义解释\" class=\"headerlink\" title=\"二、定义解释\"></a>二、定义解释</h2><p>正如上面所说，表单元素的数据可以由自身DOM元素来管理，也可以由React组件来管理</p>\n<h3 id=\"1-controlled-Component-受控组件\"><a href=\"#1-controlled-Component-受控组件\" class=\"headerlink\" title=\"1.controlled_Component ( 受控组件 )\"></a>1.controlled_Component ( 受控组件 )</h3><p>将表单状态保存在React组件中（state），呈现表单的React组件也会控制用户输入后所发生的情况。表单元素数据托管到React组件中的这种方式叫做  <code>受控组件</code></p>\n<p>React能控制</p>\n<h3 id=\"2-uncontrolled-Component-非受控组件\"><a href=\"#2-uncontrolled-Component-非受控组件\" class=\"headerlink\" title=\"2.uncontrolled_Component ( 非受控组件 )\"></a>2.uncontrolled_Component ( 非受控组件 )</h3><p>与受控组件相反，表单数据由dom元素自身管理的组件叫 <code>非受控组件</code></p>\n<p>React不能控制</p>\n<h2 id=\"三、栗子\"><a href=\"#三、栗子\" class=\"headerlink\" title=\"三、栗子\"></a>三、栗子</h2><h3 id=\"1-controlled-Component-受控组件-1\"><a href=\"#1-controlled-Component-受控组件-1\" class=\"headerlink\" title=\"1.controlled_Component ( 受控组件 )\"></a>1.controlled_Component ( 受控组件 )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.state=&#123;</span><br><span class=\"line\">\t\t\tname:<span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">\t\t\ttext:<span class=\"string\">'请输入'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleName(e)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\t\tname:e.target.value</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleText(e)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\t\ttext:e.target.value</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;form method=<span class=\"string\">'get'</span> action=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">'name'</span> value=&#123;<span class=\"keyword\">this</span>.state.name&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleName.bind(<span class=\"keyword\">this</span>)&#125;/&gt;</span><br><span class=\"line\">\t\t\t\t&lt;textarea name=<span class=\"string\">\"text\"</span> value=&#123;<span class=\"keyword\">this</span>.state.text&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleText.bind(<span class=\"keyword\">this</span>)&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"submit\"</span>/&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到 input 和 textarea的value值全都交给了React组件来管理。</p>\n<blockquote>\n<p><code>注意 :</code><br>这种情况下每个表单元素必须要有 <code>onChange</code> 事件，这样用户每次操作对应的元素，对应元素数据才能得到改变</p>\n</blockquote>\n<h3 id=\"2-uncontrolled-Component-非受控组件-1\"><a href=\"#2-uncontrolled-Component-非受控组件-1\" class=\"headerlink\" title=\"2.uncontrolled_Component ( 非受控组件 )\"></a>2.uncontrolled_Component ( 非受控组件 )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*uncontrolled Component*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;form method=<span class=\"string\">'get'</span> action=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">'name'</span> defaultValue=<span class=\"string\">'姓名'</span>/&gt;</span><br><span class=\"line\">\t\t\t\t&lt;textarea name=<span class=\"string\">\"text\"</span> defaultValue=<span class=\"string\">'想法'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"submit\"</span>/&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到 input 和 textarea的value值全都是由自身DOM元素来管理的。</p>\n<blockquote>\n<p><code>注意 :</code><br>非受控组件这功中，通常你需要指定表单元素的初始值，但不控制后续的更新，这种情况需要指定 <code>defaultValue</code> 属性，而不是 value属性<br>如果你不想让他有初始值，也可以不用写 <code>defaultValue</code></p>\n</blockquote>\n<h2 id=\"三、两者优缺点？\"><a href=\"#三、两者优缺点？\" class=\"headerlink\" title=\"三、两者优缺点？\"></a>三、两者优缺点？</h2><table>\n<thead>\n<tr>\n<th>name</th>\n<th style=\"text-align:center\">优点</th>\n<th style=\"text-align:center\">缺点 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>非受控组件</td>\n<td style=\"text-align:center\">简练、操作数据的方式更简洁</td>\n<td style=\"text-align:center\">表单验证 、选择性开启或者关闭按钮 等功能不能处理</td>\n</tr>\n<tr>\n<td>受控组件</td>\n<td style=\"text-align:center\">相比之下略显繁琐</td>\n<td style=\"text-align:center\">表单验证 、选择性开启或者关闭按钮 等功能能轻松处理</td>\n</tr>\n</tbody>\n</table>\n<p>所以通常情况下受控组件更能满足我们需求</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>在HTML中，表单元素例如 <code>input</code> , <code>textarea</code> , <code>select</code> 通常是根据用户的输入来维护它们自己的状态。<br>在React中，可变状态通常保存在 <code>state</code> 中，只能用 <code>setState()</code> 来进行更新操作</p>\n<h2 id=\"二、定义解释\"><a href=\"#二、定义解释\" class=\"headerlink\" title=\"二、定义解释\"></a>二、定义解释</h2><p>正如上面所说，表单元素的数据可以由自身DOM元素来管理，也可以由React组件来管理</p>\n<h3 id=\"1-controlled-Component-受控组件\"><a href=\"#1-controlled-Component-受控组件\" class=\"headerlink\" title=\"1.controlled_Component ( 受控组件 )\"></a>1.controlled_Component ( 受控组件 )</h3><p>将表单状态保存在React组件中（state），呈现表单的React组件也会控制用户输入后所发生的情况。表单元素数据托管到React组件中的这种方式叫做  <code>受控组件</code></p>\n<p>React能控制</p>\n<h3 id=\"2-uncontrolled-Component-非受控组件\"><a href=\"#2-uncontrolled-Component-非受控组件\" class=\"headerlink\" title=\"2.uncontrolled_Component ( 非受控组件 )\"></a>2.uncontrolled_Component ( 非受控组件 )</h3><p>与受控组件相反，表单数据由dom元素自身管理的组件叫 <code>非受控组件</code></p>\n<p>React不能控制</p>\n<h2 id=\"三、栗子\"><a href=\"#三、栗子\" class=\"headerlink\" title=\"三、栗子\"></a>三、栗子</h2><h3 id=\"1-controlled-Component-受控组件-1\"><a href=\"#1-controlled-Component-受控组件-1\" class=\"headerlink\" title=\"1.controlled_Component ( 受控组件 )\"></a>1.controlled_Component ( 受控组件 )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.state=&#123;</span><br><span class=\"line\">\t\t\tname:<span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">\t\t\ttext:<span class=\"string\">'请输入'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleName(e)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\t\tname:e.target.value</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandleText(e)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">\t\t\ttext:e.target.value</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;form method=<span class=\"string\">'get'</span> action=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">'name'</span> value=&#123;<span class=\"keyword\">this</span>.state.name&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleName.bind(<span class=\"keyword\">this</span>)&#125;/&gt;</span><br><span class=\"line\">\t\t\t\t&lt;textarea name=<span class=\"string\">\"text\"</span> value=&#123;<span class=\"keyword\">this</span>.state.text&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleText.bind(<span class=\"keyword\">this</span>)&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"submit\"</span>/&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到 input 和 textarea的value值全都交给了React组件来管理。</p>\n<blockquote>\n<p><code>注意 :</code><br>这种情况下每个表单元素必须要有 <code>onChange</code> 事件，这样用户每次操作对应的元素，对应元素数据才能得到改变</p>\n</blockquote>\n<h3 id=\"2-uncontrolled-Component-非受控组件-1\"><a href=\"#2-uncontrolled-Component-非受控组件-1\" class=\"headerlink\" title=\"2.uncontrolled_Component ( 非受控组件 )\"></a>2.uncontrolled_Component ( 非受控组件 )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*uncontrolled Component*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t\t&lt;form method=<span class=\"string\">'get'</span> action=<span class=\"string\">\"/\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">'name'</span> defaultValue=<span class=\"string\">'姓名'</span>/&gt;</span><br><span class=\"line\">\t\t\t\t&lt;textarea name=<span class=\"string\">\"text\"</span> defaultValue=<span class=\"string\">'想法'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span></span><br><span class=\"line\">\t\t\t\t&lt;input type=<span class=\"string\">\"submit\"</span>/&gt;</span><br><span class=\"line\">\t\t\t&lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t)</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到 input 和 textarea的value值全都是由自身DOM元素来管理的。</p>\n<blockquote>\n<p><code>注意 :</code><br>非受控组件这功中，通常你需要指定表单元素的初始值，但不控制后续的更新，这种情况需要指定 <code>defaultValue</code> 属性，而不是 value属性<br>如果你不想让他有初始值，也可以不用写 <code>defaultValue</code></p>\n</blockquote>\n<h2 id=\"三、两者优缺点？\"><a href=\"#三、两者优缺点？\" class=\"headerlink\" title=\"三、两者优缺点？\"></a>三、两者优缺点？</h2><table>\n<thead>\n<tr>\n<th>name</th>\n<th style=\"text-align:center\">优点</th>\n<th style=\"text-align:center\">缺点 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>非受控组件</td>\n<td style=\"text-align:center\">简练、操作数据的方式更简洁</td>\n<td style=\"text-align:center\">表单验证 、选择性开启或者关闭按钮 等功能不能处理</td>\n</tr>\n<tr>\n<td>受控组件</td>\n<td style=\"text-align:center\">相比之下略显繁琐</td>\n<td style=\"text-align:center\">表单验证 、选择性开启或者关闭按钮 等功能能轻松处理</td>\n</tr>\n</tbody>\n</table>\n<p>所以通常情况下受控组件更能满足我们需求</p>\n"},{"title":"斐波那契数列的实现","date":"2017-10-25T09:10:02.000Z","_content":"## 一、扫盲\n斐波那契数列也叫黄金分割数列，也叫兔子数列\n原理：假定一对大兔子每月能生一对小兔子，且每对新生的小兔子经过一个月可以长成一对大兔子，如果不发生死亡，且每次均生下一雌一雄，问一年后共有多少对兔子？\n\n| 月份 | 兔子情况 | 总数 |\n|:---:|:-|:----:|\n| 第0个月 | a（小兔子） |\t\t\t \t\t 1 |\n| 第1个月 | a（具备繁殖能力） |\t\t\t\t 1 |\n| 第2个月 | b（生啦生啦）+ a（他父母） |\t\t\t 2 |\n| 第3个月 | b（2月份出生的具备繁殖能力，正跃跃欲试） + b2（他父母又生二胎了） +a（他父母） |\t\t 3 |\n| 第4个月 | c（2月份的兔子b喜当爹）+b（二月份出生的兔子） + b2（二胎具备繁殖能力，准备生娃） +a（他父母）+d(a生三胎) |\t\t5|\n| ... | ... | ... |\n 1、1 、2、3、5、8、13、21、34、55、89......\n所以规律就是 `fn(n)=fn(n-1)+fn(n-2)`\n\n## 二、代码实现\n### 1.第一种\n这种是最常见的实现：\n`迭代`\n``` javascript\n/*\n*i 月份\n*/\nfunction fn(i){\n\tvar a=[];\n\t/*0个月什么都不存在*/\n\ta[0]=0;\n\ta[1]=1;\n\tfor(var o=2;o<=i;o++){\n\t\ta[o]=a[o-1]+a[o-2];\n\t}\n\treturn a[i]\n}\n```\n\n### 2.第二种\n`递归`\n``` javascript\n/*\n* i 月份\n*/\nfunction fn(i){\n\tif(i<2){return i===0?0:1;}\n\treturn fn(i-1)+fn(i-2)\n}\n```\n是不是感觉很简洁\n\n## 三、缺陷\n针对这个例子来说，这里的递归会进行太多次的调用（比迭代多），所以简洁的背后牺牲的是性能","source":"_posts/斐波那契数列的实现.md","raw":"---\ntitle: 斐波那契数列的实现\ndate: 2017-10-25 17:10:02\ntags: '算法'\n---\n## 一、扫盲\n斐波那契数列也叫黄金分割数列，也叫兔子数列\n原理：假定一对大兔子每月能生一对小兔子，且每对新生的小兔子经过一个月可以长成一对大兔子，如果不发生死亡，且每次均生下一雌一雄，问一年后共有多少对兔子？\n\n| 月份 | 兔子情况 | 总数 |\n|:---:|:-|:----:|\n| 第0个月 | a（小兔子） |\t\t\t \t\t 1 |\n| 第1个月 | a（具备繁殖能力） |\t\t\t\t 1 |\n| 第2个月 | b（生啦生啦）+ a（他父母） |\t\t\t 2 |\n| 第3个月 | b（2月份出生的具备繁殖能力，正跃跃欲试） + b2（他父母又生二胎了） +a（他父母） |\t\t 3 |\n| 第4个月 | c（2月份的兔子b喜当爹）+b（二月份出生的兔子） + b2（二胎具备繁殖能力，准备生娃） +a（他父母）+d(a生三胎) |\t\t5|\n| ... | ... | ... |\n 1、1 、2、3、5、8、13、21、34、55、89......\n所以规律就是 `fn(n)=fn(n-1)+fn(n-2)`\n\n## 二、代码实现\n### 1.第一种\n这种是最常见的实现：\n`迭代`\n``` javascript\n/*\n*i 月份\n*/\nfunction fn(i){\n\tvar a=[];\n\t/*0个月什么都不存在*/\n\ta[0]=0;\n\ta[1]=1;\n\tfor(var o=2;o<=i;o++){\n\t\ta[o]=a[o-1]+a[o-2];\n\t}\n\treturn a[i]\n}\n```\n\n### 2.第二种\n`递归`\n``` javascript\n/*\n* i 月份\n*/\nfunction fn(i){\n\tif(i<2){return i===0?0:1;}\n\treturn fn(i-1)+fn(i-2)\n}\n```\n是不是感觉很简洁\n\n## 三、缺陷\n针对这个例子来说，这里的递归会进行太多次的调用（比迭代多），所以简洁的背后牺牲的是性能","slug":"斐波那契数列的实现","published":1,"updated":"2018-09-28T02:53:25.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8ki0001avps6r3fcij10","content":"<h2 id=\"一、扫盲\"><a href=\"#一、扫盲\" class=\"headerlink\" title=\"一、扫盲\"></a>一、扫盲</h2><p>斐波那契数列也叫黄金分割数列，也叫兔子数列<br>原理：假定一对大兔子每月能生一对小兔子，且每对新生的小兔子经过一个月可以长成一对大兔子，如果不发生死亡，且每次均生下一雌一雄，问一年后共有多少对兔子？</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">月份</th>\n<th style=\"text-align:left\">兔子情况</th>\n<th style=\"text-align:center\">总数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第0个月</td>\n<td style=\"text-align:left\">a（小兔子）</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第1个月</td>\n<td style=\"text-align:left\">a（具备繁殖能力）</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2个月</td>\n<td style=\"text-align:left\">b（生啦生啦）+ a（他父母）</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3个月</td>\n<td style=\"text-align:left\">b（2月份出生的具备繁殖能力，正跃跃欲试） + b2（他父母又生二胎了） +a（他父母）</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4个月</td>\n<td style=\"text-align:left\">c（2月份的兔子b喜当爹）+b（二月份出生的兔子） + b2（二胎具备繁殖能力，准备生娃） +a（他父母）+d(a生三胎)</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">…</td>\n<td style=\"text-align:left\">…</td>\n<td style=\"text-align:center\">…</td>\n</tr>\n</tbody>\n</table>\n<p> 1、1 、2、3、5、8、13、21、34、55、89……<br>所以规律就是 <code>fn(n)=fn(n-1)+fn(n-2)</code></p>\n<h2 id=\"二、代码实现\"><a href=\"#二、代码实现\" class=\"headerlink\" title=\"二、代码实现\"></a>二、代码实现</h2><h3 id=\"1-第一种\"><a href=\"#1-第一种\" class=\"headerlink\" title=\"1.第一种\"></a>1.第一种</h3><p>这种是最常见的实现：<br><code>迭代</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*i 月份</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a=[];</span><br><span class=\"line\">\t<span class=\"comment\">/*0个月什么都不存在*/</span></span><br><span class=\"line\">\ta[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\ta[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> o=<span class=\"number\">2</span>;o&lt;=i;o++)&#123;</span><br><span class=\"line\">\t\ta[o]=a[o<span class=\"number\">-1</span>]+a[o<span class=\"number\">-2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a[i]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-第二种\"><a href=\"#2-第二种\" class=\"headerlink\" title=\"2.第二种\"></a>2.第二种</h3><p><code>递归</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* i 月份</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i&lt;<span class=\"number\">2</span>)&#123;<span class=\"keyword\">return</span> i===<span class=\"number\">0</span>?<span class=\"number\">0</span>:<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fn(i<span class=\"number\">-1</span>)+fn(i<span class=\"number\">-2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>是不是感觉很简洁</p>\n<h2 id=\"三、缺陷\"><a href=\"#三、缺陷\" class=\"headerlink\" title=\"三、缺陷\"></a>三、缺陷</h2><p>针对这个例子来说，这里的递归会进行太多次的调用（比迭代多），所以简洁的背后牺牲的是性能</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、扫盲\"><a href=\"#一、扫盲\" class=\"headerlink\" title=\"一、扫盲\"></a>一、扫盲</h2><p>斐波那契数列也叫黄金分割数列，也叫兔子数列<br>原理：假定一对大兔子每月能生一对小兔子，且每对新生的小兔子经过一个月可以长成一对大兔子，如果不发生死亡，且每次均生下一雌一雄，问一年后共有多少对兔子？</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">月份</th>\n<th style=\"text-align:left\">兔子情况</th>\n<th style=\"text-align:center\">总数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第0个月</td>\n<td style=\"text-align:left\">a（小兔子）</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第1个月</td>\n<td style=\"text-align:left\">a（具备繁殖能力）</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2个月</td>\n<td style=\"text-align:left\">b（生啦生啦）+ a（他父母）</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3个月</td>\n<td style=\"text-align:left\">b（2月份出生的具备繁殖能力，正跃跃欲试） + b2（他父母又生二胎了） +a（他父母）</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4个月</td>\n<td style=\"text-align:left\">c（2月份的兔子b喜当爹）+b（二月份出生的兔子） + b2（二胎具备繁殖能力，准备生娃） +a（他父母）+d(a生三胎)</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">…</td>\n<td style=\"text-align:left\">…</td>\n<td style=\"text-align:center\">…</td>\n</tr>\n</tbody>\n</table>\n<p> 1、1 、2、3、5、8、13、21、34、55、89……<br>所以规律就是 <code>fn(n)=fn(n-1)+fn(n-2)</code></p>\n<h2 id=\"二、代码实现\"><a href=\"#二、代码实现\" class=\"headerlink\" title=\"二、代码实现\"></a>二、代码实现</h2><h3 id=\"1-第一种\"><a href=\"#1-第一种\" class=\"headerlink\" title=\"1.第一种\"></a>1.第一种</h3><p>这种是最常见的实现：<br><code>迭代</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*i 月份</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a=[];</span><br><span class=\"line\">\t<span class=\"comment\">/*0个月什么都不存在*/</span></span><br><span class=\"line\">\ta[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\ta[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> o=<span class=\"number\">2</span>;o&lt;=i;o++)&#123;</span><br><span class=\"line\">\t\ta[o]=a[o<span class=\"number\">-1</span>]+a[o<span class=\"number\">-2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a[i]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-第二种\"><a href=\"#2-第二种\" class=\"headerlink\" title=\"2.第二种\"></a>2.第二种</h3><p><code>递归</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* i 月份</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i&lt;<span class=\"number\">2</span>)&#123;<span class=\"keyword\">return</span> i===<span class=\"number\">0</span>?<span class=\"number\">0</span>:<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fn(i<span class=\"number\">-1</span>)+fn(i<span class=\"number\">-2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>是不是感觉很简洁</p>\n<h2 id=\"三、缺陷\"><a href=\"#三、缺陷\" class=\"headerlink\" title=\"三、缺陷\"></a>三、缺陷</h2><p>针对这个例子来说，这里的递归会进行太多次的调用（比迭代多），所以简洁的背后牺牲的是性能</p>\n"},{"title":"滑动窗口算法解决指定字符串最长子串长度问题","date":"2017-11-16T07:52:51.000Z","_content":"","source":"_posts/滑动窗口算法解决指定字符串最长子串长度问题.md","raw":"---\ntitle: 滑动窗口算法解决指定字符串最长子串长度问题\ndate: 2017-11-16 15:52:51\ntags:\n---\n","slug":"滑动窗口算法解决指定字符串最长子串长度问题","published":1,"updated":"2018-09-28T02:53:25.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8ki2001dvps6q4fey341","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"箭头函数的this指向","date":"2017-08-25T07:14:31.000Z","_content":"### 前言 \n es6的箭头函数非常简洁，而且还可以解决很多问题\n1.解决以前通过var that=this方式传值的问题\n``` javascript\ndocument.body.addEventListener('click',function(){\n\tsetTimeout(function(){\n\t\tconsole.log(this)\n\t\t/*window*/\n\t\t/*对body节点操作代码...*/\n\t})\n})\n```\n比如点击body，过一段时间对body这个元素进行对应的js操作，如上代码，很明显是不对的，因为`setTimeout`里的`this`是全局`window`所以是不能通过它操作body元素，\n\n一般这种情况以前都是通过在外层通过一个变量将this传递进来，但是有了箭头函数就不用这么做了\n\nes6:\n``` javascript\ndocument.body.addEventListener('click',function(){\n\tsetTimeout(()=>{\n\t\tconsole.log(this)\n\t\t/*body(当前节点)*/\n\t\t/*对body节点操作代码...*/\n\t})\n})\n```\n这类的问题还有很多，但是为什么`箭头函数`能轻易地解决这些问题呢？\n所以要清楚能这么写的原因就要清楚`箭头函数中this`的指向\n\n### 一、写箭头函数的小提示\n#### 1.当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。\n``` javascript\n/*错误*/\n()=>{}\n/*正确*/\n()=>({})\n```\n因为JavaScript引擎会将{x}理解成一个代码块，空对象和块在这里都是`{}`这样表示，所以如果返回的是一个对象，需要加一个小括号\n\n### 箭头函数的`this`\n`箭头函数没有自己的this!!!!!!!!!`,它内部的this值集成自外围作用域\n``` javascript\nfunction foo() {\n  return () => {\n    return () => {\n      return () => {\n        console.log('id:', this.id);\n      };\n    };\n  };\n}\n\nvar f = foo.call({id: 1});\n\nvar t1 = f.call({id: 2})()(); // id: 1\nvar t2 = f().call({id: 3})(); // id: 1\nvar t3 = f()().call({id: 4}); // id: 1\n```\nt1、t2、t3都输出1\n因为箭头函数没有自己的this所以`this.id`会顺着作用域链查找一直找到foo()函数\n\n### 箭头函数的的特点\n\n它没有`arguments`变量\n``` javascript\nfunction foo() {\n  setTimeout(() => {\n    console.log('args:', arguments);\n  }, 100);\n}\n\nfoo(2, 4, 6, 8)\n// args: [2, 4, 6, 8]\n```\n上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。\n\n\n如果有了新发现，会回来补充","source":"_posts/箭头函数的this指向.md","raw":"---\ntitle: 箭头函数的this指向\ndate: 2017-08-25 15:14:31\ntags: ES6\n---\n### 前言 \n es6的箭头函数非常简洁，而且还可以解决很多问题\n1.解决以前通过var that=this方式传值的问题\n``` javascript\ndocument.body.addEventListener('click',function(){\n\tsetTimeout(function(){\n\t\tconsole.log(this)\n\t\t/*window*/\n\t\t/*对body节点操作代码...*/\n\t})\n})\n```\n比如点击body，过一段时间对body这个元素进行对应的js操作，如上代码，很明显是不对的，因为`setTimeout`里的`this`是全局`window`所以是不能通过它操作body元素，\n\n一般这种情况以前都是通过在外层通过一个变量将this传递进来，但是有了箭头函数就不用这么做了\n\nes6:\n``` javascript\ndocument.body.addEventListener('click',function(){\n\tsetTimeout(()=>{\n\t\tconsole.log(this)\n\t\t/*body(当前节点)*/\n\t\t/*对body节点操作代码...*/\n\t})\n})\n```\n这类的问题还有很多，但是为什么`箭头函数`能轻易地解决这些问题呢？\n所以要清楚能这么写的原因就要清楚`箭头函数中this`的指向\n\n### 一、写箭头函数的小提示\n#### 1.当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。\n``` javascript\n/*错误*/\n()=>{}\n/*正确*/\n()=>({})\n```\n因为JavaScript引擎会将{x}理解成一个代码块，空对象和块在这里都是`{}`这样表示，所以如果返回的是一个对象，需要加一个小括号\n\n### 箭头函数的`this`\n`箭头函数没有自己的this!!!!!!!!!`,它内部的this值集成自外围作用域\n``` javascript\nfunction foo() {\n  return () => {\n    return () => {\n      return () => {\n        console.log('id:', this.id);\n      };\n    };\n  };\n}\n\nvar f = foo.call({id: 1});\n\nvar t1 = f.call({id: 2})()(); // id: 1\nvar t2 = f().call({id: 3})(); // id: 1\nvar t3 = f()().call({id: 4}); // id: 1\n```\nt1、t2、t3都输出1\n因为箭头函数没有自己的this所以`this.id`会顺着作用域链查找一直找到foo()函数\n\n### 箭头函数的的特点\n\n它没有`arguments`变量\n``` javascript\nfunction foo() {\n  setTimeout(() => {\n    console.log('args:', arguments);\n  }, 100);\n}\n\nfoo(2, 4, 6, 8)\n// args: [2, 4, 6, 8]\n```\n上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。\n\n\n如果有了新发现，会回来补充","slug":"箭头函数的this指向","published":1,"updated":"2018-09-28T02:53:25.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8ki3001fvps6rn5mqgp7","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p> es6的箭头函数非常简洁，而且还可以解决很多问题<br>1.解决以前通过var that=this方式传值的问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">/*window*/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*对body节点操作代码...*/</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>比如点击body，过一段时间对body这个元素进行对应的js操作，如上代码，很明显是不对的，因为<code>setTimeout</code>里的<code>this</code>是全局<code>window</code>所以是不能通过它操作body元素，</p>\n<p>一般这种情况以前都是通过在外层通过一个变量将this传递进来，但是有了箭头函数就不用这么做了</p>\n<p>es6:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">/*body(当前节点)*/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*对body节点操作代码...*/</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这类的问题还有很多，但是为什么<code>箭头函数</code>能轻易地解决这些问题呢？<br>所以要清楚能这么写的原因就要清楚<code>箭头函数中this</code>的指向</p>\n<h3 id=\"一、写箭头函数的小提示\"><a href=\"#一、写箭头函数的小提示\" class=\"headerlink\" title=\"一、写箭头函数的小提示\"></a>一、写箭头函数的小提示</h3><h4 id=\"1-当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。\"><a href=\"#1-当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。\" class=\"headerlink\" title=\"1.当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。\"></a>1.当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*错误*/</span></span><br><span class=\"line\">()=&gt;&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*正确*/</span></span><br><span class=\"line\">()=&gt;(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>因为JavaScript引擎会将{x}理解成一个代码块，空对象和块在这里都是<code>{}</code>这样表示，所以如果返回的是一个对象，需要加一个小括号</p>\n<h3 id=\"箭头函数的this\"><a href=\"#箭头函数的this\" class=\"headerlink\" title=\"箭头函数的this\"></a>箭头函数的<code>this</code></h3><p><code>箭头函数没有自己的this!!!!!!!!!</code>,它内部的this值集成自外围作用域<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'id:'</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = foo.call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> t1 = f.call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>&#125;)()(); <span class=\"comment\">// id: 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t2 = f().call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>&#125;)(); <span class=\"comment\">// id: 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t3 = f()().call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>&#125;); <span class=\"comment\">// id: 1</span></span><br></pre></td></tr></table></figure></p>\n<p>t1、t2、t3都输出1<br>因为箭头函数没有自己的this所以<code>this.id</code>会顺着作用域链查找一直找到foo()函数</p>\n<h3 id=\"箭头函数的的特点\"><a href=\"#箭头函数的的特点\" class=\"headerlink\" title=\"箭头函数的的特点\"></a>箭头函数的的特点</h3><p>它没有<code>arguments</code>变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'args:'</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">// args: [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。</p>\n<p>如果有了新发现，会回来补充</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p> es6的箭头函数非常简洁，而且还可以解决很多问题<br>1.解决以前通过var that=this方式传值的问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">/*window*/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*对body节点操作代码...*/</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>比如点击body，过一段时间对body这个元素进行对应的js操作，如上代码，很明显是不对的，因为<code>setTimeout</code>里的<code>this</code>是全局<code>window</code>所以是不能通过它操作body元素，</p>\n<p>一般这种情况以前都是通过在外层通过一个变量将this传递进来，但是有了箭头函数就不用这么做了</p>\n<p>es6:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">/*body(当前节点)*/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*对body节点操作代码...*/</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>这类的问题还有很多，但是为什么<code>箭头函数</code>能轻易地解决这些问题呢？<br>所以要清楚能这么写的原因就要清楚<code>箭头函数中this</code>的指向</p>\n<h3 id=\"一、写箭头函数的小提示\"><a href=\"#一、写箭头函数的小提示\" class=\"headerlink\" title=\"一、写箭头函数的小提示\"></a>一、写箭头函数的小提示</h3><h4 id=\"1-当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。\"><a href=\"#1-当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。\" class=\"headerlink\" title=\"1.当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。\"></a>1.当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*错误*/</span></span><br><span class=\"line\">()=&gt;&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*正确*/</span></span><br><span class=\"line\">()=&gt;(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>因为JavaScript引擎会将{x}理解成一个代码块，空对象和块在这里都是<code>{}</code>这样表示，所以如果返回的是一个对象，需要加一个小括号</p>\n<h3 id=\"箭头函数的this\"><a href=\"#箭头函数的this\" class=\"headerlink\" title=\"箭头函数的this\"></a>箭头函数的<code>this</code></h3><p><code>箭头函数没有自己的this!!!!!!!!!</code>,它内部的this值集成自外围作用域<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'id:'</span>, <span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = foo.call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> t1 = f.call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>&#125;)()(); <span class=\"comment\">// id: 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t2 = f().call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>&#125;)(); <span class=\"comment\">// id: 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t3 = f()().call(&#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>&#125;); <span class=\"comment\">// id: 1</span></span><br></pre></td></tr></table></figure></p>\n<p>t1、t2、t3都输出1<br>因为箭头函数没有自己的this所以<code>this.id</code>会顺着作用域链查找一直找到foo()函数</p>\n<h3 id=\"箭头函数的的特点\"><a href=\"#箭头函数的的特点\" class=\"headerlink\" title=\"箭头函数的的特点\"></a>箭头函数的的特点</h3><p>它没有<code>arguments</code>变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'args:'</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">// args: [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。</p>\n<p>如果有了新发现，会回来补充</p>\n"},{"title":"认识pushstate、popstate,无刷新改变URL","date":"2017-09-22T06:39:04.000Z","_content":"\n# 一、回顾 `window.history`\n`history`对象包含用户（在浏览器窗口中）访问过的url\n``` javascript\n//回退\nhistory.back();\n//前进\nhistory.forward();\n//跳转\nhistory.go();\n//历史记录条数（当前网页的，不是浏览器的）\nhistory.length\n//状态\nhistory.state\n```\n# 二、认识新特性\nHTML5扩展了`history`,使历史记录更加灵活，可以在历史记录中存储指定记录点、替换当前历史记录点，监听历史记录点\n\n## 2.1.存储历史记录点\n``` javascript\nwindow.history.pushState('新添加的','','?page=3');\n// 第一个参数：设置state\n// 第二个参数：页面标题，但是所有浏览器都忽略了，传空字符串就行\n// 第三个删除：想要添加的链接\n\n//`注意，这个api会改变当前的网址，会添加一条历史记录，不是push到后面，这样会添加一条历史`\n```\n执行后，页面的URL为当前url？page=3\n![执行前](/images/认识pushstate、popstate-无刷新改变URL/1.png)\n![执行后](/images/认识pushstate、popstate-无刷新改变URL/2.png)\n此时的`history.length`也会+1，新增了历史记录点\n\n## 2.2.替换历史记录点\n``` javascript\nwindow.history.replaceState('新添加的','','?page=3');\n\n//`注意，这个api会改变当前的网址(不跳转)，不会添加一条历史记录，注意与上面pushState区别`\n\n> 补充：location.replace()也是替换当前网址，但是页面会跳转，而且不会添加历史记录\n```\n区别：\n1.history.length不会变\n2.替换了当前页的历史记录点\n\n## 2.3.监听历史记录点\n``` javascript\nwindow.onpopstate=function(){}\n```\n浏览器前进后退都会触发这个事件\n比如可以这样：\n``` javascript\nwindow.onpopstate=function(event){\n    console.log(event.state)\n}\n```\n后退操作时，就会打印出后退到的历史记录点的state信息。\n\n# 四、用途\n在我写`react`饿了么的项目时，点击首页的定位信息，会从右滑动出一个新的页面，此时再通过浏览器的前进后退按钮也可以实现页面的滑动\n![浏览器控制动画](/images/认识pushstate、popstate-无刷新改变URL/3.gif)\n具体制作过程看我的github：[ele项目](https://github.com/YMBo/react-ele) \n\n# 五、补充\n在用 `document.referrer` 做返回按钮的时候，是只有 `a标签` 才能添加一条来源的。\n比如我通过点击页面的一个 `链接` 调到了对应的页面，那么此时 `document.referrer` 是有值的，通过 `history.pushState` 添加的历史记录跳转的页面,不会添加一条 `document.referrer` 来源 ","source":"_posts/认识pushstate、popstate-无刷新改变URL.md","raw":"---\ntitle: '认识pushstate、popstate,无刷新改变URL'\ndate: 2017-09-22 14:39:04\ntags: HTML5\n---\n\n# 一、回顾 `window.history`\n`history`对象包含用户（在浏览器窗口中）访问过的url\n``` javascript\n//回退\nhistory.back();\n//前进\nhistory.forward();\n//跳转\nhistory.go();\n//历史记录条数（当前网页的，不是浏览器的）\nhistory.length\n//状态\nhistory.state\n```\n# 二、认识新特性\nHTML5扩展了`history`,使历史记录更加灵活，可以在历史记录中存储指定记录点、替换当前历史记录点，监听历史记录点\n\n## 2.1.存储历史记录点\n``` javascript\nwindow.history.pushState('新添加的','','?page=3');\n// 第一个参数：设置state\n// 第二个参数：页面标题，但是所有浏览器都忽略了，传空字符串就行\n// 第三个删除：想要添加的链接\n\n//`注意，这个api会改变当前的网址，会添加一条历史记录，不是push到后面，这样会添加一条历史`\n```\n执行后，页面的URL为当前url？page=3\n![执行前](/images/认识pushstate、popstate-无刷新改变URL/1.png)\n![执行后](/images/认识pushstate、popstate-无刷新改变URL/2.png)\n此时的`history.length`也会+1，新增了历史记录点\n\n## 2.2.替换历史记录点\n``` javascript\nwindow.history.replaceState('新添加的','','?page=3');\n\n//`注意，这个api会改变当前的网址(不跳转)，不会添加一条历史记录，注意与上面pushState区别`\n\n> 补充：location.replace()也是替换当前网址，但是页面会跳转，而且不会添加历史记录\n```\n区别：\n1.history.length不会变\n2.替换了当前页的历史记录点\n\n## 2.3.监听历史记录点\n``` javascript\nwindow.onpopstate=function(){}\n```\n浏览器前进后退都会触发这个事件\n比如可以这样：\n``` javascript\nwindow.onpopstate=function(event){\n    console.log(event.state)\n}\n```\n后退操作时，就会打印出后退到的历史记录点的state信息。\n\n# 四、用途\n在我写`react`饿了么的项目时，点击首页的定位信息，会从右滑动出一个新的页面，此时再通过浏览器的前进后退按钮也可以实现页面的滑动\n![浏览器控制动画](/images/认识pushstate、popstate-无刷新改变URL/3.gif)\n具体制作过程看我的github：[ele项目](https://github.com/YMBo/react-ele) \n\n# 五、补充\n在用 `document.referrer` 做返回按钮的时候，是只有 `a标签` 才能添加一条来源的。\n比如我通过点击页面的一个 `链接` 调到了对应的页面，那么此时 `document.referrer` 是有值的，通过 `history.pushState` 添加的历史记录跳转的页面,不会添加一条 `document.referrer` 来源 ","slug":"认识pushstate、popstate-无刷新改变URL","published":1,"updated":"2018-09-28T02:53:25.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8ki5001ivps6vai5awin","content":"<h1 id=\"一、回顾-window-history\"><a href=\"#一、回顾-window-history\" class=\"headerlink\" title=\"一、回顾 window.history\"></a>一、回顾 <code>window.history</code></h1><p><code>history</code>对象包含用户（在浏览器窗口中）访问过的url<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//回退</span></span><br><span class=\"line\">history.back();</span><br><span class=\"line\"><span class=\"comment\">//前进</span></span><br><span class=\"line\">history.forward();</span><br><span class=\"line\"><span class=\"comment\">//跳转</span></span><br><span class=\"line\">history.go();</span><br><span class=\"line\"><span class=\"comment\">//历史记录条数（当前网页的，不是浏览器的）</span></span><br><span class=\"line\">history.length</span><br><span class=\"line\"><span class=\"comment\">//状态</span></span><br><span class=\"line\">history.state</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二、认识新特性\"><a href=\"#二、认识新特性\" class=\"headerlink\" title=\"二、认识新特性\"></a>二、认识新特性</h1><p>HTML5扩展了<code>history</code>,使历史记录更加灵活，可以在历史记录中存储指定记录点、替换当前历史记录点，监听历史记录点</p>\n<h2 id=\"2-1-存储历史记录点\"><a href=\"#2-1-存储历史记录点\" class=\"headerlink\" title=\"2.1.存储历史记录点\"></a>2.1.存储历史记录点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"string\">'新添加的'</span>,<span class=\"string\">''</span>,<span class=\"string\">'?page=3'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 第一个参数：设置state</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数：页面标题，但是所有浏览器都忽略了，传空字符串就行</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个删除：想要添加的链接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//`注意，这个api会改变当前的网址，会添加一条历史记录，不是push到后面，这样会添加一条历史`</span></span><br></pre></td></tr></table></figure>\n<p>执行后，页面的URL为当前url？page=3<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/认识pushstate、popstate-无刷新改变URL/1.png\" alt=\"执行前\" title=\"\">\n                </div>\n                <div class=\"image-caption\">执行前</div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/认识pushstate、popstate-无刷新改变URL/2.png\" alt=\"执行后\" title=\"\">\n                </div>\n                <div class=\"image-caption\">执行后</div>\n            </figure><br>此时的<code>history.length</code>也会+1，新增了历史记录点</p>\n<h2 id=\"2-2-替换历史记录点\"><a href=\"#2-2-替换历史记录点\" class=\"headerlink\" title=\"2.2.替换历史记录点\"></a>2.2.替换历史记录点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.replaceState(<span class=\"string\">'新添加的'</span>,<span class=\"string\">''</span>,<span class=\"string\">'?page=3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//`注意，这个api会改变当前的网址(不跳转)，不会添加一条历史记录，注意与上面pushState区别`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 补充：location.replace()也是替换当前网址，但是页面会跳转，而且不会添加历史记录</span><br></pre></td></tr></table></figure>\n<p>区别：<br>1.history.length不会变<br>2.替换了当前页的历史记录点</p>\n<h2 id=\"2-3-监听历史记录点\"><a href=\"#2-3-监听历史记录点\" class=\"headerlink\" title=\"2.3.监听历史记录点\"></a>2.3.监听历史记录点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onpopstate=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>浏览器前进后退都会触发这个事件<br>比如可以这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onpopstate=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.state)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>后退操作时，就会打印出后退到的历史记录点的state信息。</p>\n<h1 id=\"四、用途\"><a href=\"#四、用途\" class=\"headerlink\" title=\"四、用途\"></a>四、用途</h1><p>在我写<code>react</code>饿了么的项目时，点击首页的定位信息，会从右滑动出一个新的页面，此时再通过浏览器的前进后退按钮也可以实现页面的滑动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/认识pushstate、popstate-无刷新改变URL/3.gif\" alt=\"浏览器控制动画\" title=\"\">\n                </div>\n                <div class=\"image-caption\">浏览器控制动画</div>\n            </figure><br>具体制作过程看我的github：<a href=\"https://github.com/YMBo/react-ele\" target=\"_blank\" rel=\"noopener\">ele项目</a> </p>\n<h1 id=\"五、补充\"><a href=\"#五、补充\" class=\"headerlink\" title=\"五、补充\"></a>五、补充</h1><p>在用 <code>document.referrer</code> 做返回按钮的时候，是只有 <code>a标签</code> 才能添加一条来源的。<br>比如我通过点击页面的一个 <code>链接</code> 调到了对应的页面，那么此时 <code>document.referrer</code> 是有值的，通过 <code>history.pushState</code> 添加的历史记录跳转的页面,不会添加一条 <code>document.referrer</code> 来源 </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、回顾-window-history\"><a href=\"#一、回顾-window-history\" class=\"headerlink\" title=\"一、回顾 window.history\"></a>一、回顾 <code>window.history</code></h1><p><code>history</code>对象包含用户（在浏览器窗口中）访问过的url<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//回退</span></span><br><span class=\"line\">history.back();</span><br><span class=\"line\"><span class=\"comment\">//前进</span></span><br><span class=\"line\">history.forward();</span><br><span class=\"line\"><span class=\"comment\">//跳转</span></span><br><span class=\"line\">history.go();</span><br><span class=\"line\"><span class=\"comment\">//历史记录条数（当前网页的，不是浏览器的）</span></span><br><span class=\"line\">history.length</span><br><span class=\"line\"><span class=\"comment\">//状态</span></span><br><span class=\"line\">history.state</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二、认识新特性\"><a href=\"#二、认识新特性\" class=\"headerlink\" title=\"二、认识新特性\"></a>二、认识新特性</h1><p>HTML5扩展了<code>history</code>,使历史记录更加灵活，可以在历史记录中存储指定记录点、替换当前历史记录点，监听历史记录点</p>\n<h2 id=\"2-1-存储历史记录点\"><a href=\"#2-1-存储历史记录点\" class=\"headerlink\" title=\"2.1.存储历史记录点\"></a>2.1.存储历史记录点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"string\">'新添加的'</span>,<span class=\"string\">''</span>,<span class=\"string\">'?page=3'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 第一个参数：设置state</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数：页面标题，但是所有浏览器都忽略了，传空字符串就行</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个删除：想要添加的链接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//`注意，这个api会改变当前的网址，会添加一条历史记录，不是push到后面，这样会添加一条历史`</span></span><br></pre></td></tr></table></figure>\n<p>执行后，页面的URL为当前url？page=3<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/认识pushstate、popstate-无刷新改变URL/1.png\" alt=\"执行前\" title=\"\">\n                </div>\n                <div class=\"image-caption\">执行前</div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/认识pushstate、popstate-无刷新改变URL/2.png\" alt=\"执行后\" title=\"\">\n                </div>\n                <div class=\"image-caption\">执行后</div>\n            </figure><br>此时的<code>history.length</code>也会+1，新增了历史记录点</p>\n<h2 id=\"2-2-替换历史记录点\"><a href=\"#2-2-替换历史记录点\" class=\"headerlink\" title=\"2.2.替换历史记录点\"></a>2.2.替换历史记录点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.replaceState(<span class=\"string\">'新添加的'</span>,<span class=\"string\">''</span>,<span class=\"string\">'?page=3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//`注意，这个api会改变当前的网址(不跳转)，不会添加一条历史记录，注意与上面pushState区别`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 补充：location.replace()也是替换当前网址，但是页面会跳转，而且不会添加历史记录</span><br></pre></td></tr></table></figure>\n<p>区别：<br>1.history.length不会变<br>2.替换了当前页的历史记录点</p>\n<h2 id=\"2-3-监听历史记录点\"><a href=\"#2-3-监听历史记录点\" class=\"headerlink\" title=\"2.3.监听历史记录点\"></a>2.3.监听历史记录点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onpopstate=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>浏览器前进后退都会触发这个事件<br>比如可以这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onpopstate=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event.state)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>后退操作时，就会打印出后退到的历史记录点的state信息。</p>\n<h1 id=\"四、用途\"><a href=\"#四、用途\" class=\"headerlink\" title=\"四、用途\"></a>四、用途</h1><p>在我写<code>react</code>饿了么的项目时，点击首页的定位信息，会从右滑动出一个新的页面，此时再通过浏览器的前进后退按钮也可以实现页面的滑动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/认识pushstate、popstate-无刷新改变URL/3.gif\" alt=\"浏览器控制动画\" title=\"\">\n                </div>\n                <div class=\"image-caption\">浏览器控制动画</div>\n            </figure><br>具体制作过程看我的github：<a href=\"https://github.com/YMBo/react-ele\" target=\"_blank\" rel=\"noopener\">ele项目</a> </p>\n<h1 id=\"五、补充\"><a href=\"#五、补充\" class=\"headerlink\" title=\"五、补充\"></a>五、补充</h1><p>在用 <code>document.referrer</code> 做返回按钮的时候，是只有 <code>a标签</code> 才能添加一条来源的。<br>比如我通过点击页面的一个 <code>链接</code> 调到了对应的页面，那么此时 <code>document.referrer</code> 是有值的，通过 <code>history.pushState</code> 添加的历史记录跳转的页面,不会添加一条 <code>document.referrer</code> 来源 </p>\n"},{"title":"身份认证-jwt","date":"2018-09-27T12:39:51.000Z","_content":"### 一、jwt简介\n关于jwt的概念网上有很多非常好的博客讲解，在这里就不解释了，看下面内容之前最好对jwt有个大致的了解。这里讲的是前后台怎么利用jwt进行身份验证。（react+axios+node）\n\n### 二、基本逻辑\n#### 1. 后台逻辑\n前台 `/login` 路由进入后，在账号密码正确的前提下创建一个 token(附带上过期时间等)，返回给前台，后续前台的每次请求，都需要经过后台的一个中间件来判断 token是否过期或者有误，如果有误，返回错误信息\n\n#### 2. 前台逻辑\n前台收到返回信息后，将token存储在localStorage或者cookie里，然后后续的每次的请求带上这个token\n\n#### 3.附加\n其实除了每次的请求要附带token检查有效之外，还需要在路由跳转的时候进行token检查，下面会说到三种方法\n\n\n### 三、 后台代码\n所使用的包：\n* express-jwt                  //用来验证token\n* jsonwebtoken              //用来生成token给客户端\n\n当/login进入的时候，生成token返回\n``` javascript\n//jwt.sign(payload, secretOrPrivateKey, [options, callback])\n// 登录\nexports.login = function(req, res) {\n    const { user, pwd } = req.body;\n    UserModel.findOne({ user: user, pwd: utility.md5(md5Pwd(pwd)) }, { pwd: 0 }, (err, doc) => {\n        if (err) {\n            console.log(err)\n            return res.json({\n                code: 1,\n                msg: '未知错误'\n            })\n        }\n        if (!doc) {\n            return res.json({\n                code: 1,\n                msg: '用户不存在或密码错误'\n            })\n        }\n        // 生成token\n        // secretOrPrivateKey：用\"YMBo's club\"字符串加密\n        let token = jwt.sign({\n            name: 'job',\n        }, \"YMBo's club\", {\n            expiresIn: 1 * 60       //过期时间1分钟\n        })\n        return res.json({ code: 0, data: doc, token })\n    })\n}\n```\n![/login后返回信息](/images/身份认证-jwt/1.jpeg)\n\n每次有路由请求的时候对token判断是否过期\n添加一个中间件：\n``` javascript\nconst expressJWT = require('express-jwt')\nconst secret = \"ymb's club\"\n\napp.set(secret, secret)\n\n// jwt验证\napp.use(expressJWT({\n    secret: secret\n}, {\n    expiresIn: 60\n}).unless({ path: ['/user/login'] }))\n\n// jwt验证,如果有错误（token不对，过期等错误）\napp.use(function(err, req, res, next) {\n    if (err.name === \"UnauthorizedError\") {\n        res.status(401).send({\n            code: 1,\n            msg: '请登录'\n        });\n    }\n});\n\napp.use(bodyParser.json())\napp.use('/user', userRouter)\n```\n\n> 这里有一个关键点，当使用`express-jwt`进行token验证的时候，前台发过来的token必须是带 **Bearer**前缀的，比如token是\n>aaa.bbb.ccc，那么应该格式化为 **Bearer aaa.bbb.ccc** 这种形式\n\n\n### 四、 前台代码\n``` javascript\n// setLocalStorage是自定义的方法，存储token\nsetLocalStorage('Authorization', `Bearer ${ res.data.token }`)\n// 后台返回正确信息后 将token 存储在localStorage里\n```\n在项目的总入口或者次级入口加上这个，意思是后续的每一次axios请求都将携带`Authorization`信息\n``` javascript\naxios.defaults.headers.common['Authorization'] = getLocalStorage('Authorization');\n```\n\n### 五、验证token\n\n#### 1. 第一种方法\n上面说了后台添加中间件 `express-jwt` 来验证，网上的好多教程说的是通过一个单独的路由 /info，每次请求的时候先请求这个路由是否过期等，但是我觉得这种方法太浪费了，何必每次请求都要发送这个 /info这个验证请求呢\n\n#### 2. 第二种方法\n``` javascript\njwt.decode（token [，options]） \n//解密，注意了之前存储到localStorage里的token是带 Bearer 要把它去掉进行解密。\n//返回解码没有验证签名是否有效的payload。警告：这不会验证签名是否有效。它只是返回后端设置的payload\n// 特点：不用secretOrPrivateKey进行解密\n```\n前台的顶层路由（就是进别的路由都要经过的路由）进行判断，怎么判断呢？\n用 **jsonwebtoken** 这个包(上面用到过) 进行解密，然后取出设定的 `expiresIn` 过期时间，然后取到本地时间戳，与这个进行判断，看是否过期。\n\n#### 3. 第三种方法\n``` javascript\njwt.verify（token，secretOrPublicKey，[options，callback]）\n//验证token合法性\n\n// 去掉了Bearer \nlet token = getLocalStorage('Authorization').replace(/Bearer\\s/, '');\njwt.verify(token, \"ymb's club\", (err, decoded) => {\n    if (err) {\n        alert('过期了快去登录')\n        this.props.history.push('/login')\n    }\n})\n//如果token没用了 直接返回err\n//用到了secretOrPrivateKey：用\"YMBo's club\"字符串解密，注意这个字段一定要和后台那个加密字段一致，否则它一致err\n```\n\n### 六、效果查看\n过期时间我设置的1分钟，为了方便调试\n\n**/login 返回token成功**\n![返回token成功](/images/身份认证-jwt/show.gif)\n\n**后台express-jwt验证token成功**\n![后台express-jwt验证token成功](/images/身份认证-jwt/show2.gif)\n\n**路由跳转前验证token成功**\n![路由跳转前验证token成功](/images/身份认证-jwt/show3.gif)","source":"_posts/身份认证-jwt.md","raw":"---\ntitle: 身份认证-jwt\ndate: 2018-09-27 20:39:51\ntags:\n---\n### 一、jwt简介\n关于jwt的概念网上有很多非常好的博客讲解，在这里就不解释了，看下面内容之前最好对jwt有个大致的了解。这里讲的是前后台怎么利用jwt进行身份验证。（react+axios+node）\n\n### 二、基本逻辑\n#### 1. 后台逻辑\n前台 `/login` 路由进入后，在账号密码正确的前提下创建一个 token(附带上过期时间等)，返回给前台，后续前台的每次请求，都需要经过后台的一个中间件来判断 token是否过期或者有误，如果有误，返回错误信息\n\n#### 2. 前台逻辑\n前台收到返回信息后，将token存储在localStorage或者cookie里，然后后续的每次的请求带上这个token\n\n#### 3.附加\n其实除了每次的请求要附带token检查有效之外，还需要在路由跳转的时候进行token检查，下面会说到三种方法\n\n\n### 三、 后台代码\n所使用的包：\n* express-jwt                  //用来验证token\n* jsonwebtoken              //用来生成token给客户端\n\n当/login进入的时候，生成token返回\n``` javascript\n//jwt.sign(payload, secretOrPrivateKey, [options, callback])\n// 登录\nexports.login = function(req, res) {\n    const { user, pwd } = req.body;\n    UserModel.findOne({ user: user, pwd: utility.md5(md5Pwd(pwd)) }, { pwd: 0 }, (err, doc) => {\n        if (err) {\n            console.log(err)\n            return res.json({\n                code: 1,\n                msg: '未知错误'\n            })\n        }\n        if (!doc) {\n            return res.json({\n                code: 1,\n                msg: '用户不存在或密码错误'\n            })\n        }\n        // 生成token\n        // secretOrPrivateKey：用\"YMBo's club\"字符串加密\n        let token = jwt.sign({\n            name: 'job',\n        }, \"YMBo's club\", {\n            expiresIn: 1 * 60       //过期时间1分钟\n        })\n        return res.json({ code: 0, data: doc, token })\n    })\n}\n```\n![/login后返回信息](/images/身份认证-jwt/1.jpeg)\n\n每次有路由请求的时候对token判断是否过期\n添加一个中间件：\n``` javascript\nconst expressJWT = require('express-jwt')\nconst secret = \"ymb's club\"\n\napp.set(secret, secret)\n\n// jwt验证\napp.use(expressJWT({\n    secret: secret\n}, {\n    expiresIn: 60\n}).unless({ path: ['/user/login'] }))\n\n// jwt验证,如果有错误（token不对，过期等错误）\napp.use(function(err, req, res, next) {\n    if (err.name === \"UnauthorizedError\") {\n        res.status(401).send({\n            code: 1,\n            msg: '请登录'\n        });\n    }\n});\n\napp.use(bodyParser.json())\napp.use('/user', userRouter)\n```\n\n> 这里有一个关键点，当使用`express-jwt`进行token验证的时候，前台发过来的token必须是带 **Bearer**前缀的，比如token是\n>aaa.bbb.ccc，那么应该格式化为 **Bearer aaa.bbb.ccc** 这种形式\n\n\n### 四、 前台代码\n``` javascript\n// setLocalStorage是自定义的方法，存储token\nsetLocalStorage('Authorization', `Bearer ${ res.data.token }`)\n// 后台返回正确信息后 将token 存储在localStorage里\n```\n在项目的总入口或者次级入口加上这个，意思是后续的每一次axios请求都将携带`Authorization`信息\n``` javascript\naxios.defaults.headers.common['Authorization'] = getLocalStorage('Authorization');\n```\n\n### 五、验证token\n\n#### 1. 第一种方法\n上面说了后台添加中间件 `express-jwt` 来验证，网上的好多教程说的是通过一个单独的路由 /info，每次请求的时候先请求这个路由是否过期等，但是我觉得这种方法太浪费了，何必每次请求都要发送这个 /info这个验证请求呢\n\n#### 2. 第二种方法\n``` javascript\njwt.decode（token [，options]） \n//解密，注意了之前存储到localStorage里的token是带 Bearer 要把它去掉进行解密。\n//返回解码没有验证签名是否有效的payload。警告：这不会验证签名是否有效。它只是返回后端设置的payload\n// 特点：不用secretOrPrivateKey进行解密\n```\n前台的顶层路由（就是进别的路由都要经过的路由）进行判断，怎么判断呢？\n用 **jsonwebtoken** 这个包(上面用到过) 进行解密，然后取出设定的 `expiresIn` 过期时间，然后取到本地时间戳，与这个进行判断，看是否过期。\n\n#### 3. 第三种方法\n``` javascript\njwt.verify（token，secretOrPublicKey，[options，callback]）\n//验证token合法性\n\n// 去掉了Bearer \nlet token = getLocalStorage('Authorization').replace(/Bearer\\s/, '');\njwt.verify(token, \"ymb's club\", (err, decoded) => {\n    if (err) {\n        alert('过期了快去登录')\n        this.props.history.push('/login')\n    }\n})\n//如果token没用了 直接返回err\n//用到了secretOrPrivateKey：用\"YMBo's club\"字符串解密，注意这个字段一定要和后台那个加密字段一致，否则它一致err\n```\n\n### 六、效果查看\n过期时间我设置的1分钟，为了方便调试\n\n**/login 返回token成功**\n![返回token成功](/images/身份认证-jwt/show.gif)\n\n**后台express-jwt验证token成功**\n![后台express-jwt验证token成功](/images/身份认证-jwt/show2.gif)\n\n**路由跳转前验证token成功**\n![路由跳转前验证token成功](/images/身份认证-jwt/show3.gif)","slug":"身份认证-jwt","published":1,"updated":"2018-09-28T02:53:25.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmlf8ki6001kvps62abbuc5h","content":"<h3 id=\"一、jwt简介\"><a href=\"#一、jwt简介\" class=\"headerlink\" title=\"一、jwt简介\"></a>一、jwt简介</h3><p>关于jwt的概念网上有很多非常好的博客讲解，在这里就不解释了，看下面内容之前最好对jwt有个大致的了解。这里讲的是前后台怎么利用jwt进行身份验证。（react+axios+node）</p>\n<h3 id=\"二、基本逻辑\"><a href=\"#二、基本逻辑\" class=\"headerlink\" title=\"二、基本逻辑\"></a>二、基本逻辑</h3><h4 id=\"1-后台逻辑\"><a href=\"#1-后台逻辑\" class=\"headerlink\" title=\"1. 后台逻辑\"></a>1. 后台逻辑</h4><p>前台 <code>/login</code> 路由进入后，在账号密码正确的前提下创建一个 token(附带上过期时间等)，返回给前台，后续前台的每次请求，都需要经过后台的一个中间件来判断 token是否过期或者有误，如果有误，返回错误信息</p>\n<h4 id=\"2-前台逻辑\"><a href=\"#2-前台逻辑\" class=\"headerlink\" title=\"2. 前台逻辑\"></a>2. 前台逻辑</h4><p>前台收到返回信息后，将token存储在localStorage或者cookie里，然后后续的每次的请求带上这个token</p>\n<h4 id=\"3-附加\"><a href=\"#3-附加\" class=\"headerlink\" title=\"3.附加\"></a>3.附加</h4><p>其实除了每次的请求要附带token检查有效之外，还需要在路由跳转的时候进行token检查，下面会说到三种方法</p>\n<h3 id=\"三、-后台代码\"><a href=\"#三、-后台代码\" class=\"headerlink\" title=\"三、 后台代码\"></a>三、 后台代码</h3><p>所使用的包：</p>\n<ul>\n<li>express-jwt                  //用来验证token</li>\n<li>jsonwebtoken              //用来生成token给客户端</li>\n</ul>\n<p>当/login进入的时候，生成token返回<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jwt.sign(payload, secretOrPrivateKey, [options, callback])</span></span><br><span class=\"line\"><span class=\"comment\">// 登录</span></span><br><span class=\"line\">exports.login = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; user, pwd &#125; = req.body;</span><br><span class=\"line\">    UserModel.findOne(&#123; <span class=\"attr\">user</span>: user, <span class=\"attr\">pwd</span>: utility.md5(md5Pwd(pwd)) &#125;, &#123; <span class=\"attr\">pwd</span>: <span class=\"number\">0</span> &#125;, (err, doc) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">1</span>,</span><br><span class=\"line\">                msg: <span class=\"string\">'未知错误'</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!doc) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">1</span>,</span><br><span class=\"line\">                msg: <span class=\"string\">'用户不存在或密码错误'</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 生成token</span></span><br><span class=\"line\">        <span class=\"comment\">// secretOrPrivateKey：用\"YMBo's club\"字符串加密</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> token = jwt.sign(&#123;</span><br><span class=\"line\">            name: <span class=\"string\">'job'</span>,</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"YMBo's club\"</span>, &#123;</span><br><span class=\"line\">            expiresIn: <span class=\"number\">1</span> * <span class=\"number\">60</span>       <span class=\"comment\">//过期时间1分钟</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(&#123; <span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: doc, token &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/身份认证-jwt/1.jpeg\" alt=\"/login后返回信息\" title=\"\">\n                </div>\n                <div class=\"image-caption\">/login后返回信息</div>\n            </figure>\n<p>每次有路由请求的时候对token判断是否过期<br>添加一个中间件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> expressJWT = <span class=\"built_in\">require</span>(<span class=\"string\">'express-jwt'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"string\">\"ymb's club\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.set(secret, secret)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jwt验证</span></span><br><span class=\"line\">app.use(expressJWT(&#123;</span><br><span class=\"line\">    secret: secret</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    expiresIn: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;).unless(&#123; <span class=\"attr\">path</span>: [<span class=\"string\">'/user/login'</span>] &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jwt验证,如果有错误（token不对，过期等错误）</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err.name === <span class=\"string\">\"UnauthorizedError\"</span>) &#123;</span><br><span class=\"line\">        res.status(<span class=\"number\">401</span>).send(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">1</span>,</span><br><span class=\"line\">            msg: <span class=\"string\">'请登录'</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json())</span><br><span class=\"line\">app.use(<span class=\"string\">'/user'</span>, userRouter)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里有一个关键点，当使用<code>express-jwt</code>进行token验证的时候，前台发过来的token必须是带 <strong>Bearer</strong>前缀的，比如token是<br>aaa.bbb.ccc，那么应该格式化为 <strong>Bearer aaa.bbb.ccc</strong> 这种形式</p>\n</blockquote>\n<h3 id=\"四、-前台代码\"><a href=\"#四、-前台代码\" class=\"headerlink\" title=\"四、 前台代码\"></a>四、 前台代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setLocalStorage是自定义的方法，存储token</span></span><br><span class=\"line\">setLocalStorage(<span class=\"string\">'Authorization'</span>, <span class=\"string\">`Bearer <span class=\"subst\">$&#123; res.data.token &#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"comment\">// 后台返回正确信息后 将token 存储在localStorage里</span></span><br></pre></td></tr></table></figure>\n<p>在项目的总入口或者次级入口加上这个，意思是后续的每一次axios请求都将携带<code>Authorization</code>信息<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = getLocalStorage(<span class=\"string\">'Authorization'</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"五、验证token\"><a href=\"#五、验证token\" class=\"headerlink\" title=\"五、验证token\"></a>五、验证token</h3><h4 id=\"1-第一种方法\"><a href=\"#1-第一种方法\" class=\"headerlink\" title=\"1. 第一种方法\"></a>1. 第一种方法</h4><p>上面说了后台添加中间件 <code>express-jwt</code> 来验证，网上的好多教程说的是通过一个单独的路由 /info，每次请求的时候先请求这个路由是否过期等，但是我觉得这种方法太浪费了，何必每次请求都要发送这个 /info这个验证请求呢</p>\n<h4 id=\"2-第二种方法\"><a href=\"#2-第二种方法\" class=\"headerlink\" title=\"2. 第二种方法\"></a>2. 第二种方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jwt.decode（token [，options]） </span><br><span class=\"line\"><span class=\"comment\">//解密，注意了之前存储到localStorage里的token是带 Bearer 要把它去掉进行解密。</span></span><br><span class=\"line\"><span class=\"comment\">//返回解码没有验证签名是否有效的payload。警告：这不会验证签名是否有效。它只是返回后端设置的payload</span></span><br><span class=\"line\"><span class=\"comment\">// 特点：不用secretOrPrivateKey进行解密</span></span><br></pre></td></tr></table></figure>\n<p>前台的顶层路由（就是进别的路由都要经过的路由）进行判断，怎么判断呢？<br>用 <strong>jsonwebtoken</strong> 这个包(上面用到过) 进行解密，然后取出设定的 <code>expiresIn</code> 过期时间，然后取到本地时间戳，与这个进行判断，看是否过期。</p>\n<h4 id=\"3-第三种方法\"><a href=\"#3-第三种方法\" class=\"headerlink\" title=\"3. 第三种方法\"></a>3. 第三种方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jwt.verify（token，secretOrPublicKey，[options，callback]）</span><br><span class=\"line\"><span class=\"comment\">//验证token合法性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去掉了Bearer </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> token = getLocalStorage(<span class=\"string\">'Authorization'</span>).replace(<span class=\"regexp\">/Bearer\\s/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">jwt.verify(token, <span class=\"string\">\"ymb's club\"</span>, (err, decoded) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'过期了快去登录'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.history.push(<span class=\"string\">'/login'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//如果token没用了 直接返回err</span></span><br><span class=\"line\"><span class=\"comment\">//用到了secretOrPrivateKey：用\"YMBo's club\"字符串解密，注意这个字段一定要和后台那个加密字段一致，否则它一致err</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"六、效果查看\"><a href=\"#六、效果查看\" class=\"headerlink\" title=\"六、效果查看\"></a>六、效果查看</h3><p>过期时间我设置的1分钟，为了方便调试</p>\n<p><strong>/login 返回token成功</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/身份认证-jwt/show.gif\" alt=\"返回token成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">返回token成功</div>\n            </figure></p>\n<p><strong>后台express-jwt验证token成功</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/身份认证-jwt/show2.gif\" alt=\"后台express-jwt验证token成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">后台express-jwt验证token成功</div>\n            </figure></p>\n<p><strong>路由跳转前验证token成功</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/身份认证-jwt/show3.gif\" alt=\"路由跳转前验证token成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">路由跳转前验证token成功</div>\n            </figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、jwt简介\"><a href=\"#一、jwt简介\" class=\"headerlink\" title=\"一、jwt简介\"></a>一、jwt简介</h3><p>关于jwt的概念网上有很多非常好的博客讲解，在这里就不解释了，看下面内容之前最好对jwt有个大致的了解。这里讲的是前后台怎么利用jwt进行身份验证。（react+axios+node）</p>\n<h3 id=\"二、基本逻辑\"><a href=\"#二、基本逻辑\" class=\"headerlink\" title=\"二、基本逻辑\"></a>二、基本逻辑</h3><h4 id=\"1-后台逻辑\"><a href=\"#1-后台逻辑\" class=\"headerlink\" title=\"1. 后台逻辑\"></a>1. 后台逻辑</h4><p>前台 <code>/login</code> 路由进入后，在账号密码正确的前提下创建一个 token(附带上过期时间等)，返回给前台，后续前台的每次请求，都需要经过后台的一个中间件来判断 token是否过期或者有误，如果有误，返回错误信息</p>\n<h4 id=\"2-前台逻辑\"><a href=\"#2-前台逻辑\" class=\"headerlink\" title=\"2. 前台逻辑\"></a>2. 前台逻辑</h4><p>前台收到返回信息后，将token存储在localStorage或者cookie里，然后后续的每次的请求带上这个token</p>\n<h4 id=\"3-附加\"><a href=\"#3-附加\" class=\"headerlink\" title=\"3.附加\"></a>3.附加</h4><p>其实除了每次的请求要附带token检查有效之外，还需要在路由跳转的时候进行token检查，下面会说到三种方法</p>\n<h3 id=\"三、-后台代码\"><a href=\"#三、-后台代码\" class=\"headerlink\" title=\"三、 后台代码\"></a>三、 后台代码</h3><p>所使用的包：</p>\n<ul>\n<li>express-jwt                  //用来验证token</li>\n<li>jsonwebtoken              //用来生成token给客户端</li>\n</ul>\n<p>当/login进入的时候，生成token返回<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jwt.sign(payload, secretOrPrivateKey, [options, callback])</span></span><br><span class=\"line\"><span class=\"comment\">// 登录</span></span><br><span class=\"line\">exports.login = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; user, pwd &#125; = req.body;</span><br><span class=\"line\">    UserModel.findOne(&#123; <span class=\"attr\">user</span>: user, <span class=\"attr\">pwd</span>: utility.md5(md5Pwd(pwd)) &#125;, &#123; <span class=\"attr\">pwd</span>: <span class=\"number\">0</span> &#125;, (err, doc) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">1</span>,</span><br><span class=\"line\">                msg: <span class=\"string\">'未知错误'</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!doc) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">1</span>,</span><br><span class=\"line\">                msg: <span class=\"string\">'用户不存在或密码错误'</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 生成token</span></span><br><span class=\"line\">        <span class=\"comment\">// secretOrPrivateKey：用\"YMBo's club\"字符串加密</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> token = jwt.sign(&#123;</span><br><span class=\"line\">            name: <span class=\"string\">'job'</span>,</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"YMBo's club\"</span>, &#123;</span><br><span class=\"line\">            expiresIn: <span class=\"number\">1</span> * <span class=\"number\">60</span>       <span class=\"comment\">//过期时间1分钟</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.json(&#123; <span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: doc, token &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/身份认证-jwt/1.jpeg\" alt=\"/login后返回信息\" title=\"\">\n                </div>\n                <div class=\"image-caption\">/login后返回信息</div>\n            </figure>\n<p>每次有路由请求的时候对token判断是否过期<br>添加一个中间件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> expressJWT = <span class=\"built_in\">require</span>(<span class=\"string\">'express-jwt'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"string\">\"ymb's club\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.set(secret, secret)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jwt验证</span></span><br><span class=\"line\">app.use(expressJWT(&#123;</span><br><span class=\"line\">    secret: secret</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    expiresIn: <span class=\"number\">60</span></span><br><span class=\"line\">&#125;).unless(&#123; <span class=\"attr\">path</span>: [<span class=\"string\">'/user/login'</span>] &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jwt验证,如果有错误（token不对，过期等错误）</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err.name === <span class=\"string\">\"UnauthorizedError\"</span>) &#123;</span><br><span class=\"line\">        res.status(<span class=\"number\">401</span>).send(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">1</span>,</span><br><span class=\"line\">            msg: <span class=\"string\">'请登录'</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json())</span><br><span class=\"line\">app.use(<span class=\"string\">'/user'</span>, userRouter)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里有一个关键点，当使用<code>express-jwt</code>进行token验证的时候，前台发过来的token必须是带 <strong>Bearer</strong>前缀的，比如token是<br>aaa.bbb.ccc，那么应该格式化为 <strong>Bearer aaa.bbb.ccc</strong> 这种形式</p>\n</blockquote>\n<h3 id=\"四、-前台代码\"><a href=\"#四、-前台代码\" class=\"headerlink\" title=\"四、 前台代码\"></a>四、 前台代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setLocalStorage是自定义的方法，存储token</span></span><br><span class=\"line\">setLocalStorage(<span class=\"string\">'Authorization'</span>, <span class=\"string\">`Bearer <span class=\"subst\">$&#123; res.data.token &#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"comment\">// 后台返回正确信息后 将token 存储在localStorage里</span></span><br></pre></td></tr></table></figure>\n<p>在项目的总入口或者次级入口加上这个，意思是后续的每一次axios请求都将携带<code>Authorization</code>信息<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = getLocalStorage(<span class=\"string\">'Authorization'</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"五、验证token\"><a href=\"#五、验证token\" class=\"headerlink\" title=\"五、验证token\"></a>五、验证token</h3><h4 id=\"1-第一种方法\"><a href=\"#1-第一种方法\" class=\"headerlink\" title=\"1. 第一种方法\"></a>1. 第一种方法</h4><p>上面说了后台添加中间件 <code>express-jwt</code> 来验证，网上的好多教程说的是通过一个单独的路由 /info，每次请求的时候先请求这个路由是否过期等，但是我觉得这种方法太浪费了，何必每次请求都要发送这个 /info这个验证请求呢</p>\n<h4 id=\"2-第二种方法\"><a href=\"#2-第二种方法\" class=\"headerlink\" title=\"2. 第二种方法\"></a>2. 第二种方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jwt.decode（token [，options]） </span><br><span class=\"line\"><span class=\"comment\">//解密，注意了之前存储到localStorage里的token是带 Bearer 要把它去掉进行解密。</span></span><br><span class=\"line\"><span class=\"comment\">//返回解码没有验证签名是否有效的payload。警告：这不会验证签名是否有效。它只是返回后端设置的payload</span></span><br><span class=\"line\"><span class=\"comment\">// 特点：不用secretOrPrivateKey进行解密</span></span><br></pre></td></tr></table></figure>\n<p>前台的顶层路由（就是进别的路由都要经过的路由）进行判断，怎么判断呢？<br>用 <strong>jsonwebtoken</strong> 这个包(上面用到过) 进行解密，然后取出设定的 <code>expiresIn</code> 过期时间，然后取到本地时间戳，与这个进行判断，看是否过期。</p>\n<h4 id=\"3-第三种方法\"><a href=\"#3-第三种方法\" class=\"headerlink\" title=\"3. 第三种方法\"></a>3. 第三种方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jwt.verify（token，secretOrPublicKey，[options，callback]）</span><br><span class=\"line\"><span class=\"comment\">//验证token合法性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去掉了Bearer </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> token = getLocalStorage(<span class=\"string\">'Authorization'</span>).replace(<span class=\"regexp\">/Bearer\\s/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">jwt.verify(token, <span class=\"string\">\"ymb's club\"</span>, (err, decoded) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'过期了快去登录'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.history.push(<span class=\"string\">'/login'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//如果token没用了 直接返回err</span></span><br><span class=\"line\"><span class=\"comment\">//用到了secretOrPrivateKey：用\"YMBo's club\"字符串解密，注意这个字段一定要和后台那个加密字段一致，否则它一致err</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"六、效果查看\"><a href=\"#六、效果查看\" class=\"headerlink\" title=\"六、效果查看\"></a>六、效果查看</h3><p>过期时间我设置的1分钟，为了方便调试</p>\n<p><strong>/login 返回token成功</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/身份认证-jwt/show.gif\" alt=\"返回token成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">返回token成功</div>\n            </figure></p>\n<p><strong>后台express-jwt验证token成功</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/身份认证-jwt/show2.gif\" alt=\"后台express-jwt验证token成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">后台express-jwt验证token成功</div>\n            </figure></p>\n<p><strong>路由跳转前验证token成功</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/身份认证-jwt/show3.gif\" alt=\"路由跳转前验证token成功\" title=\"\">\n                </div>\n                <div class=\"image-caption\">路由跳转前验证token成功</div>\n            </figure></p>\n"},{"title":"Django开发安装MySQL-python解决过程","date":"2018-12-19T09:52:13.000Z","_content":"\n### 一、前言\n这篇文章写的是我安装 `MySQL-python`\n遇到的问题，因为使用django开发所以我要和MySQL数据库连接，然后就死活安装不上，各种报错，折腾了一天多，终于解决了，趁着现在还有点印象，赶紧写下来，做个记录\n#### 1.问题描述\ndjango新建一个mysite项目，将数据库设置为MySQL，然后执行 **pip install MySQL-python** 安装数据库模块开始遇到的问题\n\n\n#### 2. 环境\n>macOS 10.13.6\n>django 1.11.17\n>python 2.7.10\n\n\n### 二、解决问题历程\n1. 执行 **pip install MySQL-python** 报错\n    ![安装MySQL-python](/images/Django开发安装MySQL-python解决过程/1.png)\n2. 百度后说需要安装 **mysql-connector-c**\n    ```\n    brew install mysql-connector-c\n    ```\n    如果有这种报错\n    ![安装mysql-connector-c](/images/Django开发安装MySQL-python解决过程/2.png)\n    那就按提示的输入命令解决（应该是**brew unlink mysql**），然后再次安装mysql-connector-c安装完后记得\n    安装成功后执行一次**brew link mysql**\n3. 安装 **Command Line Tools** 这个去苹果官网下就可以了 100多兆，网上说要下`xCode`，但是我没下`xCode`也成功了安装上这个了，所以不用下`xCode`就可以，终端输入 **which gcc** 查看 \n    ![安装Command Line Tools成功](/images/Django开发安装MySQL-python解决过程/3.png)\n\n4. 这时安装MySQL-python 肯定依然报错，反正我是这样 ，然后执行\n>export CC='/usr/bin/gcc'\n>export CFLAGS='-isysroot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk -I/opt/X11/include -arch i386 -arch x86_64'\n>export LDFLAGS='-arch i386 -arch x86_64'\n>export ARCHFLAGS='-arch i386 -arch x86_64'\n\n    我也不知道这啥意思，惭愧惭愧。。。\n5. 安装 MySQL-python，还会报这个错误\n    ![报错](/images/Django开发安装MySQL-python解决过程/4.png)\n    \n    >这里要说明一下 之前我的**mysql**是通过下载dmg包那种方式安装的，但是现在没办法我卸载**mysql**后又用brew方式安装了一下，版本为 `8.0.12 Homebrew`\n\n    修改mysql配置文件：**mysql_config**\n    ```\n    112 # Create options\n    113 libs=\"-L$pkglibdir\"\n    114 #libs=\"$libs -l \"           ##注释掉源代码\n    115 libs=\"$libs -lmysqlclient -lssl -lcrypto \"  ##修改成这样\n    ```\n6. 安装 MySQL-python 如果你的还报错，那我只能说再百度吧 ，离安装成功不远了，\n    因为我安装的时候也是疯狂报错，现在我回想的可    能不太全，因为我解决了好久\n\n7. 好了 现在安装好了MySQL-python ,然后执行 **pip install MySQL-python**，\n    妈的依然提示`Did you install mysqlclient or MySQL-python?` 好，在django根目录__init__.py文件里写上\n    ``` python\n    import pymysql\n    pymysql.install_as_MySQLdb()\n    ```\n    执行**pip install MySQL-python**\n    报错 `ImportError: No module named pymysql`\n    然后安装 **pip install pymysql**\n    再次执行 **python manage.py migrate**\n    终于成功了，我差点哭出来\n    去数据库看，对应的表已经创建了\n    ![成功啦](/images/Django开发安装MySQL-python解决过程/5.jpeg)","source":"_posts/Django开发安装MySQL-python解决过程.md","raw":"---\ntitle: Django开发安装MySQL-python解决过程\ndate: 2018-12-19 17:52:13\ntags: [Django,Python,Mysql]\n---\n\n### 一、前言\n这篇文章写的是我安装 `MySQL-python`\n遇到的问题，因为使用django开发所以我要和MySQL数据库连接，然后就死活安装不上，各种报错，折腾了一天多，终于解决了，趁着现在还有点印象，赶紧写下来，做个记录\n#### 1.问题描述\ndjango新建一个mysite项目，将数据库设置为MySQL，然后执行 **pip install MySQL-python** 安装数据库模块开始遇到的问题\n\n\n#### 2. 环境\n>macOS 10.13.6\n>django 1.11.17\n>python 2.7.10\n\n\n### 二、解决问题历程\n1. 执行 **pip install MySQL-python** 报错\n    ![安装MySQL-python](/images/Django开发安装MySQL-python解决过程/1.png)\n2. 百度后说需要安装 **mysql-connector-c**\n    ```\n    brew install mysql-connector-c\n    ```\n    如果有这种报错\n    ![安装mysql-connector-c](/images/Django开发安装MySQL-python解决过程/2.png)\n    那就按提示的输入命令解决（应该是**brew unlink mysql**），然后再次安装mysql-connector-c安装完后记得\n    安装成功后执行一次**brew link mysql**\n3. 安装 **Command Line Tools** 这个去苹果官网下就可以了 100多兆，网上说要下`xCode`，但是我没下`xCode`也成功了安装上这个了，所以不用下`xCode`就可以，终端输入 **which gcc** 查看 \n    ![安装Command Line Tools成功](/images/Django开发安装MySQL-python解决过程/3.png)\n\n4. 这时安装MySQL-python 肯定依然报错，反正我是这样 ，然后执行\n>export CC='/usr/bin/gcc'\n>export CFLAGS='-isysroot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk -I/opt/X11/include -arch i386 -arch x86_64'\n>export LDFLAGS='-arch i386 -arch x86_64'\n>export ARCHFLAGS='-arch i386 -arch x86_64'\n\n    我也不知道这啥意思，惭愧惭愧。。。\n5. 安装 MySQL-python，还会报这个错误\n    ![报错](/images/Django开发安装MySQL-python解决过程/4.png)\n    \n    >这里要说明一下 之前我的**mysql**是通过下载dmg包那种方式安装的，但是现在没办法我卸载**mysql**后又用brew方式安装了一下，版本为 `8.0.12 Homebrew`\n\n    修改mysql配置文件：**mysql_config**\n    ```\n    112 # Create options\n    113 libs=\"-L$pkglibdir\"\n    114 #libs=\"$libs -l \"           ##注释掉源代码\n    115 libs=\"$libs -lmysqlclient -lssl -lcrypto \"  ##修改成这样\n    ```\n6. 安装 MySQL-python 如果你的还报错，那我只能说再百度吧 ，离安装成功不远了，\n    因为我安装的时候也是疯狂报错，现在我回想的可    能不太全，因为我解决了好久\n\n7. 好了 现在安装好了MySQL-python ,然后执行 **pip install MySQL-python**，\n    妈的依然提示`Did you install mysqlclient or MySQL-python?` 好，在django根目录__init__.py文件里写上\n    ``` python\n    import pymysql\n    pymysql.install_as_MySQLdb()\n    ```\n    执行**pip install MySQL-python**\n    报错 `ImportError: No module named pymysql`\n    然后安装 **pip install pymysql**\n    再次执行 **python manage.py migrate**\n    终于成功了，我差点哭出来\n    去数据库看，对应的表已经创建了\n    ![成功啦](/images/Django开发安装MySQL-python解决过程/5.jpeg)","slug":"Django开发安装MySQL-python解决过程","published":1,"updated":"2018-12-19T10:55:56.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpv2eexx0000wwwlk4jbt9o8","content":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>这篇文章写的是我安装 <code>MySQL-python</code><br>遇到的问题，因为使用django开发所以我要和MySQL数据库连接，然后就死活安装不上，各种报错，折腾了一天多，终于解决了，趁着现在还有点印象，赶紧写下来，做个记录</p>\n<h4 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h4><p>django新建一个mysite项目，将数据库设置为MySQL，然后执行 <strong>pip install MySQL-python</strong> 安装数据库模块开始遇到的问题</p>\n<h4 id=\"2-环境\"><a href=\"#2-环境\" class=\"headerlink\" title=\"2. 环境\"></a>2. 环境</h4><blockquote>\n<p>macOS 10.13.6<br>django 1.11.17<br>python 2.7.10</p>\n</blockquote>\n<h3 id=\"二、解决问题历程\"><a href=\"#二、解决问题历程\" class=\"headerlink\" title=\"二、解决问题历程\"></a>二、解决问题历程</h3><ol>\n<li>执行 <strong>pip install MySQL-python</strong> 报错<br> <img src=\"/images/Django开发安装MySQL-python解决过程/1.png\" alt=\"安装MySQL-python\"></li>\n<li><p>百度后说需要安装 <strong>mysql-connector-c</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mysql-connector-c</span><br></pre></td></tr></table></figure>\n<p> 如果有这种报错<br> <img src=\"/images/Django开发安装MySQL-python解决过程/2.png\" alt=\"安装mysql-connector-c\"><br> 那就按提示的输入命令解决（应该是<strong>brew unlink mysql</strong>），然后再次安装mysql-connector-c安装完后记得<br> 安装成功后执行一次<strong>brew link mysql</strong></p>\n</li>\n<li><p>安装 <strong>Command Line Tools</strong> 这个去苹果官网下就可以了 100多兆，网上说要下<code>xCode</code>，但是我没下<code>xCode</code>也成功了安装上这个了，所以不用下<code>xCode</code>就可以，终端输入 <strong>which gcc</strong> 查看<br> <img src=\"/images/Django开发安装MySQL-python解决过程/3.png\" alt=\"安装Command Line Tools成功\"></p>\n</li>\n<li><p>这时安装MySQL-python 肯定依然报错，反正我是这样 ，然后执行</p>\n<blockquote>\n<p>export CC=’/usr/bin/gcc’<br>export CFLAGS=’-isysroot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk -I/opt/X11/include -arch i386 -arch x86_64’<br>export LDFLAGS=’-arch i386 -arch x86_64’<br>export ARCHFLAGS=’-arch i386 -arch x86_64’</p>\n</blockquote>\n<p> 我也不知道这啥意思，惭愧惭愧。。。</p>\n</li>\n<li><p>安装 MySQL-python，还会报这个错误<br> <img src=\"/images/Django开发安装MySQL-python解决过程/4.png\" alt=\"报错\"></p>\n<blockquote>\n<p>这里要说明一下 之前我的<strong>mysql</strong>是通过下载dmg包那种方式安装的，但是现在没办法我卸载<strong>mysql</strong>后又用brew方式安装了一下，版本为 <code>8.0.12 Homebrew</code></p>\n</blockquote>\n<p> 修改mysql配置文件：<strong>mysql_config</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">112 # Create options</span><br><span class=\"line\">113 libs=&quot;-L$pkglibdir&quot;</span><br><span class=\"line\">114 #libs=&quot;$libs -l &quot;           ##注释掉源代码</span><br><span class=\"line\">115 libs=&quot;$libs -lmysqlclient -lssl -lcrypto &quot;  ##修改成这样</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 MySQL-python 如果你的还报错，那我只能说再百度吧 ，离安装成功不远了，<br> 因为我安装的时候也是疯狂报错，现在我回想的可    能不太全，因为我解决了好久</p>\n</li>\n<li><p>好了 现在安装好了MySQL-python ,然后执行 <strong>pip install MySQL-python</strong>，<br> 妈的依然提示<code>Did you install mysqlclient or MySQL-python?</code> 好，在django根目录<strong>init</strong>.py文件里写上</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>\n<p> 执行<strong>pip install MySQL-python</strong><br> 报错 <code>ImportError: No module named pymysql</code><br> 然后安装 <strong>pip install pymysql</strong><br> 再次执行 <strong>python manage.py migrate</strong><br> 终于成功了，我差点哭出来<br> 去数据库看，对应的表已经创建了<br> <img src=\"/images/Django开发安装MySQL-python解决过程/5.jpeg\" alt=\"成功啦\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>这篇文章写的是我安装 <code>MySQL-python</code><br>遇到的问题，因为使用django开发所以我要和MySQL数据库连接，然后就死活安装不上，各种报错，折腾了一天多，终于解决了，趁着现在还有点印象，赶紧写下来，做个记录</p>\n<h4 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h4><p>django新建一个mysite项目，将数据库设置为MySQL，然后执行 <strong>pip install MySQL-python</strong> 安装数据库模块开始遇到的问题</p>\n<h4 id=\"2-环境\"><a href=\"#2-环境\" class=\"headerlink\" title=\"2. 环境\"></a>2. 环境</h4><blockquote>\n<p>macOS 10.13.6<br>django 1.11.17<br>python 2.7.10</p>\n</blockquote>\n<h3 id=\"二、解决问题历程\"><a href=\"#二、解决问题历程\" class=\"headerlink\" title=\"二、解决问题历程\"></a>二、解决问题历程</h3><ol>\n<li>执行 <strong>pip install MySQL-python</strong> 报错<br> <img src=\"/images/Django开发安装MySQL-python解决过程/1.png\" alt=\"安装MySQL-python\"></li>\n<li><p>百度后说需要安装 <strong>mysql-connector-c</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mysql-connector-c</span><br></pre></td></tr></table></figure>\n<p> 如果有这种报错<br> <img src=\"/images/Django开发安装MySQL-python解决过程/2.png\" alt=\"安装mysql-connector-c\"><br> 那就按提示的输入命令解决（应该是<strong>brew unlink mysql</strong>），然后再次安装mysql-connector-c安装完后记得<br> 安装成功后执行一次<strong>brew link mysql</strong></p>\n</li>\n<li><p>安装 <strong>Command Line Tools</strong> 这个去苹果官网下就可以了 100多兆，网上说要下<code>xCode</code>，但是我没下<code>xCode</code>也成功了安装上这个了，所以不用下<code>xCode</code>就可以，终端输入 <strong>which gcc</strong> 查看<br> <img src=\"/images/Django开发安装MySQL-python解决过程/3.png\" alt=\"安装Command Line Tools成功\"></p>\n</li>\n<li><p>这时安装MySQL-python 肯定依然报错，反正我是这样 ，然后执行</p>\n<blockquote>\n<p>export CC=’/usr/bin/gcc’<br>export CFLAGS=’-isysroot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk -I/opt/X11/include -arch i386 -arch x86_64’<br>export LDFLAGS=’-arch i386 -arch x86_64’<br>export ARCHFLAGS=’-arch i386 -arch x86_64’</p>\n</blockquote>\n<p> 我也不知道这啥意思，惭愧惭愧。。。</p>\n</li>\n<li><p>安装 MySQL-python，还会报这个错误<br> <img src=\"/images/Django开发安装MySQL-python解决过程/4.png\" alt=\"报错\"></p>\n<blockquote>\n<p>这里要说明一下 之前我的<strong>mysql</strong>是通过下载dmg包那种方式安装的，但是现在没办法我卸载<strong>mysql</strong>后又用brew方式安装了一下，版本为 <code>8.0.12 Homebrew</code></p>\n</blockquote>\n<p> 修改mysql配置文件：<strong>mysql_config</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">112 # Create options</span><br><span class=\"line\">113 libs=&quot;-L$pkglibdir&quot;</span><br><span class=\"line\">114 #libs=&quot;$libs -l &quot;           ##注释掉源代码</span><br><span class=\"line\">115 libs=&quot;$libs -lmysqlclient -lssl -lcrypto &quot;  ##修改成这样</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 MySQL-python 如果你的还报错，那我只能说再百度吧 ，离安装成功不远了，<br> 因为我安装的时候也是疯狂报错，现在我回想的可    能不太全，因为我解决了好久</p>\n</li>\n<li><p>好了 现在安装好了MySQL-python ,然后执行 <strong>pip install MySQL-python</strong>，<br> 妈的依然提示<code>Did you install mysqlclient or MySQL-python?</code> 好，在django根目录<strong>init</strong>.py文件里写上</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>\n<p> 执行<strong>pip install MySQL-python</strong><br> 报错 <code>ImportError: No module named pymysql</code><br> 然后安装 <strong>pip install pymysql</strong><br> 再次执行 <strong>python manage.py migrate</strong><br> 终于成功了，我差点哭出来<br> 去数据库看，对应的表已经创建了<br> <img src=\"/images/Django开发安装MySQL-python解决过程/5.jpeg\" alt=\"成功啦\"></p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjmlf8kfw0000vps62eyu1cm7","tag_id":"cjmlf8kg40004vps60f2q63z8","_id":"cjmlf8kga0009vps6r86pzbyx"},{"post_id":"cjmlf8kg10002vps61nptjrzc","tag_id":"cjmlf8kg90008vps6ywh6xpt7","_id":"cjmlf8kgl000evps685kx238q"},{"post_id":"cjmlf8kg50005vps686q0zugd","tag_id":"cjmlf8kgj000cvps6yohrdzos","_id":"cjmlf8kgt000ivps625v12spq"},{"post_id":"cjmlf8kgz000ovps6obat44hd","tag_id":"cjmlf8kg90008vps6ywh6xpt7","_id":"cjmlf8kh3000qvps6zlj5u1xc"},{"post_id":"cjmlf8kh3000rvps6qeglivws","tag_id":"cjmlf8kg90008vps6ywh6xpt7","_id":"cjmlf8kh7000uvps67un3li3z"},{"post_id":"cjmlf8kh5000tvps6ly097fnr","tag_id":"cjmlf8kg90008vps6ywh6xpt7","_id":"cjmlf8kh9000xvps6ry65dnio"},{"post_id":"cjmlf8kg70006vps653k46lrf","tag_id":"cjmlf8kg90008vps6ywh6xpt7","_id":"cjmlf8khg0012vps6aglmhey1"},{"post_id":"cjmlf8kg70006vps653k46lrf","tag_id":"cjmlf8kgv000kvps6ena6evys","_id":"cjmlf8khi0014vps650hzpgrk"},{"post_id":"cjmlf8kg70006vps653k46lrf","tag_id":"cjmlf8kgz000nvps6asidi2vz","_id":"cjmlf8khs0017vps65vqfkfde"},{"post_id":"cjmlf8kg70006vps653k46lrf","tag_id":"cjmlf8kh4000svps6atjf1ca2","_id":"cjmlf8ki00019vps6gaztpi5b"},{"post_id":"cjmlf8kg70006vps653k46lrf","tag_id":"cjmlf8kh8000wvps68qg8ka5j","_id":"cjmlf8ki1001cvps6d33pkd85"},{"post_id":"cjmlf8khe0011vps6obw7nr08","tag_id":"cjmlf8kgv000kvps6ena6evys","_id":"cjmlf8ki3001evps64uxo2co8"},{"post_id":"cjmlf8khi0016vps6d1ky8mpf","tag_id":"cjmlf8kgv000kvps6ena6evys","_id":"cjmlf8ki4001hvps6our0dui3"},{"post_id":"cjmlf8khv0018vps6r6m133zm","tag_id":"cjmlf8kg90008vps6ywh6xpt7","_id":"cjmlf8ki5001jvps6t1y8x6k6"},{"post_id":"cjmlf8kg80007vps6pqaolx5v","tag_id":"cjmlf8khd0010vps6nynzo3r2","_id":"cjmlf8ki6001lvps6zzmj72mb"},{"post_id":"cjmlf8kg80007vps6pqaolx5v","tag_id":"cjmlf8khi0015vps6fsg7bmh1","_id":"cjmlf8ki7001nvps64ln6zobh"},{"post_id":"cjmlf8kga000avps6ofhqrjbm","tag_id":"cjmlf8ki1001bvps6a4e9h6fv","_id":"cjmlf8ki7001ovps6mlksgqma"},{"post_id":"cjmlf8kgc000bvps6v4rd695z","tag_id":"cjmlf8ki4001gvps6q8qp89md","_id":"cjmlf8ki7001svps68azm0vot"},{"post_id":"cjmlf8kgc000bvps6v4rd695z","tag_id":"cjmlf8ki6001mvps6nv8htdt0","_id":"cjmlf8ki8001tvps6xwqf4u35"},{"post_id":"cjmlf8kgc000bvps6v4rd695z","tag_id":"cjmlf8ki7001pvps6d06plfo8","_id":"cjmlf8ki8001vvps6vewtk60x"},{"post_id":"cjmlf8kgc000bvps6v4rd695z","tag_id":"cjmlf8ki7001qvps6b6fhlk5z","_id":"cjmlf8ki8001wvps6se59blmg"},{"post_id":"cjmlf8kgk000dvps679reacqf","tag_id":"cjmlf8ki1001bvps6a4e9h6fv","_id":"cjmlf8ki8001yvps6qscun3lz"},{"post_id":"cjmlf8kgm000fvps6w8syiion","tag_id":"cjmlf8ki1001bvps6a4e9h6fv","_id":"cjmlf8ki8001zvps60jsnj3pu"},{"post_id":"cjmlf8kgr000hvps6zuem7b09","tag_id":"cjmlf8ki8001xvps6au33fnib","_id":"cjmlf8ki90021vps6mpfrf1f9"},{"post_id":"cjmlf8kgw000lvps6liuu5z35","tag_id":"cjmlf8khd0010vps6nynzo3r2","_id":"cjmlf8ki90023vps6yiz1u28b"},{"post_id":"cjmlf8kgx000mvps6sm605648","tag_id":"cjmlf8ki90022vps6diuuyf7q","_id":"cjmlf8ki90025vps6b04fpzy0"},{"post_id":"cjmlf8kh1000pvps6nwaetokt","tag_id":"cjmlf8ki90024vps6t1bfkfoi","_id":"cjmlf8kia0028vps6ky719ed4"},{"post_id":"cjmlf8kh1000pvps6nwaetokt","tag_id":"cjmlf8kia0026vps6p63r2cp7","_id":"cjmlf8kia0029vps60cwgcxp2"},{"post_id":"cjmlf8kh7000vvps6a70m4kc5","tag_id":"cjmlf8khd0010vps6nynzo3r2","_id":"cjmlf8kia002bvps63xonilix"},{"post_id":"cjmlf8kh9000yvps67fjen9bw","tag_id":"cjmlf8kia002avps6oc9rrw15","_id":"cjmlf8kib002dvps6ca8uie3y"},{"post_id":"cjmlf8khb000zvps62ifchq98","tag_id":"cjmlf8kia002cvps6b21m6a8r","_id":"cjmlf8kib002fvps6yr1kv97a"},{"post_id":"cjmlf8khh0013vps6e5plcqtc","tag_id":"cjmlf8kgv000kvps6ena6evys","_id":"cjmlf8kib002hvps6s9kon8ed"},{"post_id":"cjmlf8khh0013vps6e5plcqtc","tag_id":"cjmlf8kg90008vps6ywh6xpt7","_id":"cjmlf8kib002ivps6uh3sb1g2"},{"post_id":"cjmlf8khh0013vps6e5plcqtc","tag_id":"cjmlf8kib002evps6fxvdsrdi","_id":"cjmlf8kic002kvps6eulb048k"},{"post_id":"cjmlf8ki0001avps6r3fcij10","tag_id":"cjmlf8kib002gvps6o96rtqbu","_id":"cjmlf8kic002lvps601qmds2p"},{"post_id":"cjmlf8ki3001fvps6rn5mqgp7","tag_id":"cjmlf8kib002jvps6krm7gwq7","_id":"cjmlf8kic002nvps6h7kmpjq7"},{"post_id":"cjmlf8ki5001ivps6vai5awin","tag_id":"cjmlf8kic002mvps6pokxsx2f","_id":"cjmlf8kic002ovps6xr5msw9q"},{"post_id":"cjpv2eexx0000wwwlk4jbt9o8","tag_id":"cjpv2eey80001wwwlmnfgsmr5","_id":"cjpv2eeyg0004wwwl887az058"},{"post_id":"cjpv2eexx0000wwwlk4jbt9o8","tag_id":"cjpv2eeyd0002wwwldwtauwqf","_id":"cjpv2eeyg0005wwwluekhnqo3"},{"post_id":"cjpv2eexx0000wwwlk4jbt9o8","tag_id":"cjpv2eeye0003wwwlioyaaru8","_id":"cjpv2eeyh0006wwwl4faqqp2k"}],"Tag":[{"name":"hexo","_id":"cjmlf8kg40004vps60f2q63z8"},{"name":"react","_id":"cjmlf8kg90008vps6ywh6xpt7"},{"name":"npm","_id":"cjmlf8kgj000cvps6yohrdzos"},{"name":"webpack","_id":"cjmlf8kgv000kvps6ena6evys"},{"name":"create-react-app","_id":"cjmlf8kgz000nvps6asidi2vz"},{"name":"px2rem","_id":"cjmlf8kh4000svps6atjf1ca2"},{"name":"less","_id":"cjmlf8kh8000wvps68qg8ka5j"},{"name":"css","_id":"cjmlf8khd0010vps6nynzo3r2"},{"name":"attr()","_id":"cjmlf8khi0015vps6fsg7bmh1"},{"name":"javascript","_id":"cjmlf8ki1001bvps6a4e9h6fv"},{"name":"gulp","_id":"cjmlf8ki4001gvps6q8qp89md"},{"name":"ajax","_id":"cjmlf8ki6001mvps6nv8htdt0"},{"name":"跨域","_id":"cjmlf8ki7001pvps6d06plfo8"},{"name":"代理","_id":"cjmlf8ki7001qvps6b6fhlk5z"},{"name":"mobx","_id":"cjmlf8ki8001xvps6au33fnib"},{"name":"python","_id":"cjmlf8ki90022vps6diuuyf7q"},{"name":"webpack proxy","_id":"cjmlf8ki90024vps6t1bfkfoi"},{"name":"react跨域请求","_id":"cjmlf8kia0026vps6p63r2cp7"},{"name":"EditorConfig","_id":"cjmlf8kia002avps6oc9rrw15"},{"name":"Vue","_id":"cjmlf8kia002cvps6b21m6a8r"},{"name":"HMR","_id":"cjmlf8kib002evps6fxvdsrdi"},{"name":"算法","_id":"cjmlf8kib002gvps6o96rtqbu"},{"name":"ES6","_id":"cjmlf8kib002jvps6krm7gwq7"},{"name":"HTML5","_id":"cjmlf8kic002mvps6pokxsx2f"},{"name":"Django","_id":"cjpv2eey80001wwwlmnfgsmr5"},{"name":"Python","_id":"cjpv2eeyd0002wwwldwtauwqf"},{"name":"Mysql","_id":"cjpv2eeye0003wwwlioyaaru8"}]}}